
TESTING UPDATECOINS() FUNCTION

TEST 1: All cards copper, no bonus 
----TEST PASSED---- THE COINS WERE PROPERLY UPDATED

TEST 2: All cards silver, no bonus 
----TEST PASSED---- THE COINS WERE PROPERLY UPDATED

TEST 3: All cards gold, no bonus 
----TEST PASSED---- THE COINS WERE PROPERLY UPDATED

TEST 4: No Treasure Cards, no bonus 
----TEST PASSED---- THE COINS WERE PROPERLY UPDATED

TEST 5: No Treasure Cards, a bonus 
----TEST PASSED---- THE COINS WERE PROPERLY UPDATED

TEST 6: All Treasure Cards, mix of types, no bonus 
----TEST PASSED---- THE COINS WERE PROPERLY UPDATED

TEST 7: Some Treasure Cards, mix of types, no bonus 
----TEST PASSED---- THE COINS WERE PROPERLY UPDATED

TEST 8: Some Treasure Cards, mix of types, a bonus 
----TEST PASSED---- THE COINS WERE PROPERLY UPDATED

TEST 9: No cards in hand, no bonus 
----TEST PASSED---- THE COINS WERE PROPERLY UPDATED

TEST 10: No cards in hand, a bonus 
----TEST PASSED---- THE COINS WERE PROPERLY UPDATED
ALL TESTS PASSED
File 'dominion.c'
Lines executed:26.26% of 556
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
  9730266:    8:int compare(const void* a, const void* b) {
  9730266:    9:  if (*(int*)a > *(int*)b)
  4863001:   10:    return 1;
  4867265:   11:  if (*(int*)a < *(int*)b)
  1719842:   12:    return -1;
  3147423:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    40010:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    40010:   44:  SelectStream(1);
    40010:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    40010:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    40010:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    94927:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   929083:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   874166:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    39968:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       42:   73:  if (numPlayers == 2)
        -:   74:    {
       16:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       26:   77:  else if (numPlayers == 3)
        -:   78:    {
       10:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       16:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       42:   87:  if (numPlayers == 2)
        -:   88:    {
       16:   89:      state->supplyCount[estate] = 8;
       16:   90:      state->supplyCount[duchy] = 8;
       16:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       26:   95:      state->supplyCount[estate] = 12;
       26:   96:      state->supplyCount[duchy] = 12;
       26:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       42:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       42:  102:  state->supplyCount[silver] = 40;
       42:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      882:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     6940:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     6510:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      410:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      148:  115:		  if (numPlayers == 2){ 
       22:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       52:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      336:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      410:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     6100:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      168:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      126:  140:      state->deckCount[i] = 0;
      504:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      378:  143:	  state->deck[i][j] = estate;
      378:  144:	  state->deckCount[i]++;
        -:  145:	}
     1008:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      882:  148:	  state->deck[i][j] = copper;
      882:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      168:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      126:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      168:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      126:  166:      state->handCount[i] = 0;
      126:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1176:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     1134:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       42:  182:  state->outpostPlayed = 0;
       42:  183:  state->phase = 0;
       42:  184:  state->numActions = 1;
       42:  185:  state->numBuys = 1;
       42:  186:  state->playedCardCount = 0;
       42:  187:  state->whoseTurn = 0;
       42:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      252:  192:  for (it = 0; it < 5; it++){
      210:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       42:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       42:  198:  return 0;
        -:  199:}
        -:  200:
    20133:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    20133:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    20133:  209:  if (state->deckCount[player] < 1)
     6671:  210:    return -1;
    13462:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  1492759:  214:  while (state->deckCount[player] > 0) {
  1465835:  215:    card = floor(Random() * state->deckCount[player]);
  1465835:  216:    newDeck[newDeckPos] = state->deck[player][card];
  1465835:  217:    newDeckPos++;
102729959:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
101264124:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  1465835:  221:    state->deckCount[player]--;
        -:  222:  }
  1479297:  223:  for (i = 0; i < newDeckPos; i++) {
  1465835:  224:    state->deck[player][i] = newDeck[i];
  1465835:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    13462:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
   143830:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   143830:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
  1464585:  533:    for (i = 0; i < state->discardCount[player];i++){
  1457912:  534:      state->deck[player][i] = state->discard[player][i];
  1457912:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     6673:  538:    state->deckCount[player] = state->discardCount[player];
     6673:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     6673:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     6673:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     6673:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     6673:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     6673:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
     6673:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     6673:  563:    state->deckCount[player]--;
     6673:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   137157:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   137157:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   137157:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   137157:  576:    state->deckCount[player]--;
   137157:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   143830:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    10000:  646:int adventurerEffect(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphandCounter, int temphand []) {
        -:  647:	
   153620:  648:	while (drawntreasure <= 2) {
   133620:  649:		if (state->deckCount[currentPlayer] <= 1) {//if the deck is empty we need to shuffle discard and add to deck
    13334:  650:			shuffle(currentPlayer, state);
        -:  651:		}
   133620:  652:		drawCard(currentPlayer, state);
   133620:  653:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
   133620:  654:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    30000:  655:			drawntreasure++;
        -:  656:		else {
   103620:  657:			temphand[temphandCounter] = cardDrawn;
   103620:  658:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   103620:  659:			temphandCounter++;
        -:  660:		}
        -:  661:	}
   123620:  662:	while (temphandCounter - 1 >= 0) {
   103620:  663:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[temphandCounter - 1]; // discard all cards in play that have been drawn
   103620:  664:		temphandCounter = temphandCounter - 1;
        -:  665:	}
    10000:  666:	return 0;
        -:  667:}
        -:  668:
    #####:  669:int smithyEffect(int currentPlayer, struct gameState *state, int handPos, int i) {
        -:  670:	
        -:  671:	//+3 Cards
    #####:  672:	for (i = 1; i < 3; i++)
        -:  673:	{
    #####:  674:		drawCard(currentPlayer, state);
        -:  675:	}
        -:  676:
        -:  677:	//discard card from hand
        -:  678:	//discardCard(handPos, currentPlayer, state, 0);
    #####:  679:	return 0;
        -:  680:}
        -:  681:
    20000:  682:int outpostEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  683:	
        -:  684:	//set outpost flag
    20000:  685:	state->outpostPlayed++;
        -:  686:
        -:  687:	//discard card
        -:  688:	//discardCard(handPos, currentPlayer, state, 0);
    20000:  689:	return 0;
        -:  690:}
        -:  691:
    10000:  692:int villageEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  693:	
        -:  694:	//+1 Card
    10000:  695:	drawCard(currentPlayer, state);
        -:  696:
        -:  697:	//+2 Actions
    10000:  698:	state->numActions = state->numActions + 3;
        -:  699:
        -:  700:	//discard played card from hand
    10000:  701:	discardCard(handPos, currentPlayer, state, 1);
    10000:  702:	return 0;
        -:  703:}
        -:  704:
    #####:  705:int embargoEffect(int currentPlayer, struct gameState *state, int handPos, int choice1) {
        -:  706:	//+2 Coins
    #####:  707:	state->coins = state->coins + 2;
        -:  708:
        -:  709:	//see if selected pile is in play
    #####:  710:	if (state->supplyCount[choice1] == -1)
        -:  711:	{
    #####:  712:		return -1;
        -:  713:	}
        -:  714:
        -:  715:	//add embargo token to selected supply pile
    #####:  716:	state->embargoTokens[choice1]++;
        -:  717:
        -:  718:	//trash card
    #####:  719:	discardCard(handPos, currentPlayer, state, 0);
    #####:  720:	return 0;
        -:  721:}
        -:  722:
        -:  723:
        -:  724:
    #####:  725:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  726:{
        -:  727:  int i;
        -:  728:  int j;
        -:  729:  int k;
        -:  730:  int x;
        -:  731:  int index;
    #####:  732:  int currentPlayer = whoseTurn(state);
    #####:  733:  int nextPlayer = currentPlayer + 1;
        -:  734:
    #####:  735:  int tributeRevealedCards[2] = {-1, -1};
        -:  736:  int temphand[MAX_HAND];// moved above the if statement
    #####:  737:  int drawntreasure=0;
        -:  738:  int cardDrawn;
    #####:  739:  int z = 0;// this is the counter for the temp hand
    #####:  740:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  741:    nextPlayer = 0;
        -:  742:  }
        -:  743:  
        -:  744:	
        -:  745:  //uses switch to select card and perform actions
    #####:  746:  switch( card ) 
        -:  747:    {
        -:  748:    case adventurer:
    #####:  749:		return adventurerEffect(drawntreasure, state, currentPlayer, cardDrawn, z, temphand);
        -:  750:			
        -:  751:    case council_room:
        -:  752:      //+4 Cards
    #####:  753:      for (i = 0; i < 4; i++)
        -:  754:	{
    #####:  755:	  drawCard(currentPlayer, state);
        -:  756:	}
        -:  757:			
        -:  758:      //+1 Buy
    #####:  759:      state->numBuys++;
        -:  760:			
        -:  761:      //Each other player draws a card
    #####:  762:      for (i = 0; i < state->numPlayers; i++)
        -:  763:	{
    #####:  764:	  if ( i != currentPlayer )
        -:  765:	    {
    #####:  766:	      drawCard(i, state);
        -:  767:	    }
        -:  768:	}
        -:  769:			
        -:  770:      //put played card in played card pile
    #####:  771:      discardCard(handPos, currentPlayer, state, 0);
        -:  772:			
    #####:  773:      return 0;
        -:  774:			
        -:  775:    case feast:
        -:  776:      //gain card with cost up to 5
        -:  777:      //Backup hand
    #####:  778:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  779:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  780:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  781:      }
        -:  782:      //Backup hand
        -:  783:
        -:  784:      //Update Coins for Buy
    #####:  785:      updateCoins(currentPlayer, state, 5);
    #####:  786:      x = 1;//Condition to loop on
    #####:  787:      while( x == 1) {//Buy one card
    #####:  788:	if (supplyCount(choice1, state) <= 0){
        -:  789:	  if (DEBUG)
        -:  790:	    printf("None of that card left, sorry!\n");
        -:  791:
        -:  792:	  if (DEBUG){
        -:  793:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  794:	  }
        -:  795:	}
    #####:  796:	else if (state->coins < getCost(choice1)){
    #####:  797:	  printf("That card is too expensive!\n");
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  801:	  }
        -:  802:	}
        -:  803:	else{
        -:  804:
        -:  805:	  if (DEBUG){
        -:  806:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  807:	  }
        -:  808:
    #####:  809:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  810:	  x = 0;//No more buying cards
        -:  811:
        -:  812:	  if (DEBUG){
        -:  813:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  814:	  }
        -:  815:
        -:  816:	}
        -:  817:      }     
        -:  818:
        -:  819:      //Reset Hand
    #####:  820:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  821:	state->hand[currentPlayer][i] = temphand[i];
    #####:  822:	temphand[i] = -1;
        -:  823:      }
        -:  824:      //Reset Hand
        -:  825:      			
    #####:  826:      return 0;
        -:  827:			
        -:  828:    case gardens:
    #####:  829:      return -1;
        -:  830:			
        -:  831:    case mine:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  835:	{
    #####:  836:	  return -1;
        -:  837:	}
        -:  838:		
    #####:  839:      if (choice2 > treasure_map || choice2 < curse)
        -:  840:	{
    #####:  841:	  return -1;
        -:  842:	}
        -:  843:
    #####:  844:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:
    #####:  849:      gainCard(choice2, state, 2, currentPlayer);
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  856:	{
    #####:  857:	  if (state->hand[currentPlayer][i] == j)
        -:  858:	    {
    #####:  859:	      discardCard(i, currentPlayer, state, 0);			
    #####:  860:	      break;
        -:  861:	    }
        -:  862:	}
        -:  863:			
    #####:  864:      return 0;
        -:  865:			
        -:  866:    case remodel:
    #####:  867:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  868:
    #####:  869:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  870:	{
    #####:  871:	  return -1;
        -:  872:	}
        -:  873:
    #####:  874:      gainCard(choice2, state, 0, currentPlayer);
        -:  875:
        -:  876:      //discard card from hand
    #####:  877:      discardCard(handPos, currentPlayer, state, 0);
        -:  878:
        -:  879:      //discard trashed card
    #####:  880:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  881:	{
    #####:  882:	  if (state->hand[currentPlayer][i] == j)
        -:  883:	    {
    #####:  884:	      discardCard(i, currentPlayer, state, 0);			
    #####:  885:	      break;
        -:  886:	    }
        -:  887:	}
        -:  888:
        -:  889:
    #####:  890:      return 0;
        -:  891:		
        -:  892:    case smithy:
        -:  893:
    #####:  894:		return smithyEffect(currentPlayer, state, handPos, i);
        -:  895:		
        -:  896:    case village:
        -:  897:
    #####:  898:		return villageEffect(currentPlayer, state, handPos);
        -:  899:		
        -:  900:    case baron:
    #####:  901:      state->numBuys++;//Increase buys by 1!
    #####:  902:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  903:	int p = 0;//Iterator for hand!
    #####:  904:	int card_not_discarded = 1;//Flag for discard set!
    #####:  905:	while(card_not_discarded){
    #####:  906:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  907:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  908:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  909:	    state->discardCount[currentPlayer]++;
    #####:  910:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  911:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  912:	    }
    #####:  913:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  914:	    state->handCount[currentPlayer]--;
    #####:  915:	    card_not_discarded = 0;//Exit the loop
        -:  916:	  }
    #####:  917:	  else if (p > state->handCount[currentPlayer]){
        -:  918:	    if(DEBUG) {
        -:  919:	      printf("No estate cards in your hand, invalid choice\n");
        -:  920:	      printf("Must gain an estate if there are any\n");
        -:  921:	    }
    #####:  922:	    if (supplyCount(estate, state) > 0){
    #####:  923:	      gainCard(estate, state, 0, currentPlayer);
    #####:  924:	      state->supplyCount[estate]--;//Decrement estates
    #####:  925:	      if (supplyCount(estate, state) == 0){
    #####:  926:		isGameOver(state);
        -:  927:	      }
        -:  928:	    }
    #####:  929:	    card_not_discarded = 0;//Exit the loop
        -:  930:	  }
        -:  931:			    
        -:  932:	  else{
    #####:  933:	    p++;//Next card
        -:  934:	  }
        -:  935:	}
        -:  936:      }
        -:  937:			    
        -:  938:      else{
    #####:  939:	if (supplyCount(estate, state) > 0){
    #####:  940:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  941:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  942:	  if (supplyCount(estate, state) == 0){
    #####:  943:	    isGameOver(state);
        -:  944:	  }
        -:  945:	}
        -:  946:      }
        -:  947:	    
        -:  948:      
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case great_hall:
        -:  952:      //+1 Card
    #####:  953:      drawCard(currentPlayer, state);
        -:  954:			
        -:  955:      //+1 Actions
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
    #####:  960:      return 0;
        -:  961:		
        -:  962:    case minion:
        -:  963:      //+1 action
    #####:  964:      state->numActions++;
        -:  965:			
        -:  966:      //discard card from hand
    #####:  967:      discardCard(handPos, currentPlayer, state, 0);
        -:  968:			
    #####:  969:      if (choice1)		//+2 coins
        -:  970:	{
    #####:  971:	  state->coins = state->coins + 2;
        -:  972:	}
        -:  973:			
    #####:  974:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  975:	{
        -:  976:	  //discard hand
    #####:  977:	  while(numHandCards(state) > 0)
        -:  978:	    {
    #####:  979:	      discardCard(handPos, currentPlayer, state, 0);
        -:  980:	    }
        -:  981:				
        -:  982:	  //draw 4
    #####:  983:	  for (i = 0; i < 4; i++)
        -:  984:	    {
    #####:  985:	      drawCard(currentPlayer, state);
        -:  986:	    }
        -:  987:				
        -:  988:	  //other players discard hand and redraw if hand size > 4
    #####:  989:	  for (i = 0; i < state->numPlayers; i++)
        -:  990:	    {
    #####:  991:	      if (i != currentPlayer)
        -:  992:		{
    #####:  993:		  if ( state->handCount[i] > 4 )
        -:  994:		    {
        -:  995:		      //discard hand
    #####:  996:		      while( state->handCount[i] > 0 )
        -:  997:			{
    #####:  998:			  discardCard(handPos, i, state, 0);
        -:  999:			}
        -: 1000:							
        -: 1001:		      //draw 4
    #####: 1002:		      for (j = 0; j < 4; j++)
        -: 1003:			{
    #####: 1004:			  drawCard(i, state);
        -: 1005:			}
        -: 1006:		    }
        -: 1007:		}
        -: 1008:	    }
        -: 1009:				
        -: 1010:	}
    #####: 1011:      return 0;
        -: 1012:		
        -: 1013:    case steward:
    #####: 1014:      if (choice1 == 1)
        -: 1015:	{
        -: 1016:	  //+2 cards
    #####: 1017:	  drawCard(currentPlayer, state);
    #####: 1018:	  drawCard(currentPlayer, state);
        -: 1019:	}
    #####: 1020:      else if (choice1 == 2)
        -: 1021:	{
        -: 1022:	  //+2 coins
    #####: 1023:	  state->coins = state->coins + 2;
        -: 1024:	}
        -: 1025:      else
        -: 1026:	{
        -: 1027:	  //trash 2 cards in hand
    #####: 1028:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1029:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1030:	}
        -: 1031:			
        -: 1032:      //discard card from hand
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1034:      return 0;
        -: 1035:		
        -: 1036:    case tribute:
    #####: 1037:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1038:	if (state->deckCount[nextPlayer] > 0){
    #####: 1039:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1040:	  state->deckCount[nextPlayer]--;
        -: 1041:	}
    #####: 1042:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1043:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1044:	  state->discardCount[nextPlayer]--;
        -: 1045:	}
        -: 1046:	else{
        -: 1047:	  //No Card to Reveal
        -: 1048:	  if (DEBUG){
        -: 1049:	    printf("No cards to reveal\n");
        -: 1050:	  }
        -: 1051:	}
        -: 1052:      }
        -: 1053:	    
        -: 1054:      else{
    #####: 1055:	if (state->deckCount[nextPlayer] == 0){
    #####: 1056:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1057:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1058:	    state->deckCount[nextPlayer]++;
    #####: 1059:	    state->discard[nextPlayer][i] = -1;
    #####: 1060:	    state->discardCount[nextPlayer]--;
        -: 1061:	  }
        -: 1062:			    
    #####: 1063:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1064:	} 
    #####: 1065:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1066:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1067:	state->deckCount[nextPlayer]--;
    #####: 1068:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1069:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1070:	state->deckCount[nextPlayer]--;
        -: 1071:      }    
        -: 1072:		       
    #####: 1073:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1074:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1075:	state->playedCardCount++;
    #####: 1076:	tributeRevealedCards[1] = -1;
        -: 1077:      }
        -: 1078:
    #####: 1079:      for (i = 0; i <= 2; i ++){
    #####: 1080:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1081:	  state->coins += 2;
        -: 1082:	}
        -: 1083:		    
    #####: 1084:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1085:	  drawCard(currentPlayer, state);
    #####: 1086:	  drawCard(currentPlayer, state);
        -: 1087:	}
        -: 1088:	else{//Action Card
    #####: 1089:	  state->numActions = state->numActions + 2;
        -: 1090:	}
        -: 1091:      }
        -: 1092:	    
    #####: 1093:      return 0;
        -: 1094:		
        -: 1095:    case ambassador:
    #####: 1096:      j = 0;		//used to check if player has enough cards to discard
        -: 1097:
    #####: 1098:      if (choice2 > 2 || choice2 < 0)
        -: 1099:	{
    #####: 1100:	  return -1;				
        -: 1101:	}
        -: 1102:
    #####: 1103:      if (choice1 == handPos)
        -: 1104:	{
    #####: 1105:	  return -1;
        -: 1106:	}
        -: 1107:
    #####: 1108:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1109:	{
    #####: 1110:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1111:	    {
    #####: 1112:	      j++;
        -: 1113:	    }
        -: 1114:	}
    #####: 1115:      if (j < choice2)
        -: 1116:	{
    #####: 1117:	  return -1;				
        -: 1118:	}
        -: 1119:
        -: 1120:      if (DEBUG) 
        -: 1121:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1122:
        -: 1123:      //increase supply count for choosen card by amount being discarded
    #####: 1124:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1125:			
        -: 1126:      //each other player gains a copy of revealed card
    #####: 1127:      for (i = 0; i < state->numPlayers; i++)
        -: 1128:	{
    #####: 1129:	  if (i != currentPlayer)
        -: 1130:	    {
    #####: 1131:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1132:	    }
        -: 1133:	}
        -: 1134:
        -: 1135:      //discard played card from hand
    #####: 1136:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1137:
        -: 1138:      //trash copies of cards returned to supply
    #####: 1139:      for (j = 0; j < choice2; j++)
        -: 1140:	{
    #####: 1141:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1142:	    {
    #####: 1143:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1144:		{
    #####: 1145:		  discardCard(i, currentPlayer, state, 1);
    #####: 1146:		  break;
        -: 1147:		}
        -: 1148:	    }
        -: 1149:	}			
        -: 1150:
    #####: 1151:      return 0;
        -: 1152:		
        -: 1153:    case cutpurse:
        -: 1154:
    #####: 1155:      updateCoins(currentPlayer, state, 2);
    #####: 1156:      for (i = 0; i < state->numPlayers; i++)
        -: 1157:	{
    #####: 1158:	  if (i != currentPlayer)
        -: 1159:	    {
    #####: 1160:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1161:		{
    #####: 1162:		  if (state->hand[i][j] == copper)
        -: 1163:		    {
    #####: 1164:		      discardCard(j, i, state, 0);
    #####: 1165:		      break;
        -: 1166:		    }
    #####: 1167:		  if (j == state->handCount[i])
        -: 1168:		    {
    #####: 1169:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1170:			{
        -: 1171:			  if (DEBUG)
        -: 1172:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1173:			}	
    #####: 1174:		      break;
        -: 1175:		    }		
        -: 1176:		}
        -: 1177:					
        -: 1178:	    }
        -: 1179:				
        -: 1180:	}				
        -: 1181:
        -: 1182:      //discard played card from hand
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1184:
    #####: 1185:      return 0;
        -: 1186:
        -: 1187:		
        -: 1188:    case embargo: 
    #####: 1189:		return embargoEffect(currentPlayer, state, handPos, choice1);
        -: 1190:		
        -: 1191:    case outpost:
    #####: 1192:		return outpostEffect(currentPlayer, state, handPos);
        -: 1193:		
        -: 1194:    case salvager:
        -: 1195:      //+1 buy
    #####: 1196:      state->numBuys++;
        -: 1197:			
    #####: 1198:      if (choice1)
        -: 1199:	{
        -: 1200:	  //gain coins equal to trashed card
    #####: 1201:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1202:	  //trash card
    #####: 1203:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1204:	}
        -: 1205:			
        -: 1206:      //discard card
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1208:      return 0;
        -: 1209:		
        -: 1210:    case sea_hag:
    #####: 1211:      for (i = 0; i < state->numPlayers; i++){
    #####: 1212:	if (i != currentPlayer){
    #####: 1213:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1214:	  state->discardCount[i]++;
    #####: 1215:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1216:	}
        -: 1217:      }
    #####: 1218:      return 0;
        -: 1219:		
        -: 1220:    case treasure_map:
        -: 1221:      //search hand for another treasure_map
    #####: 1222:      index = -1;
    #####: 1223:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1224:	{
    #####: 1225:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1226:	    {
    #####: 1227:	      index = i;
    #####: 1228:	      break;
        -: 1229:	    }
        -: 1230:	}
    #####: 1231:      if (index > -1)
        -: 1232:	{
        -: 1233:	  //trash both treasure cards
    #####: 1234:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1235:	  discardCard(index, currentPlayer, state, 1);
        -: 1236:
        -: 1237:	  //gain 4 Gold cards
    #####: 1238:	  for (i = 0; i < 4; i++)
        -: 1239:	    {
    #####: 1240:	      gainCard(gold, state, 1, currentPlayer);
        -: 1241:	    }
        -: 1242:				
        -: 1243:	  //return success
    #####: 1244:	  return 1;
        -: 1245:	}
        -: 1246:			
        -: 1247:      //no second treasure_map found in hand
    #####: 1248:      return -1;
        -: 1249:    }
        -: 1250:	
    #####: 1251:  return -1;
        -: 1252:}
        -: 1253:
    10000: 1254:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1255:{
        -: 1256:	
        -: 1257:  //if card is not trashed, added to Played pile 
    10000: 1258:  if (trashFlag < 1)
        -: 1259:    {
        -: 1260:      //add card to played pile
    #####: 1261:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1262:      state->playedCardCount++;
        -: 1263:    }
        -: 1264:	
        -: 1265:  //set played card to -1
    10000: 1266:  state->hand[currentPlayer][handPos] = -1;
        -: 1267:	
        -: 1268:  //remove card from player's hand
    10000: 1269:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1270:    {
        -: 1271:      //reduce number of cards in hand
    #####: 1272:      state->handCount[currentPlayer]--;
        -: 1273:    }
    10000: 1274:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
        -: 1278:    }
        -: 1279:  else 	
        -: 1280:    {
        -: 1281:      //replace discarded card with last card in hand
    10000: 1282:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1283:      //set last card to -1
    10000: 1284:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1285:      //reduce number of cards in hand
    10000: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
        -: 1288:	
    10000: 1289:  return 0;
        -: 1290:}
        -: 1291:
    #####: 1292:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1293:{
        -: 1294:  //Note: supplyPos is enum of choosen card
        -: 1295:	
        -: 1296:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1297:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1298:    {
    #####: 1299:      return -1;
        -: 1300:    }
        -: 1301:	
        -: 1302:  //added card for [whoseTurn] current player:
        -: 1303:  // toFlag = 0 : add to discard
        -: 1304:  // toFlag = 1 : add to deck
        -: 1305:  // toFlag = 2 : add to hand
        -: 1306:
    #####: 1307:  if (toFlag == 1)
        -: 1308:    {
    #####: 1309:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1310:      state->deckCount[player]++;
        -: 1311:    }
    #####: 1312:  else if (toFlag == 2)
        -: 1313:    {
    #####: 1314:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1315:      state->handCount[player]++;
        -: 1316:    }
        -: 1317:  else
        -: 1318:    {
    #####: 1319:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1320:      state->discardCount[player]++;
        -: 1321:    }
        -: 1322:	
        -: 1323:  //decrease number in supply pile
    #####: 1324:  state->supplyCount[supplyPos]--;
        -: 1325:	 
    #####: 1326:  return 0;
        -: 1327:}
        -: 1328:
       52: 1329:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1330:{
        -: 1331:  int i;
        -: 1332:	
        -: 1333:  //reset coin count
       52: 1334:  state->coins = 0;
        -: 1335:
        -: 1336:  //add coins for each Treasure card in player's hand
      302: 1337:  for (i = 0; i < state->handCount[player]; i++)
        -: 1338:    {
      250: 1339:      if (state->hand[player][i] == copper)
        -: 1340:	{
      173: 1341:	  state->coins += 1;
        -: 1342:	}
       77: 1343:      else if (state->hand[player][i] == silver)
        -: 1344:	{
        9: 1345:	  state->coins += 2;
        -: 1346:	}
       68: 1347:      else if (state->hand[player][i] == gold)
        -: 1348:	{
        8: 1349:	  state->coins += 3;
        -: 1350:	}	
        -: 1351:    }	
        -: 1352:
        -: 1353:  //add bonus
       52: 1354:  state->coins += bonus;
        -: 1355:
       52: 1356:  return 0;
        -: 1357:}
        -: 1358:
        -: 1359:
        -: 1360://end of dominion.c
        -: 1361:

TESTING ISGAMEOVER() FUNCTION

TEST 1: All Province Cards Gone 
----TEST PASSED----  THE GAME IS OVER

TEST 2: One supply pile gone 
----TEST PASSED----  THE GAME IS NOT OVER

TEST 3: Two supply piles gone 
----TEST PASSED----  THE GAME IS NOT OVER

TEST 4: Three supply piles gone 
----TEST FAILED----  THE GAME IS NOT OVER

TEST 5: Four supply piles gone 
----TEST FAILED----  THE GAME IS NOT OVER

TEST 6: Province pile empty and 2 supply piles empty 
----TEST PASSED----  THE GAME IS OVER

TEST 7: Province pile empty and 3 supply piles empty 
----TEST PASSED----  THE GAME IS OVER
NOT ALL TESTS PASSED. NUMBER OF FAILS: 2
File 'dominion.c'
Lines executed:27.88% of 556
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
  9730476:    8:int compare(const void* a, const void* b) {
  9730476:    9:  if (*(int*)a > *(int*)b)
  4863001:   10:    return 1;
  4867475:   11:  if (*(int*)a < *(int*)b)
  1719898:   12:    return -1;
  3147577:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    40017:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    40017:   44:  SelectStream(1);
    40017:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    40017:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    40017:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    95004:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   929853:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   874866:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    39968:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       49:   73:  if (numPlayers == 2)
        -:   74:    {
       23:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       26:   77:  else if (numPlayers == 3)
        -:   78:    {
       10:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       16:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       49:   87:  if (numPlayers == 2)
        -:   88:    {
       23:   89:      state->supplyCount[estate] = 8;
       23:   90:      state->supplyCount[duchy] = 8;
       23:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       26:   95:      state->supplyCount[estate] = 12;
       26:   96:      state->supplyCount[duchy] = 12;
       26:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       49:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       49:  102:  state->supplyCount[silver] = 40;
       49:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1029:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     8102:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     7595:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      473:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      162:  115:		  if (numPlayers == 2){ 
       29:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       52:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      392:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      473:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     7122:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      189:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      140:  140:      state->deckCount[i] = 0;
      560:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      420:  143:	  state->deck[i][j] = estate;
      420:  144:	  state->deckCount[i]++;
        -:  145:	}
     1120:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      980:  148:	  state->deck[i][j] = copper;
      980:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      189:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      140:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      189:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      140:  166:      state->handCount[i] = 0;
      140:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1372:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     1323:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       49:  182:  state->outpostPlayed = 0;
       49:  183:  state->phase = 0;
       49:  184:  state->numActions = 1;
       49:  185:  state->numBuys = 1;
       49:  186:  state->playedCardCount = 0;
       49:  187:  state->whoseTurn = 0;
       49:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      294:  192:  for (it = 0; it < 5; it++){
      245:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       49:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       49:  198:  return 0;
        -:  199:}
        -:  200:
    20147:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    20147:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    20147:  209:  if (state->deckCount[player] < 1)
     6671:  210:    return -1;
    13476:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  1492927:  214:  while (state->deckCount[player] > 0) {
  1465975:  215:    card = floor(Random() * state->deckCount[player]);
  1465975:  216:    newDeck[newDeckPos] = state->deck[player][card];
  1465975:  217:    newDeckPos++;
102730449:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
101264474:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  1465975:  221:    state->deckCount[player]--;
        -:  222:  }
  1479451:  223:  for (i = 0; i < newDeckPos; i++) {
  1465975:  224:    state->deck[player][i] = newDeck[i];
  1465975:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    13476:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        7:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        7:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        3:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
   143865:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   143865:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
  1464585:  533:    for (i = 0; i < state->discardCount[player];i++){
  1457912:  534:      state->deck[player][i] = state->discard[player][i];
  1457912:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     6673:  538:    state->deckCount[player] = state->discardCount[player];
     6673:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     6673:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     6673:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     6673:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     6673:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     6673:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
     6673:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     6673:  563:    state->deckCount[player]--;
     6673:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   137192:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   137192:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   137192:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   137192:  576:    state->deckCount[player]--;
   137192:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   143865:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    10000:  646:int adventurerEffect(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphandCounter, int temphand []) {
        -:  647:	
   153620:  648:	while (drawntreasure <= 2) {
   133620:  649:		if (state->deckCount[currentPlayer] <= 1) {//if the deck is empty we need to shuffle discard and add to deck
    13334:  650:			shuffle(currentPlayer, state);
        -:  651:		}
   133620:  652:		drawCard(currentPlayer, state);
   133620:  653:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
   133620:  654:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    30000:  655:			drawntreasure++;
        -:  656:		else {
   103620:  657:			temphand[temphandCounter] = cardDrawn;
   103620:  658:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   103620:  659:			temphandCounter++;
        -:  660:		}
        -:  661:	}
   123620:  662:	while (temphandCounter - 1 >= 0) {
   103620:  663:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[temphandCounter - 1]; // discard all cards in play that have been drawn
   103620:  664:		temphandCounter = temphandCounter - 1;
        -:  665:	}
    10000:  666:	return 0;
        -:  667:}
        -:  668:
    #####:  669:int smithyEffect(int currentPlayer, struct gameState *state, int handPos, int i) {
        -:  670:	
        -:  671:	//+3 Cards
    #####:  672:	for (i = 1; i < 3; i++)
        -:  673:	{
    #####:  674:		drawCard(currentPlayer, state);
        -:  675:	}
        -:  676:
        -:  677:	//discard card from hand
        -:  678:	//discardCard(handPos, currentPlayer, state, 0);
    #####:  679:	return 0;
        -:  680:}
        -:  681:
    20000:  682:int outpostEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  683:	
        -:  684:	//set outpost flag
    20000:  685:	state->outpostPlayed++;
        -:  686:
        -:  687:	//discard card
        -:  688:	//discardCard(handPos, currentPlayer, state, 0);
    20000:  689:	return 0;
        -:  690:}
        -:  691:
    10000:  692:int villageEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  693:	
        -:  694:	//+1 Card
    10000:  695:	drawCard(currentPlayer, state);
        -:  696:
        -:  697:	//+2 Actions
    10000:  698:	state->numActions = state->numActions + 3;
        -:  699:
        -:  700:	//discard played card from hand
    10000:  701:	discardCard(handPos, currentPlayer, state, 1);
    10000:  702:	return 0;
        -:  703:}
        -:  704:
    #####:  705:int embargoEffect(int currentPlayer, struct gameState *state, int handPos, int choice1) {
        -:  706:	//+2 Coins
    #####:  707:	state->coins = state->coins + 2;
        -:  708:
        -:  709:	//see if selected pile is in play
    #####:  710:	if (state->supplyCount[choice1] == -1)
        -:  711:	{
    #####:  712:		return -1;
        -:  713:	}
        -:  714:
        -:  715:	//add embargo token to selected supply pile
    #####:  716:	state->embargoTokens[choice1]++;
        -:  717:
        -:  718:	//trash card
    #####:  719:	discardCard(handPos, currentPlayer, state, 0);
    #####:  720:	return 0;
        -:  721:}
        -:  722:
        -:  723:
        -:  724:
    #####:  725:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  726:{
        -:  727:  int i;
        -:  728:  int j;
        -:  729:  int k;
        -:  730:  int x;
        -:  731:  int index;
    #####:  732:  int currentPlayer = whoseTurn(state);
    #####:  733:  int nextPlayer = currentPlayer + 1;
        -:  734:
    #####:  735:  int tributeRevealedCards[2] = {-1, -1};
        -:  736:  int temphand[MAX_HAND];// moved above the if statement
    #####:  737:  int drawntreasure=0;
        -:  738:  int cardDrawn;
    #####:  739:  int z = 0;// this is the counter for the temp hand
    #####:  740:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  741:    nextPlayer = 0;
        -:  742:  }
        -:  743:  
        -:  744:	
        -:  745:  //uses switch to select card and perform actions
    #####:  746:  switch( card ) 
        -:  747:    {
        -:  748:    case adventurer:
    #####:  749:		return adventurerEffect(drawntreasure, state, currentPlayer, cardDrawn, z, temphand);
        -:  750:			
        -:  751:    case council_room:
        -:  752:      //+4 Cards
    #####:  753:      for (i = 0; i < 4; i++)
        -:  754:	{
    #####:  755:	  drawCard(currentPlayer, state);
        -:  756:	}
        -:  757:			
        -:  758:      //+1 Buy
    #####:  759:      state->numBuys++;
        -:  760:			
        -:  761:      //Each other player draws a card
    #####:  762:      for (i = 0; i < state->numPlayers; i++)
        -:  763:	{
    #####:  764:	  if ( i != currentPlayer )
        -:  765:	    {
    #####:  766:	      drawCard(i, state);
        -:  767:	    }
        -:  768:	}
        -:  769:			
        -:  770:      //put played card in played card pile
    #####:  771:      discardCard(handPos, currentPlayer, state, 0);
        -:  772:			
    #####:  773:      return 0;
        -:  774:			
        -:  775:    case feast:
        -:  776:      //gain card with cost up to 5
        -:  777:      //Backup hand
    #####:  778:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  779:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  780:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  781:      }
        -:  782:      //Backup hand
        -:  783:
        -:  784:      //Update Coins for Buy
    #####:  785:      updateCoins(currentPlayer, state, 5);
    #####:  786:      x = 1;//Condition to loop on
    #####:  787:      while( x == 1) {//Buy one card
    #####:  788:	if (supplyCount(choice1, state) <= 0){
        -:  789:	  if (DEBUG)
        -:  790:	    printf("None of that card left, sorry!\n");
        -:  791:
        -:  792:	  if (DEBUG){
        -:  793:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  794:	  }
        -:  795:	}
    #####:  796:	else if (state->coins < getCost(choice1)){
    #####:  797:	  printf("That card is too expensive!\n");
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  801:	  }
        -:  802:	}
        -:  803:	else{
        -:  804:
        -:  805:	  if (DEBUG){
        -:  806:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  807:	  }
        -:  808:
    #####:  809:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  810:	  x = 0;//No more buying cards
        -:  811:
        -:  812:	  if (DEBUG){
        -:  813:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  814:	  }
        -:  815:
        -:  816:	}
        -:  817:      }     
        -:  818:
        -:  819:      //Reset Hand
    #####:  820:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  821:	state->hand[currentPlayer][i] = temphand[i];
    #####:  822:	temphand[i] = -1;
        -:  823:      }
        -:  824:      //Reset Hand
        -:  825:      			
    #####:  826:      return 0;
        -:  827:			
        -:  828:    case gardens:
    #####:  829:      return -1;
        -:  830:			
        -:  831:    case mine:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  835:	{
    #####:  836:	  return -1;
        -:  837:	}
        -:  838:		
    #####:  839:      if (choice2 > treasure_map || choice2 < curse)
        -:  840:	{
    #####:  841:	  return -1;
        -:  842:	}
        -:  843:
    #####:  844:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:
    #####:  849:      gainCard(choice2, state, 2, currentPlayer);
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  856:	{
    #####:  857:	  if (state->hand[currentPlayer][i] == j)
        -:  858:	    {
    #####:  859:	      discardCard(i, currentPlayer, state, 0);			
    #####:  860:	      break;
        -:  861:	    }
        -:  862:	}
        -:  863:			
    #####:  864:      return 0;
        -:  865:			
        -:  866:    case remodel:
    #####:  867:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  868:
    #####:  869:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  870:	{
    #####:  871:	  return -1;
        -:  872:	}
        -:  873:
    #####:  874:      gainCard(choice2, state, 0, currentPlayer);
        -:  875:
        -:  876:      //discard card from hand
    #####:  877:      discardCard(handPos, currentPlayer, state, 0);
        -:  878:
        -:  879:      //discard trashed card
    #####:  880:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  881:	{
    #####:  882:	  if (state->hand[currentPlayer][i] == j)
        -:  883:	    {
    #####:  884:	      discardCard(i, currentPlayer, state, 0);			
    #####:  885:	      break;
        -:  886:	    }
        -:  887:	}
        -:  888:
        -:  889:
    #####:  890:      return 0;
        -:  891:		
        -:  892:    case smithy:
        -:  893:
    #####:  894:		return smithyEffect(currentPlayer, state, handPos, i);
        -:  895:		
        -:  896:    case village:
        -:  897:
    #####:  898:		return villageEffect(currentPlayer, state, handPos);
        -:  899:		
        -:  900:    case baron:
    #####:  901:      state->numBuys++;//Increase buys by 1!
    #####:  902:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  903:	int p = 0;//Iterator for hand!
    #####:  904:	int card_not_discarded = 1;//Flag for discard set!
    #####:  905:	while(card_not_discarded){
    #####:  906:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  907:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  908:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  909:	    state->discardCount[currentPlayer]++;
    #####:  910:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  911:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  912:	    }
    #####:  913:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  914:	    state->handCount[currentPlayer]--;
    #####:  915:	    card_not_discarded = 0;//Exit the loop
        -:  916:	  }
    #####:  917:	  else if (p > state->handCount[currentPlayer]){
        -:  918:	    if(DEBUG) {
        -:  919:	      printf("No estate cards in your hand, invalid choice\n");
        -:  920:	      printf("Must gain an estate if there are any\n");
        -:  921:	    }
    #####:  922:	    if (supplyCount(estate, state) > 0){
    #####:  923:	      gainCard(estate, state, 0, currentPlayer);
    #####:  924:	      state->supplyCount[estate]--;//Decrement estates
    #####:  925:	      if (supplyCount(estate, state) == 0){
    #####:  926:		isGameOver(state);
        -:  927:	      }
        -:  928:	    }
    #####:  929:	    card_not_discarded = 0;//Exit the loop
        -:  930:	  }
        -:  931:			    
        -:  932:	  else{
    #####:  933:	    p++;//Next card
        -:  934:	  }
        -:  935:	}
        -:  936:      }
        -:  937:			    
        -:  938:      else{
    #####:  939:	if (supplyCount(estate, state) > 0){
    #####:  940:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  941:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  942:	  if (supplyCount(estate, state) == 0){
    #####:  943:	    isGameOver(state);
        -:  944:	  }
        -:  945:	}
        -:  946:      }
        -:  947:	    
        -:  948:      
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case great_hall:
        -:  952:      //+1 Card
    #####:  953:      drawCard(currentPlayer, state);
        -:  954:			
        -:  955:      //+1 Actions
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
    #####:  960:      return 0;
        -:  961:		
        -:  962:    case minion:
        -:  963:      //+1 action
    #####:  964:      state->numActions++;
        -:  965:			
        -:  966:      //discard card from hand
    #####:  967:      discardCard(handPos, currentPlayer, state, 0);
        -:  968:			
    #####:  969:      if (choice1)		//+2 coins
        -:  970:	{
    #####:  971:	  state->coins = state->coins + 2;
        -:  972:	}
        -:  973:			
    #####:  974:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  975:	{
        -:  976:	  //discard hand
    #####:  977:	  while(numHandCards(state) > 0)
        -:  978:	    {
    #####:  979:	      discardCard(handPos, currentPlayer, state, 0);
        -:  980:	    }
        -:  981:				
        -:  982:	  //draw 4
    #####:  983:	  for (i = 0; i < 4; i++)
        -:  984:	    {
    #####:  985:	      drawCard(currentPlayer, state);
        -:  986:	    }
        -:  987:				
        -:  988:	  //other players discard hand and redraw if hand size > 4
    #####:  989:	  for (i = 0; i < state->numPlayers; i++)
        -:  990:	    {
    #####:  991:	      if (i != currentPlayer)
        -:  992:		{
    #####:  993:		  if ( state->handCount[i] > 4 )
        -:  994:		    {
        -:  995:		      //discard hand
    #####:  996:		      while( state->handCount[i] > 0 )
        -:  997:			{
    #####:  998:			  discardCard(handPos, i, state, 0);
        -:  999:			}
        -: 1000:							
        -: 1001:		      //draw 4
    #####: 1002:		      for (j = 0; j < 4; j++)
        -: 1003:			{
    #####: 1004:			  drawCard(i, state);
        -: 1005:			}
        -: 1006:		    }
        -: 1007:		}
        -: 1008:	    }
        -: 1009:				
        -: 1010:	}
    #####: 1011:      return 0;
        -: 1012:		
        -: 1013:    case steward:
    #####: 1014:      if (choice1 == 1)
        -: 1015:	{
        -: 1016:	  //+2 cards
    #####: 1017:	  drawCard(currentPlayer, state);
    #####: 1018:	  drawCard(currentPlayer, state);
        -: 1019:	}
    #####: 1020:      else if (choice1 == 2)
        -: 1021:	{
        -: 1022:	  //+2 coins
    #####: 1023:	  state->coins = state->coins + 2;
        -: 1024:	}
        -: 1025:      else
        -: 1026:	{
        -: 1027:	  //trash 2 cards in hand
    #####: 1028:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1029:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1030:	}
        -: 1031:			
        -: 1032:      //discard card from hand
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1034:      return 0;
        -: 1035:		
        -: 1036:    case tribute:
    #####: 1037:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1038:	if (state->deckCount[nextPlayer] > 0){
    #####: 1039:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1040:	  state->deckCount[nextPlayer]--;
        -: 1041:	}
    #####: 1042:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1043:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1044:	  state->discardCount[nextPlayer]--;
        -: 1045:	}
        -: 1046:	else{
        -: 1047:	  //No Card to Reveal
        -: 1048:	  if (DEBUG){
        -: 1049:	    printf("No cards to reveal\n");
        -: 1050:	  }
        -: 1051:	}
        -: 1052:      }
        -: 1053:	    
        -: 1054:      else{
    #####: 1055:	if (state->deckCount[nextPlayer] == 0){
    #####: 1056:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1057:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1058:	    state->deckCount[nextPlayer]++;
    #####: 1059:	    state->discard[nextPlayer][i] = -1;
    #####: 1060:	    state->discardCount[nextPlayer]--;
        -: 1061:	  }
        -: 1062:			    
    #####: 1063:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1064:	} 
    #####: 1065:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1066:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1067:	state->deckCount[nextPlayer]--;
    #####: 1068:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1069:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1070:	state->deckCount[nextPlayer]--;
        -: 1071:      }    
        -: 1072:		       
    #####: 1073:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1074:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1075:	state->playedCardCount++;
    #####: 1076:	tributeRevealedCards[1] = -1;
        -: 1077:      }
        -: 1078:
    #####: 1079:      for (i = 0; i <= 2; i ++){
    #####: 1080:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1081:	  state->coins += 2;
        -: 1082:	}
        -: 1083:		    
    #####: 1084:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1085:	  drawCard(currentPlayer, state);
    #####: 1086:	  drawCard(currentPlayer, state);
        -: 1087:	}
        -: 1088:	else{//Action Card
    #####: 1089:	  state->numActions = state->numActions + 2;
        -: 1090:	}
        -: 1091:      }
        -: 1092:	    
    #####: 1093:      return 0;
        -: 1094:		
        -: 1095:    case ambassador:
    #####: 1096:      j = 0;		//used to check if player has enough cards to discard
        -: 1097:
    #####: 1098:      if (choice2 > 2 || choice2 < 0)
        -: 1099:	{
    #####: 1100:	  return -1;				
        -: 1101:	}
        -: 1102:
    #####: 1103:      if (choice1 == handPos)
        -: 1104:	{
    #####: 1105:	  return -1;
        -: 1106:	}
        -: 1107:
    #####: 1108:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1109:	{
    #####: 1110:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1111:	    {
    #####: 1112:	      j++;
        -: 1113:	    }
        -: 1114:	}
    #####: 1115:      if (j < choice2)
        -: 1116:	{
    #####: 1117:	  return -1;				
        -: 1118:	}
        -: 1119:
        -: 1120:      if (DEBUG) 
        -: 1121:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1122:
        -: 1123:      //increase supply count for choosen card by amount being discarded
    #####: 1124:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1125:			
        -: 1126:      //each other player gains a copy of revealed card
    #####: 1127:      for (i = 0; i < state->numPlayers; i++)
        -: 1128:	{
    #####: 1129:	  if (i != currentPlayer)
        -: 1130:	    {
    #####: 1131:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1132:	    }
        -: 1133:	}
        -: 1134:
        -: 1135:      //discard played card from hand
    #####: 1136:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1137:
        -: 1138:      //trash copies of cards returned to supply
    #####: 1139:      for (j = 0; j < choice2; j++)
        -: 1140:	{
    #####: 1141:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1142:	    {
    #####: 1143:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1144:		{
    #####: 1145:		  discardCard(i, currentPlayer, state, 1);
    #####: 1146:		  break;
        -: 1147:		}
        -: 1148:	    }
        -: 1149:	}			
        -: 1150:
    #####: 1151:      return 0;
        -: 1152:		
        -: 1153:    case cutpurse:
        -: 1154:
    #####: 1155:      updateCoins(currentPlayer, state, 2);
    #####: 1156:      for (i = 0; i < state->numPlayers; i++)
        -: 1157:	{
    #####: 1158:	  if (i != currentPlayer)
        -: 1159:	    {
    #####: 1160:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1161:		{
    #####: 1162:		  if (state->hand[i][j] == copper)
        -: 1163:		    {
    #####: 1164:		      discardCard(j, i, state, 0);
    #####: 1165:		      break;
        -: 1166:		    }
    #####: 1167:		  if (j == state->handCount[i])
        -: 1168:		    {
    #####: 1169:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1170:			{
        -: 1171:			  if (DEBUG)
        -: 1172:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1173:			}	
    #####: 1174:		      break;
        -: 1175:		    }		
        -: 1176:		}
        -: 1177:					
        -: 1178:	    }
        -: 1179:				
        -: 1180:	}				
        -: 1181:
        -: 1182:      //discard played card from hand
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1184:
    #####: 1185:      return 0;
        -: 1186:
        -: 1187:		
        -: 1188:    case embargo: 
    #####: 1189:		return embargoEffect(currentPlayer, state, handPos, choice1);
        -: 1190:		
        -: 1191:    case outpost:
    #####: 1192:		return outpostEffect(currentPlayer, state, handPos);
        -: 1193:		
        -: 1194:    case salvager:
        -: 1195:      //+1 buy
    #####: 1196:      state->numBuys++;
        -: 1197:			
    #####: 1198:      if (choice1)
        -: 1199:	{
        -: 1200:	  //gain coins equal to trashed card
    #####: 1201:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1202:	  //trash card
    #####: 1203:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1204:	}
        -: 1205:			
        -: 1206:      //discard card
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1208:      return 0;
        -: 1209:		
        -: 1210:    case sea_hag:
    #####: 1211:      for (i = 0; i < state->numPlayers; i++){
    #####: 1212:	if (i != currentPlayer){
    #####: 1213:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1214:	  state->discardCount[i]++;
    #####: 1215:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1216:	}
        -: 1217:      }
    #####: 1218:      return 0;
        -: 1219:		
        -: 1220:    case treasure_map:
        -: 1221:      //search hand for another treasure_map
    #####: 1222:      index = -1;
    #####: 1223:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1224:	{
    #####: 1225:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1226:	    {
    #####: 1227:	      index = i;
    #####: 1228:	      break;
        -: 1229:	    }
        -: 1230:	}
    #####: 1231:      if (index > -1)
        -: 1232:	{
        -: 1233:	  //trash both treasure cards
    #####: 1234:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1235:	  discardCard(index, currentPlayer, state, 1);
        -: 1236:
        -: 1237:	  //gain 4 Gold cards
    #####: 1238:	  for (i = 0; i < 4; i++)
        -: 1239:	    {
    #####: 1240:	      gainCard(gold, state, 1, currentPlayer);
        -: 1241:	    }
        -: 1242:				
        -: 1243:	  //return success
    #####: 1244:	  return 1;
        -: 1245:	}
        -: 1246:			
        -: 1247:      //no second treasure_map found in hand
    #####: 1248:      return -1;
        -: 1249:    }
        -: 1250:	
    #####: 1251:  return -1;
        -: 1252:}
        -: 1253:
    10000: 1254:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1255:{
        -: 1256:	
        -: 1257:  //if card is not trashed, added to Played pile 
    10000: 1258:  if (trashFlag < 1)
        -: 1259:    {
        -: 1260:      //add card to played pile
    #####: 1261:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1262:      state->playedCardCount++;
        -: 1263:    }
        -: 1264:	
        -: 1265:  //set played card to -1
    10000: 1266:  state->hand[currentPlayer][handPos] = -1;
        -: 1267:	
        -: 1268:  //remove card from player's hand
    10000: 1269:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1270:    {
        -: 1271:      //reduce number of cards in hand
    #####: 1272:      state->handCount[currentPlayer]--;
        -: 1273:    }
    10000: 1274:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
        -: 1278:    }
        -: 1279:  else 	
        -: 1280:    {
        -: 1281:      //replace discarded card with last card in hand
    10000: 1282:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1283:      //set last card to -1
    10000: 1284:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1285:      //reduce number of cards in hand
    10000: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
        -: 1288:	
    10000: 1289:  return 0;
        -: 1290:}
        -: 1291:
    #####: 1292:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1293:{
        -: 1294:  //Note: supplyPos is enum of choosen card
        -: 1295:	
        -: 1296:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1297:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1298:    {
    #####: 1299:      return -1;
        -: 1300:    }
        -: 1301:	
        -: 1302:  //added card for [whoseTurn] current player:
        -: 1303:  // toFlag = 0 : add to discard
        -: 1304:  // toFlag = 1 : add to deck
        -: 1305:  // toFlag = 2 : add to hand
        -: 1306:
    #####: 1307:  if (toFlag == 1)
        -: 1308:    {
    #####: 1309:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1310:      state->deckCount[player]++;
        -: 1311:    }
    #####: 1312:  else if (toFlag == 2)
        -: 1313:    {
    #####: 1314:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1315:      state->handCount[player]++;
        -: 1316:    }
        -: 1317:  else
        -: 1318:    {
    #####: 1319:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1320:      state->discardCount[player]++;
        -: 1321:    }
        -: 1322:	
        -: 1323:  //decrease number in supply pile
    #####: 1324:  state->supplyCount[supplyPos]--;
        -: 1325:	 
    #####: 1326:  return 0;
        -: 1327:}
        -: 1328:
       59: 1329:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1330:{
        -: 1331:  int i;
        -: 1332:	
        -: 1333:  //reset coin count
       59: 1334:  state->coins = 0;
        -: 1335:
        -: 1336:  //add coins for each Treasure card in player's hand
      344: 1337:  for (i = 0; i < state->handCount[player]; i++)
        -: 1338:    {
      285: 1339:      if (state->hand[player][i] == copper)
        -: 1340:	{
      201: 1341:	  state->coins += 1;
        -: 1342:	}
       84: 1343:      else if (state->hand[player][i] == silver)
        -: 1344:	{
        9: 1345:	  state->coins += 2;
        -: 1346:	}
       75: 1347:      else if (state->hand[player][i] == gold)
        -: 1348:	{
        8: 1349:	  state->coins += 3;
        -: 1350:	}	
        -: 1351:    }	
        -: 1352:
        -: 1353:  //add bonus
       59: 1354:  state->coins += bonus;
        -: 1355:
       59: 1356:  return 0;
        -: 1357:}
        -: 1358:
        -: 1359:
        -: 1360://end of dominion.c
        -: 1361:

TESTING HANDCARD() FUNCTION

TEST 1: FIRST CARD IN HAND 
----TEST PASSED----  THE CORRECT CARD WAS RETURNED

TEST 2: THE LAST CARD IN HAND 
----TEST PASSED----  THE CORRECT CARD WAS RETURNED

TEST 3: ENSURE THE CARD IS STILL IN HAND AFTER RETURNING
----TEST PASSED----  THE CORRECT CARD WAS RETURNED AND THE PLAYER STILL HAS THE CARD IN THEIR HAND

TEST 4: ENSURE THE FUNCTION WORKS FOR PLAYER 2
----TEST PASSED----  THE CORRECT CARD WAS RETURNED AND THE PLAYER STILL HAS THE CARD IN THEIR HAND
ALL TESTS PASSED
File 'dominion.c'
Lines executed:28.78% of 556
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
  9730596:    8:int compare(const void* a, const void* b) {
  9730596:    9:  if (*(int*)a > *(int*)b)
  4863001:   10:    return 1;
  4867595:   11:  if (*(int*)a < *(int*)b)
  1719930:   12:    return -1;
  3147665:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    40021:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    40021:   44:  SelectStream(1);
    40021:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    40021:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    40021:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    95048:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   930293:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   875266:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    39968:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       53:   73:  if (numPlayers == 2)
        -:   74:    {
       27:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       26:   77:  else if (numPlayers == 3)
        -:   78:    {
       10:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       16:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       53:   87:  if (numPlayers == 2)
        -:   88:    {
       27:   89:      state->supplyCount[estate] = 8;
       27:   90:      state->supplyCount[duchy] = 8;
       27:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       26:   95:      state->supplyCount[estate] = 12;
       26:   96:      state->supplyCount[duchy] = 12;
       26:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       53:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       53:  102:  state->supplyCount[silver] = 40;
       53:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1113:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     8766:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     8215:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      509:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      170:  115:		  if (numPlayers == 2){ 
       33:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       52:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      424:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      509:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     7706:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      201:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      148:  140:      state->deckCount[i] = 0;
      592:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      444:  143:	  state->deck[i][j] = estate;
      444:  144:	  state->deckCount[i]++;
        -:  145:	}
     1184:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     1036:  148:	  state->deck[i][j] = copper;
     1036:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      201:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      148:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      201:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      148:  166:      state->handCount[i] = 0;
      148:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1484:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     1431:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       53:  182:  state->outpostPlayed = 0;
       53:  183:  state->phase = 0;
       53:  184:  state->numActions = 1;
       53:  185:  state->numBuys = 1;
       53:  186:  state->playedCardCount = 0;
       53:  187:  state->whoseTurn = 0;
       53:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      318:  192:  for (it = 0; it < 5; it++){
      265:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       53:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       53:  198:  return 0;
        -:  199:}
        -:  200:
    20155:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    20155:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    20155:  209:  if (state->deckCount[player] < 1)
     6671:  210:    return -1;
    13484:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  1493023:  214:  while (state->deckCount[player] > 0) {
  1466055:  215:    card = floor(Random() * state->deckCount[player]);
  1466055:  216:    newDeck[newDeckPos] = state->deck[player][card];
  1466055:  217:    newDeckPos++;
102730729:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
101264674:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  1466055:  221:    state->deckCount[player]--;
        -:  222:  }
  1479539:  223:  for (i = 0; i < newDeckPos; i++) {
  1466055:  224:    state->deck[player][i] = newDeck[i];
  1466055:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    13484:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        4:  315:int handCard(int handPos, struct gameState *state) {
        4:  316:  int currentPlayer = whoseTurn(state);
        4:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        4:  346:int whoseTurn(struct gameState *state) {
        4:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        7:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        7:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        3:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
   143885:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   143885:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
  1464585:  533:    for (i = 0; i < state->discardCount[player];i++){
  1457912:  534:      state->deck[player][i] = state->discard[player][i];
  1457912:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     6673:  538:    state->deckCount[player] = state->discardCount[player];
     6673:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     6673:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     6673:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     6673:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     6673:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     6673:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
     6673:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     6673:  563:    state->deckCount[player]--;
     6673:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   137212:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   137212:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   137212:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   137212:  576:    state->deckCount[player]--;
   137212:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   143885:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    10000:  646:int adventurerEffect(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphandCounter, int temphand []) {
        -:  647:	
   153620:  648:	while (drawntreasure <= 2) {
   133620:  649:		if (state->deckCount[currentPlayer] <= 1) {//if the deck is empty we need to shuffle discard and add to deck
    13334:  650:			shuffle(currentPlayer, state);
        -:  651:		}
   133620:  652:		drawCard(currentPlayer, state);
   133620:  653:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
   133620:  654:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    30000:  655:			drawntreasure++;
        -:  656:		else {
   103620:  657:			temphand[temphandCounter] = cardDrawn;
   103620:  658:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   103620:  659:			temphandCounter++;
        -:  660:		}
        -:  661:	}
   123620:  662:	while (temphandCounter - 1 >= 0) {
   103620:  663:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[temphandCounter - 1]; // discard all cards in play that have been drawn
   103620:  664:		temphandCounter = temphandCounter - 1;
        -:  665:	}
    10000:  666:	return 0;
        -:  667:}
        -:  668:
    #####:  669:int smithyEffect(int currentPlayer, struct gameState *state, int handPos, int i) {
        -:  670:	
        -:  671:	//+3 Cards
    #####:  672:	for (i = 1; i < 3; i++)
        -:  673:	{
    #####:  674:		drawCard(currentPlayer, state);
        -:  675:	}
        -:  676:
        -:  677:	//discard card from hand
        -:  678:	//discardCard(handPos, currentPlayer, state, 0);
    #####:  679:	return 0;
        -:  680:}
        -:  681:
    20000:  682:int outpostEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  683:	
        -:  684:	//set outpost flag
    20000:  685:	state->outpostPlayed++;
        -:  686:
        -:  687:	//discard card
        -:  688:	//discardCard(handPos, currentPlayer, state, 0);
    20000:  689:	return 0;
        -:  690:}
        -:  691:
    10000:  692:int villageEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  693:	
        -:  694:	//+1 Card
    10000:  695:	drawCard(currentPlayer, state);
        -:  696:
        -:  697:	//+2 Actions
    10000:  698:	state->numActions = state->numActions + 3;
        -:  699:
        -:  700:	//discard played card from hand
    10000:  701:	discardCard(handPos, currentPlayer, state, 1);
    10000:  702:	return 0;
        -:  703:}
        -:  704:
    #####:  705:int embargoEffect(int currentPlayer, struct gameState *state, int handPos, int choice1) {
        -:  706:	//+2 Coins
    #####:  707:	state->coins = state->coins + 2;
        -:  708:
        -:  709:	//see if selected pile is in play
    #####:  710:	if (state->supplyCount[choice1] == -1)
        -:  711:	{
    #####:  712:		return -1;
        -:  713:	}
        -:  714:
        -:  715:	//add embargo token to selected supply pile
    #####:  716:	state->embargoTokens[choice1]++;
        -:  717:
        -:  718:	//trash card
    #####:  719:	discardCard(handPos, currentPlayer, state, 0);
    #####:  720:	return 0;
        -:  721:}
        -:  722:
        -:  723:
        -:  724:
    #####:  725:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  726:{
        -:  727:  int i;
        -:  728:  int j;
        -:  729:  int k;
        -:  730:  int x;
        -:  731:  int index;
    #####:  732:  int currentPlayer = whoseTurn(state);
    #####:  733:  int nextPlayer = currentPlayer + 1;
        -:  734:
    #####:  735:  int tributeRevealedCards[2] = {-1, -1};
        -:  736:  int temphand[MAX_HAND];// moved above the if statement
    #####:  737:  int drawntreasure=0;
        -:  738:  int cardDrawn;
    #####:  739:  int z = 0;// this is the counter for the temp hand
    #####:  740:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  741:    nextPlayer = 0;
        -:  742:  }
        -:  743:  
        -:  744:	
        -:  745:  //uses switch to select card and perform actions
    #####:  746:  switch( card ) 
        -:  747:    {
        -:  748:    case adventurer:
    #####:  749:		return adventurerEffect(drawntreasure, state, currentPlayer, cardDrawn, z, temphand);
        -:  750:			
        -:  751:    case council_room:
        -:  752:      //+4 Cards
    #####:  753:      for (i = 0; i < 4; i++)
        -:  754:	{
    #####:  755:	  drawCard(currentPlayer, state);
        -:  756:	}
        -:  757:			
        -:  758:      //+1 Buy
    #####:  759:      state->numBuys++;
        -:  760:			
        -:  761:      //Each other player draws a card
    #####:  762:      for (i = 0; i < state->numPlayers; i++)
        -:  763:	{
    #####:  764:	  if ( i != currentPlayer )
        -:  765:	    {
    #####:  766:	      drawCard(i, state);
        -:  767:	    }
        -:  768:	}
        -:  769:			
        -:  770:      //put played card in played card pile
    #####:  771:      discardCard(handPos, currentPlayer, state, 0);
        -:  772:			
    #####:  773:      return 0;
        -:  774:			
        -:  775:    case feast:
        -:  776:      //gain card with cost up to 5
        -:  777:      //Backup hand
    #####:  778:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  779:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  780:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  781:      }
        -:  782:      //Backup hand
        -:  783:
        -:  784:      //Update Coins for Buy
    #####:  785:      updateCoins(currentPlayer, state, 5);
    #####:  786:      x = 1;//Condition to loop on
    #####:  787:      while( x == 1) {//Buy one card
    #####:  788:	if (supplyCount(choice1, state) <= 0){
        -:  789:	  if (DEBUG)
        -:  790:	    printf("None of that card left, sorry!\n");
        -:  791:
        -:  792:	  if (DEBUG){
        -:  793:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  794:	  }
        -:  795:	}
    #####:  796:	else if (state->coins < getCost(choice1)){
    #####:  797:	  printf("That card is too expensive!\n");
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  801:	  }
        -:  802:	}
        -:  803:	else{
        -:  804:
        -:  805:	  if (DEBUG){
        -:  806:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  807:	  }
        -:  808:
    #####:  809:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  810:	  x = 0;//No more buying cards
        -:  811:
        -:  812:	  if (DEBUG){
        -:  813:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  814:	  }
        -:  815:
        -:  816:	}
        -:  817:      }     
        -:  818:
        -:  819:      //Reset Hand
    #####:  820:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  821:	state->hand[currentPlayer][i] = temphand[i];
    #####:  822:	temphand[i] = -1;
        -:  823:      }
        -:  824:      //Reset Hand
        -:  825:      			
    #####:  826:      return 0;
        -:  827:			
        -:  828:    case gardens:
    #####:  829:      return -1;
        -:  830:			
        -:  831:    case mine:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  835:	{
    #####:  836:	  return -1;
        -:  837:	}
        -:  838:		
    #####:  839:      if (choice2 > treasure_map || choice2 < curse)
        -:  840:	{
    #####:  841:	  return -1;
        -:  842:	}
        -:  843:
    #####:  844:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:
    #####:  849:      gainCard(choice2, state, 2, currentPlayer);
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  856:	{
    #####:  857:	  if (state->hand[currentPlayer][i] == j)
        -:  858:	    {
    #####:  859:	      discardCard(i, currentPlayer, state, 0);			
    #####:  860:	      break;
        -:  861:	    }
        -:  862:	}
        -:  863:			
    #####:  864:      return 0;
        -:  865:			
        -:  866:    case remodel:
    #####:  867:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  868:
    #####:  869:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  870:	{
    #####:  871:	  return -1;
        -:  872:	}
        -:  873:
    #####:  874:      gainCard(choice2, state, 0, currentPlayer);
        -:  875:
        -:  876:      //discard card from hand
    #####:  877:      discardCard(handPos, currentPlayer, state, 0);
        -:  878:
        -:  879:      //discard trashed card
    #####:  880:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  881:	{
    #####:  882:	  if (state->hand[currentPlayer][i] == j)
        -:  883:	    {
    #####:  884:	      discardCard(i, currentPlayer, state, 0);			
    #####:  885:	      break;
        -:  886:	    }
        -:  887:	}
        -:  888:
        -:  889:
    #####:  890:      return 0;
        -:  891:		
        -:  892:    case smithy:
        -:  893:
    #####:  894:		return smithyEffect(currentPlayer, state, handPos, i);
        -:  895:		
        -:  896:    case village:
        -:  897:
    #####:  898:		return villageEffect(currentPlayer, state, handPos);
        -:  899:		
        -:  900:    case baron:
    #####:  901:      state->numBuys++;//Increase buys by 1!
    #####:  902:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  903:	int p = 0;//Iterator for hand!
    #####:  904:	int card_not_discarded = 1;//Flag for discard set!
    #####:  905:	while(card_not_discarded){
    #####:  906:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  907:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  908:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  909:	    state->discardCount[currentPlayer]++;
    #####:  910:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  911:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  912:	    }
    #####:  913:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  914:	    state->handCount[currentPlayer]--;
    #####:  915:	    card_not_discarded = 0;//Exit the loop
        -:  916:	  }
    #####:  917:	  else if (p > state->handCount[currentPlayer]){
        -:  918:	    if(DEBUG) {
        -:  919:	      printf("No estate cards in your hand, invalid choice\n");
        -:  920:	      printf("Must gain an estate if there are any\n");
        -:  921:	    }
    #####:  922:	    if (supplyCount(estate, state) > 0){
    #####:  923:	      gainCard(estate, state, 0, currentPlayer);
    #####:  924:	      state->supplyCount[estate]--;//Decrement estates
    #####:  925:	      if (supplyCount(estate, state) == 0){
    #####:  926:		isGameOver(state);
        -:  927:	      }
        -:  928:	    }
    #####:  929:	    card_not_discarded = 0;//Exit the loop
        -:  930:	  }
        -:  931:			    
        -:  932:	  else{
    #####:  933:	    p++;//Next card
        -:  934:	  }
        -:  935:	}
        -:  936:      }
        -:  937:			    
        -:  938:      else{
    #####:  939:	if (supplyCount(estate, state) > 0){
    #####:  940:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  941:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  942:	  if (supplyCount(estate, state) == 0){
    #####:  943:	    isGameOver(state);
        -:  944:	  }
        -:  945:	}
        -:  946:      }
        -:  947:	    
        -:  948:      
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case great_hall:
        -:  952:      //+1 Card
    #####:  953:      drawCard(currentPlayer, state);
        -:  954:			
        -:  955:      //+1 Actions
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
    #####:  960:      return 0;
        -:  961:		
        -:  962:    case minion:
        -:  963:      //+1 action
    #####:  964:      state->numActions++;
        -:  965:			
        -:  966:      //discard card from hand
    #####:  967:      discardCard(handPos, currentPlayer, state, 0);
        -:  968:			
    #####:  969:      if (choice1)		//+2 coins
        -:  970:	{
    #####:  971:	  state->coins = state->coins + 2;
        -:  972:	}
        -:  973:			
    #####:  974:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  975:	{
        -:  976:	  //discard hand
    #####:  977:	  while(numHandCards(state) > 0)
        -:  978:	    {
    #####:  979:	      discardCard(handPos, currentPlayer, state, 0);
        -:  980:	    }
        -:  981:				
        -:  982:	  //draw 4
    #####:  983:	  for (i = 0; i < 4; i++)
        -:  984:	    {
    #####:  985:	      drawCard(currentPlayer, state);
        -:  986:	    }
        -:  987:				
        -:  988:	  //other players discard hand and redraw if hand size > 4
    #####:  989:	  for (i = 0; i < state->numPlayers; i++)
        -:  990:	    {
    #####:  991:	      if (i != currentPlayer)
        -:  992:		{
    #####:  993:		  if ( state->handCount[i] > 4 )
        -:  994:		    {
        -:  995:		      //discard hand
    #####:  996:		      while( state->handCount[i] > 0 )
        -:  997:			{
    #####:  998:			  discardCard(handPos, i, state, 0);
        -:  999:			}
        -: 1000:							
        -: 1001:		      //draw 4
    #####: 1002:		      for (j = 0; j < 4; j++)
        -: 1003:			{
    #####: 1004:			  drawCard(i, state);
        -: 1005:			}
        -: 1006:		    }
        -: 1007:		}
        -: 1008:	    }
        -: 1009:				
        -: 1010:	}
    #####: 1011:      return 0;
        -: 1012:		
        -: 1013:    case steward:
    #####: 1014:      if (choice1 == 1)
        -: 1015:	{
        -: 1016:	  //+2 cards
    #####: 1017:	  drawCard(currentPlayer, state);
    #####: 1018:	  drawCard(currentPlayer, state);
        -: 1019:	}
    #####: 1020:      else if (choice1 == 2)
        -: 1021:	{
        -: 1022:	  //+2 coins
    #####: 1023:	  state->coins = state->coins + 2;
        -: 1024:	}
        -: 1025:      else
        -: 1026:	{
        -: 1027:	  //trash 2 cards in hand
    #####: 1028:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1029:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1030:	}
        -: 1031:			
        -: 1032:      //discard card from hand
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1034:      return 0;
        -: 1035:		
        -: 1036:    case tribute:
    #####: 1037:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1038:	if (state->deckCount[nextPlayer] > 0){
    #####: 1039:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1040:	  state->deckCount[nextPlayer]--;
        -: 1041:	}
    #####: 1042:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1043:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1044:	  state->discardCount[nextPlayer]--;
        -: 1045:	}
        -: 1046:	else{
        -: 1047:	  //No Card to Reveal
        -: 1048:	  if (DEBUG){
        -: 1049:	    printf("No cards to reveal\n");
        -: 1050:	  }
        -: 1051:	}
        -: 1052:      }
        -: 1053:	    
        -: 1054:      else{
    #####: 1055:	if (state->deckCount[nextPlayer] == 0){
    #####: 1056:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1057:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1058:	    state->deckCount[nextPlayer]++;
    #####: 1059:	    state->discard[nextPlayer][i] = -1;
    #####: 1060:	    state->discardCount[nextPlayer]--;
        -: 1061:	  }
        -: 1062:			    
    #####: 1063:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1064:	} 
    #####: 1065:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1066:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1067:	state->deckCount[nextPlayer]--;
    #####: 1068:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1069:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1070:	state->deckCount[nextPlayer]--;
        -: 1071:      }    
        -: 1072:		       
    #####: 1073:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1074:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1075:	state->playedCardCount++;
    #####: 1076:	tributeRevealedCards[1] = -1;
        -: 1077:      }
        -: 1078:
    #####: 1079:      for (i = 0; i <= 2; i ++){
    #####: 1080:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1081:	  state->coins += 2;
        -: 1082:	}
        -: 1083:		    
    #####: 1084:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1085:	  drawCard(currentPlayer, state);
    #####: 1086:	  drawCard(currentPlayer, state);
        -: 1087:	}
        -: 1088:	else{//Action Card
    #####: 1089:	  state->numActions = state->numActions + 2;
        -: 1090:	}
        -: 1091:      }
        -: 1092:	    
    #####: 1093:      return 0;
        -: 1094:		
        -: 1095:    case ambassador:
    #####: 1096:      j = 0;		//used to check if player has enough cards to discard
        -: 1097:
    #####: 1098:      if (choice2 > 2 || choice2 < 0)
        -: 1099:	{
    #####: 1100:	  return -1;				
        -: 1101:	}
        -: 1102:
    #####: 1103:      if (choice1 == handPos)
        -: 1104:	{
    #####: 1105:	  return -1;
        -: 1106:	}
        -: 1107:
    #####: 1108:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1109:	{
    #####: 1110:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1111:	    {
    #####: 1112:	      j++;
        -: 1113:	    }
        -: 1114:	}
    #####: 1115:      if (j < choice2)
        -: 1116:	{
    #####: 1117:	  return -1;				
        -: 1118:	}
        -: 1119:
        -: 1120:      if (DEBUG) 
        -: 1121:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1122:
        -: 1123:      //increase supply count for choosen card by amount being discarded
    #####: 1124:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1125:			
        -: 1126:      //each other player gains a copy of revealed card
    #####: 1127:      for (i = 0; i < state->numPlayers; i++)
        -: 1128:	{
    #####: 1129:	  if (i != currentPlayer)
        -: 1130:	    {
    #####: 1131:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1132:	    }
        -: 1133:	}
        -: 1134:
        -: 1135:      //discard played card from hand
    #####: 1136:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1137:
        -: 1138:      //trash copies of cards returned to supply
    #####: 1139:      for (j = 0; j < choice2; j++)
        -: 1140:	{
    #####: 1141:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1142:	    {
    #####: 1143:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1144:		{
    #####: 1145:		  discardCard(i, currentPlayer, state, 1);
    #####: 1146:		  break;
        -: 1147:		}
        -: 1148:	    }
        -: 1149:	}			
        -: 1150:
    #####: 1151:      return 0;
        -: 1152:		
        -: 1153:    case cutpurse:
        -: 1154:
    #####: 1155:      updateCoins(currentPlayer, state, 2);
    #####: 1156:      for (i = 0; i < state->numPlayers; i++)
        -: 1157:	{
    #####: 1158:	  if (i != currentPlayer)
        -: 1159:	    {
    #####: 1160:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1161:		{
    #####: 1162:		  if (state->hand[i][j] == copper)
        -: 1163:		    {
    #####: 1164:		      discardCard(j, i, state, 0);
    #####: 1165:		      break;
        -: 1166:		    }
    #####: 1167:		  if (j == state->handCount[i])
        -: 1168:		    {
    #####: 1169:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1170:			{
        -: 1171:			  if (DEBUG)
        -: 1172:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1173:			}	
    #####: 1174:		      break;
        -: 1175:		    }		
        -: 1176:		}
        -: 1177:					
        -: 1178:	    }
        -: 1179:				
        -: 1180:	}				
        -: 1181:
        -: 1182:      //discard played card from hand
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1184:
    #####: 1185:      return 0;
        -: 1186:
        -: 1187:		
        -: 1188:    case embargo: 
    #####: 1189:		return embargoEffect(currentPlayer, state, handPos, choice1);
        -: 1190:		
        -: 1191:    case outpost:
    #####: 1192:		return outpostEffect(currentPlayer, state, handPos);
        -: 1193:		
        -: 1194:    case salvager:
        -: 1195:      //+1 buy
    #####: 1196:      state->numBuys++;
        -: 1197:			
    #####: 1198:      if (choice1)
        -: 1199:	{
        -: 1200:	  //gain coins equal to trashed card
    #####: 1201:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1202:	  //trash card
    #####: 1203:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1204:	}
        -: 1205:			
        -: 1206:      //discard card
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1208:      return 0;
        -: 1209:		
        -: 1210:    case sea_hag:
    #####: 1211:      for (i = 0; i < state->numPlayers; i++){
    #####: 1212:	if (i != currentPlayer){
    #####: 1213:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1214:	  state->discardCount[i]++;
    #####: 1215:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1216:	}
        -: 1217:      }
    #####: 1218:      return 0;
        -: 1219:		
        -: 1220:    case treasure_map:
        -: 1221:      //search hand for another treasure_map
    #####: 1222:      index = -1;
    #####: 1223:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1224:	{
    #####: 1225:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1226:	    {
    #####: 1227:	      index = i;
    #####: 1228:	      break;
        -: 1229:	    }
        -: 1230:	}
    #####: 1231:      if (index > -1)
        -: 1232:	{
        -: 1233:	  //trash both treasure cards
    #####: 1234:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1235:	  discardCard(index, currentPlayer, state, 1);
        -: 1236:
        -: 1237:	  //gain 4 Gold cards
    #####: 1238:	  for (i = 0; i < 4; i++)
        -: 1239:	    {
    #####: 1240:	      gainCard(gold, state, 1, currentPlayer);
        -: 1241:	    }
        -: 1242:				
        -: 1243:	  //return success
    #####: 1244:	  return 1;
        -: 1245:	}
        -: 1246:			
        -: 1247:      //no second treasure_map found in hand
    #####: 1248:      return -1;
        -: 1249:    }
        -: 1250:	
    #####: 1251:  return -1;
        -: 1252:}
        -: 1253:
    10000: 1254:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1255:{
        -: 1256:	
        -: 1257:  //if card is not trashed, added to Played pile 
    10000: 1258:  if (trashFlag < 1)
        -: 1259:    {
        -: 1260:      //add card to played pile
    #####: 1261:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1262:      state->playedCardCount++;
        -: 1263:    }
        -: 1264:	
        -: 1265:  //set played card to -1
    10000: 1266:  state->hand[currentPlayer][handPos] = -1;
        -: 1267:	
        -: 1268:  //remove card from player's hand
    10000: 1269:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1270:    {
        -: 1271:      //reduce number of cards in hand
    #####: 1272:      state->handCount[currentPlayer]--;
        -: 1273:    }
    10000: 1274:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
        -: 1278:    }
        -: 1279:  else 	
        -: 1280:    {
        -: 1281:      //replace discarded card with last card in hand
    10000: 1282:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1283:      //set last card to -1
    10000: 1284:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1285:      //reduce number of cards in hand
    10000: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
        -: 1288:	
    10000: 1289:  return 0;
        -: 1290:}
        -: 1291:
    #####: 1292:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1293:{
        -: 1294:  //Note: supplyPos is enum of choosen card
        -: 1295:	
        -: 1296:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1297:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1298:    {
    #####: 1299:      return -1;
        -: 1300:    }
        -: 1301:	
        -: 1302:  //added card for [whoseTurn] current player:
        -: 1303:  // toFlag = 0 : add to discard
        -: 1304:  // toFlag = 1 : add to deck
        -: 1305:  // toFlag = 2 : add to hand
        -: 1306:
    #####: 1307:  if (toFlag == 1)
        -: 1308:    {
    #####: 1309:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1310:      state->deckCount[player]++;
        -: 1311:    }
    #####: 1312:  else if (toFlag == 2)
        -: 1313:    {
    #####: 1314:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1315:      state->handCount[player]++;
        -: 1316:    }
        -: 1317:  else
        -: 1318:    {
    #####: 1319:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1320:      state->discardCount[player]++;
        -: 1321:    }
        -: 1322:	
        -: 1323:  //decrease number in supply pile
    #####: 1324:  state->supplyCount[supplyPos]--;
        -: 1325:	 
    #####: 1326:  return 0;
        -: 1327:}
        -: 1328:
       63: 1329:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1330:{
        -: 1331:  int i;
        -: 1332:	
        -: 1333:  //reset coin count
       63: 1334:  state->coins = 0;
        -: 1335:
        -: 1336:  //add coins for each Treasure card in player's hand
      368: 1337:  for (i = 0; i < state->handCount[player]; i++)
        -: 1338:    {
      305: 1339:      if (state->hand[player][i] == copper)
        -: 1340:	{
      217: 1341:	  state->coins += 1;
        -: 1342:	}
       88: 1343:      else if (state->hand[player][i] == silver)
        -: 1344:	{
        9: 1345:	  state->coins += 2;
        -: 1346:	}
       79: 1347:      else if (state->hand[player][i] == gold)
        -: 1348:	{
        8: 1349:	  state->coins += 3;
        -: 1350:	}	
        -: 1351:    }	
        -: 1352:
        -: 1353:  //add bonus
       63: 1354:  state->coins += bonus;
        -: 1355:
       63: 1356:  return 0;
        -: 1357:}
        -: 1358:
        -: 1359:
        -: 1360://end of dominion.c
        -: 1361:


TESTING FULLDECKCOUNT() FUNCTION

TEST 1: ALL CARDS IN DISCARD, DECK, AND HAND ARE THE CARD WE ARE LOOKING FOR
----TEST PASSED----  THE CARDS WERE PROPERLY COUNTED

TEST 2: NO CARDS IN DISCARD, DECK, AND HAND ARE THE CARD WE ARE LOOKING FOR
----TEST PASSED----  THE CARDS WERE PROPERLY COUNTED

TEST 3: PLAYER HAS NO CARDS IN HAND, DECK, OR DISCARD
----TEST PASSED----  THE CARDS WERE PROPERLY COUNTED

TEST 4: MIX OF CARD IN HAND/DECK/DISCARD
----TEST PASSED----  THE CARDS WERE PROPERLY COUNTED

TEST 5: CHECK TO MAKE SURE THE FUNCTION DOES NOT CHANGE THE CARDS
----TEST PASSED----  THE CARDS WERE PROPERLY COUNTED
ALL TESTS PASSED
File 'dominion.c'
Lines executed:30.40% of 556
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
  9730746:    8:int compare(const void* a, const void* b) {
  9730746:    9:  if (*(int*)a > *(int*)b)
  4863001:   10:    return 1;
  4867745:   11:  if (*(int*)a < *(int*)b)
  1719970:   12:    return -1;
  3147775:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    40026:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    40026:   44:  SelectStream(1);
    40026:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    40026:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    40026:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    95103:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   930843:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   875766:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    39968:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       58:   73:  if (numPlayers == 2)
        -:   74:    {
       32:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       26:   77:  else if (numPlayers == 3)
        -:   78:    {
       10:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       16:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       58:   87:  if (numPlayers == 2)
        -:   88:    {
       32:   89:      state->supplyCount[estate] = 8;
       32:   90:      state->supplyCount[duchy] = 8;
       32:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       26:   95:      state->supplyCount[estate] = 12;
       26:   96:      state->supplyCount[duchy] = 12;
       26:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       58:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       58:  102:  state->supplyCount[silver] = 40;
       58:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1218:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     9596:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     8990:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      554:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      180:  115:		  if (numPlayers == 2){ 
       38:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       52:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      464:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      554:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     8436:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      216:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      158:  140:      state->deckCount[i] = 0;
      632:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      474:  143:	  state->deck[i][j] = estate;
      474:  144:	  state->deckCount[i]++;
        -:  145:	}
     1264:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     1106:  148:	  state->deck[i][j] = copper;
     1106:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      216:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      158:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      216:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      158:  166:      state->handCount[i] = 0;
      158:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1624:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     1566:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       58:  182:  state->outpostPlayed = 0;
       58:  183:  state->phase = 0;
       58:  184:  state->numActions = 1;
       58:  185:  state->numBuys = 1;
       58:  186:  state->playedCardCount = 0;
       58:  187:  state->whoseTurn = 0;
       58:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      348:  192:  for (it = 0; it < 5; it++){
      290:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       58:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       58:  198:  return 0;
        -:  199:}
        -:  200:
    20165:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    20165:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    20165:  209:  if (state->deckCount[player] < 1)
     6671:  210:    return -1;
    13494:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  1493143:  214:  while (state->deckCount[player] > 0) {
  1466155:  215:    card = floor(Random() * state->deckCount[player]);
  1466155:  216:    newDeck[newDeckPos] = state->deck[player][card];
  1466155:  217:    newDeckPos++;
102731079:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
101264924:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  1466155:  221:    state->deckCount[player]--;
        -:  222:  }
  1479649:  223:  for (i = 0; i < newDeckPos; i++) {
  1466155:  224:    state->deck[player][i] = newDeck[i];
  1466155:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    13494:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        4:  315:int handCard(int handPos, struct gameState *state) {
        4:  316:  int currentPlayer = whoseTurn(state);
        4:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        5:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        5:  326:  int count = 0;
        -:  327:
       22:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
       17:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
       22:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
       17:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
       22:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
       17:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
        5:  343:  return count;
        -:  344:}
        -:  345:
        4:  346:int whoseTurn(struct gameState *state) {
        4:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        7:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        7:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        3:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
   143910:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   143910:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
  1464585:  533:    for (i = 0; i < state->discardCount[player];i++){
  1457912:  534:      state->deck[player][i] = state->discard[player][i];
  1457912:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     6673:  538:    state->deckCount[player] = state->discardCount[player];
     6673:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     6673:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     6673:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     6673:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     6673:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     6673:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
     6673:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     6673:  563:    state->deckCount[player]--;
     6673:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   137237:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   137237:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   137237:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   137237:  576:    state->deckCount[player]--;
   137237:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   143910:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    10000:  646:int adventurerEffect(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphandCounter, int temphand []) {
        -:  647:	
   153620:  648:	while (drawntreasure <= 2) {
   133620:  649:		if (state->deckCount[currentPlayer] <= 1) {//if the deck is empty we need to shuffle discard and add to deck
    13334:  650:			shuffle(currentPlayer, state);
        -:  651:		}
   133620:  652:		drawCard(currentPlayer, state);
   133620:  653:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
   133620:  654:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    30000:  655:			drawntreasure++;
        -:  656:		else {
   103620:  657:			temphand[temphandCounter] = cardDrawn;
   103620:  658:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   103620:  659:			temphandCounter++;
        -:  660:		}
        -:  661:	}
   123620:  662:	while (temphandCounter - 1 >= 0) {
   103620:  663:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[temphandCounter - 1]; // discard all cards in play that have been drawn
   103620:  664:		temphandCounter = temphandCounter - 1;
        -:  665:	}
    10000:  666:	return 0;
        -:  667:}
        -:  668:
    #####:  669:int smithyEffect(int currentPlayer, struct gameState *state, int handPos, int i) {
        -:  670:	
        -:  671:	//+3 Cards
    #####:  672:	for (i = 1; i < 3; i++)
        -:  673:	{
    #####:  674:		drawCard(currentPlayer, state);
        -:  675:	}
        -:  676:
        -:  677:	//discard card from hand
        -:  678:	//discardCard(handPos, currentPlayer, state, 0);
    #####:  679:	return 0;
        -:  680:}
        -:  681:
    20000:  682:int outpostEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  683:	
        -:  684:	//set outpost flag
    20000:  685:	state->outpostPlayed++;
        -:  686:
        -:  687:	//discard card
        -:  688:	//discardCard(handPos, currentPlayer, state, 0);
    20000:  689:	return 0;
        -:  690:}
        -:  691:
    10000:  692:int villageEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  693:	
        -:  694:	//+1 Card
    10000:  695:	drawCard(currentPlayer, state);
        -:  696:
        -:  697:	//+2 Actions
    10000:  698:	state->numActions = state->numActions + 3;
        -:  699:
        -:  700:	//discard played card from hand
    10000:  701:	discardCard(handPos, currentPlayer, state, 1);
    10000:  702:	return 0;
        -:  703:}
        -:  704:
    #####:  705:int embargoEffect(int currentPlayer, struct gameState *state, int handPos, int choice1) {
        -:  706:	//+2 Coins
    #####:  707:	state->coins = state->coins + 2;
        -:  708:
        -:  709:	//see if selected pile is in play
    #####:  710:	if (state->supplyCount[choice1] == -1)
        -:  711:	{
    #####:  712:		return -1;
        -:  713:	}
        -:  714:
        -:  715:	//add embargo token to selected supply pile
    #####:  716:	state->embargoTokens[choice1]++;
        -:  717:
        -:  718:	//trash card
    #####:  719:	discardCard(handPos, currentPlayer, state, 0);
    #####:  720:	return 0;
        -:  721:}
        -:  722:
        -:  723:
        -:  724:
    #####:  725:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  726:{
        -:  727:  int i;
        -:  728:  int j;
        -:  729:  int k;
        -:  730:  int x;
        -:  731:  int index;
    #####:  732:  int currentPlayer = whoseTurn(state);
    #####:  733:  int nextPlayer = currentPlayer + 1;
        -:  734:
    #####:  735:  int tributeRevealedCards[2] = {-1, -1};
        -:  736:  int temphand[MAX_HAND];// moved above the if statement
    #####:  737:  int drawntreasure=0;
        -:  738:  int cardDrawn;
    #####:  739:  int z = 0;// this is the counter for the temp hand
    #####:  740:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  741:    nextPlayer = 0;
        -:  742:  }
        -:  743:  
        -:  744:	
        -:  745:  //uses switch to select card and perform actions
    #####:  746:  switch( card ) 
        -:  747:    {
        -:  748:    case adventurer:
    #####:  749:		return adventurerEffect(drawntreasure, state, currentPlayer, cardDrawn, z, temphand);
        -:  750:			
        -:  751:    case council_room:
        -:  752:      //+4 Cards
    #####:  753:      for (i = 0; i < 4; i++)
        -:  754:	{
    #####:  755:	  drawCard(currentPlayer, state);
        -:  756:	}
        -:  757:			
        -:  758:      //+1 Buy
    #####:  759:      state->numBuys++;
        -:  760:			
        -:  761:      //Each other player draws a card
    #####:  762:      for (i = 0; i < state->numPlayers; i++)
        -:  763:	{
    #####:  764:	  if ( i != currentPlayer )
        -:  765:	    {
    #####:  766:	      drawCard(i, state);
        -:  767:	    }
        -:  768:	}
        -:  769:			
        -:  770:      //put played card in played card pile
    #####:  771:      discardCard(handPos, currentPlayer, state, 0);
        -:  772:			
    #####:  773:      return 0;
        -:  774:			
        -:  775:    case feast:
        -:  776:      //gain card with cost up to 5
        -:  777:      //Backup hand
    #####:  778:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  779:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  780:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  781:      }
        -:  782:      //Backup hand
        -:  783:
        -:  784:      //Update Coins for Buy
    #####:  785:      updateCoins(currentPlayer, state, 5);
    #####:  786:      x = 1;//Condition to loop on
    #####:  787:      while( x == 1) {//Buy one card
    #####:  788:	if (supplyCount(choice1, state) <= 0){
        -:  789:	  if (DEBUG)
        -:  790:	    printf("None of that card left, sorry!\n");
        -:  791:
        -:  792:	  if (DEBUG){
        -:  793:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  794:	  }
        -:  795:	}
    #####:  796:	else if (state->coins < getCost(choice1)){
    #####:  797:	  printf("That card is too expensive!\n");
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  801:	  }
        -:  802:	}
        -:  803:	else{
        -:  804:
        -:  805:	  if (DEBUG){
        -:  806:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  807:	  }
        -:  808:
    #####:  809:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  810:	  x = 0;//No more buying cards
        -:  811:
        -:  812:	  if (DEBUG){
        -:  813:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  814:	  }
        -:  815:
        -:  816:	}
        -:  817:      }     
        -:  818:
        -:  819:      //Reset Hand
    #####:  820:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  821:	state->hand[currentPlayer][i] = temphand[i];
    #####:  822:	temphand[i] = -1;
        -:  823:      }
        -:  824:      //Reset Hand
        -:  825:      			
    #####:  826:      return 0;
        -:  827:			
        -:  828:    case gardens:
    #####:  829:      return -1;
        -:  830:			
        -:  831:    case mine:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  835:	{
    #####:  836:	  return -1;
        -:  837:	}
        -:  838:		
    #####:  839:      if (choice2 > treasure_map || choice2 < curse)
        -:  840:	{
    #####:  841:	  return -1;
        -:  842:	}
        -:  843:
    #####:  844:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:
    #####:  849:      gainCard(choice2, state, 2, currentPlayer);
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  856:	{
    #####:  857:	  if (state->hand[currentPlayer][i] == j)
        -:  858:	    {
    #####:  859:	      discardCard(i, currentPlayer, state, 0);			
    #####:  860:	      break;
        -:  861:	    }
        -:  862:	}
        -:  863:			
    #####:  864:      return 0;
        -:  865:			
        -:  866:    case remodel:
    #####:  867:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  868:
    #####:  869:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  870:	{
    #####:  871:	  return -1;
        -:  872:	}
        -:  873:
    #####:  874:      gainCard(choice2, state, 0, currentPlayer);
        -:  875:
        -:  876:      //discard card from hand
    #####:  877:      discardCard(handPos, currentPlayer, state, 0);
        -:  878:
        -:  879:      //discard trashed card
    #####:  880:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  881:	{
    #####:  882:	  if (state->hand[currentPlayer][i] == j)
        -:  883:	    {
    #####:  884:	      discardCard(i, currentPlayer, state, 0);			
    #####:  885:	      break;
        -:  886:	    }
        -:  887:	}
        -:  888:
        -:  889:
    #####:  890:      return 0;
        -:  891:		
        -:  892:    case smithy:
        -:  893:
    #####:  894:		return smithyEffect(currentPlayer, state, handPos, i);
        -:  895:		
        -:  896:    case village:
        -:  897:
    #####:  898:		return villageEffect(currentPlayer, state, handPos);
        -:  899:		
        -:  900:    case baron:
    #####:  901:      state->numBuys++;//Increase buys by 1!
    #####:  902:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  903:	int p = 0;//Iterator for hand!
    #####:  904:	int card_not_discarded = 1;//Flag for discard set!
    #####:  905:	while(card_not_discarded){
    #####:  906:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  907:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  908:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  909:	    state->discardCount[currentPlayer]++;
    #####:  910:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  911:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  912:	    }
    #####:  913:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  914:	    state->handCount[currentPlayer]--;
    #####:  915:	    card_not_discarded = 0;//Exit the loop
        -:  916:	  }
    #####:  917:	  else if (p > state->handCount[currentPlayer]){
        -:  918:	    if(DEBUG) {
        -:  919:	      printf("No estate cards in your hand, invalid choice\n");
        -:  920:	      printf("Must gain an estate if there are any\n");
        -:  921:	    }
    #####:  922:	    if (supplyCount(estate, state) > 0){
    #####:  923:	      gainCard(estate, state, 0, currentPlayer);
    #####:  924:	      state->supplyCount[estate]--;//Decrement estates
    #####:  925:	      if (supplyCount(estate, state) == 0){
    #####:  926:		isGameOver(state);
        -:  927:	      }
        -:  928:	    }
    #####:  929:	    card_not_discarded = 0;//Exit the loop
        -:  930:	  }
        -:  931:			    
        -:  932:	  else{
    #####:  933:	    p++;//Next card
        -:  934:	  }
        -:  935:	}
        -:  936:      }
        -:  937:			    
        -:  938:      else{
    #####:  939:	if (supplyCount(estate, state) > 0){
    #####:  940:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  941:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  942:	  if (supplyCount(estate, state) == 0){
    #####:  943:	    isGameOver(state);
        -:  944:	  }
        -:  945:	}
        -:  946:      }
        -:  947:	    
        -:  948:      
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case great_hall:
        -:  952:      //+1 Card
    #####:  953:      drawCard(currentPlayer, state);
        -:  954:			
        -:  955:      //+1 Actions
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
    #####:  960:      return 0;
        -:  961:		
        -:  962:    case minion:
        -:  963:      //+1 action
    #####:  964:      state->numActions++;
        -:  965:			
        -:  966:      //discard card from hand
    #####:  967:      discardCard(handPos, currentPlayer, state, 0);
        -:  968:			
    #####:  969:      if (choice1)		//+2 coins
        -:  970:	{
    #####:  971:	  state->coins = state->coins + 2;
        -:  972:	}
        -:  973:			
    #####:  974:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  975:	{
        -:  976:	  //discard hand
    #####:  977:	  while(numHandCards(state) > 0)
        -:  978:	    {
    #####:  979:	      discardCard(handPos, currentPlayer, state, 0);
        -:  980:	    }
        -:  981:				
        -:  982:	  //draw 4
    #####:  983:	  for (i = 0; i < 4; i++)
        -:  984:	    {
    #####:  985:	      drawCard(currentPlayer, state);
        -:  986:	    }
        -:  987:				
        -:  988:	  //other players discard hand and redraw if hand size > 4
    #####:  989:	  for (i = 0; i < state->numPlayers; i++)
        -:  990:	    {
    #####:  991:	      if (i != currentPlayer)
        -:  992:		{
    #####:  993:		  if ( state->handCount[i] > 4 )
        -:  994:		    {
        -:  995:		      //discard hand
    #####:  996:		      while( state->handCount[i] > 0 )
        -:  997:			{
    #####:  998:			  discardCard(handPos, i, state, 0);
        -:  999:			}
        -: 1000:							
        -: 1001:		      //draw 4
    #####: 1002:		      for (j = 0; j < 4; j++)
        -: 1003:			{
    #####: 1004:			  drawCard(i, state);
        -: 1005:			}
        -: 1006:		    }
        -: 1007:		}
        -: 1008:	    }
        -: 1009:				
        -: 1010:	}
    #####: 1011:      return 0;
        -: 1012:		
        -: 1013:    case steward:
    #####: 1014:      if (choice1 == 1)
        -: 1015:	{
        -: 1016:	  //+2 cards
    #####: 1017:	  drawCard(currentPlayer, state);
    #####: 1018:	  drawCard(currentPlayer, state);
        -: 1019:	}
    #####: 1020:      else if (choice1 == 2)
        -: 1021:	{
        -: 1022:	  //+2 coins
    #####: 1023:	  state->coins = state->coins + 2;
        -: 1024:	}
        -: 1025:      else
        -: 1026:	{
        -: 1027:	  //trash 2 cards in hand
    #####: 1028:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1029:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1030:	}
        -: 1031:			
        -: 1032:      //discard card from hand
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1034:      return 0;
        -: 1035:		
        -: 1036:    case tribute:
    #####: 1037:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1038:	if (state->deckCount[nextPlayer] > 0){
    #####: 1039:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1040:	  state->deckCount[nextPlayer]--;
        -: 1041:	}
    #####: 1042:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1043:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1044:	  state->discardCount[nextPlayer]--;
        -: 1045:	}
        -: 1046:	else{
        -: 1047:	  //No Card to Reveal
        -: 1048:	  if (DEBUG){
        -: 1049:	    printf("No cards to reveal\n");
        -: 1050:	  }
        -: 1051:	}
        -: 1052:      }
        -: 1053:	    
        -: 1054:      else{
    #####: 1055:	if (state->deckCount[nextPlayer] == 0){
    #####: 1056:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1057:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1058:	    state->deckCount[nextPlayer]++;
    #####: 1059:	    state->discard[nextPlayer][i] = -1;
    #####: 1060:	    state->discardCount[nextPlayer]--;
        -: 1061:	  }
        -: 1062:			    
    #####: 1063:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1064:	} 
    #####: 1065:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1066:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1067:	state->deckCount[nextPlayer]--;
    #####: 1068:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1069:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1070:	state->deckCount[nextPlayer]--;
        -: 1071:      }    
        -: 1072:		       
    #####: 1073:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1074:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1075:	state->playedCardCount++;
    #####: 1076:	tributeRevealedCards[1] = -1;
        -: 1077:      }
        -: 1078:
    #####: 1079:      for (i = 0; i <= 2; i ++){
    #####: 1080:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1081:	  state->coins += 2;
        -: 1082:	}
        -: 1083:		    
    #####: 1084:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1085:	  drawCard(currentPlayer, state);
    #####: 1086:	  drawCard(currentPlayer, state);
        -: 1087:	}
        -: 1088:	else{//Action Card
    #####: 1089:	  state->numActions = state->numActions + 2;
        -: 1090:	}
        -: 1091:      }
        -: 1092:	    
    #####: 1093:      return 0;
        -: 1094:		
        -: 1095:    case ambassador:
    #####: 1096:      j = 0;		//used to check if player has enough cards to discard
        -: 1097:
    #####: 1098:      if (choice2 > 2 || choice2 < 0)
        -: 1099:	{
    #####: 1100:	  return -1;				
        -: 1101:	}
        -: 1102:
    #####: 1103:      if (choice1 == handPos)
        -: 1104:	{
    #####: 1105:	  return -1;
        -: 1106:	}
        -: 1107:
    #####: 1108:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1109:	{
    #####: 1110:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1111:	    {
    #####: 1112:	      j++;
        -: 1113:	    }
        -: 1114:	}
    #####: 1115:      if (j < choice2)
        -: 1116:	{
    #####: 1117:	  return -1;				
        -: 1118:	}
        -: 1119:
        -: 1120:      if (DEBUG) 
        -: 1121:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1122:
        -: 1123:      //increase supply count for choosen card by amount being discarded
    #####: 1124:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1125:			
        -: 1126:      //each other player gains a copy of revealed card
    #####: 1127:      for (i = 0; i < state->numPlayers; i++)
        -: 1128:	{
    #####: 1129:	  if (i != currentPlayer)
        -: 1130:	    {
    #####: 1131:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1132:	    }
        -: 1133:	}
        -: 1134:
        -: 1135:      //discard played card from hand
    #####: 1136:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1137:
        -: 1138:      //trash copies of cards returned to supply
    #####: 1139:      for (j = 0; j < choice2; j++)
        -: 1140:	{
    #####: 1141:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1142:	    {
    #####: 1143:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1144:		{
    #####: 1145:		  discardCard(i, currentPlayer, state, 1);
    #####: 1146:		  break;
        -: 1147:		}
        -: 1148:	    }
        -: 1149:	}			
        -: 1150:
    #####: 1151:      return 0;
        -: 1152:		
        -: 1153:    case cutpurse:
        -: 1154:
    #####: 1155:      updateCoins(currentPlayer, state, 2);
    #####: 1156:      for (i = 0; i < state->numPlayers; i++)
        -: 1157:	{
    #####: 1158:	  if (i != currentPlayer)
        -: 1159:	    {
    #####: 1160:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1161:		{
    #####: 1162:		  if (state->hand[i][j] == copper)
        -: 1163:		    {
    #####: 1164:		      discardCard(j, i, state, 0);
    #####: 1165:		      break;
        -: 1166:		    }
    #####: 1167:		  if (j == state->handCount[i])
        -: 1168:		    {
    #####: 1169:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1170:			{
        -: 1171:			  if (DEBUG)
        -: 1172:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1173:			}	
    #####: 1174:		      break;
        -: 1175:		    }		
        -: 1176:		}
        -: 1177:					
        -: 1178:	    }
        -: 1179:				
        -: 1180:	}				
        -: 1181:
        -: 1182:      //discard played card from hand
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1184:
    #####: 1185:      return 0;
        -: 1186:
        -: 1187:		
        -: 1188:    case embargo: 
    #####: 1189:		return embargoEffect(currentPlayer, state, handPos, choice1);
        -: 1190:		
        -: 1191:    case outpost:
    #####: 1192:		return outpostEffect(currentPlayer, state, handPos);
        -: 1193:		
        -: 1194:    case salvager:
        -: 1195:      //+1 buy
    #####: 1196:      state->numBuys++;
        -: 1197:			
    #####: 1198:      if (choice1)
        -: 1199:	{
        -: 1200:	  //gain coins equal to trashed card
    #####: 1201:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1202:	  //trash card
    #####: 1203:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1204:	}
        -: 1205:			
        -: 1206:      //discard card
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1208:      return 0;
        -: 1209:		
        -: 1210:    case sea_hag:
    #####: 1211:      for (i = 0; i < state->numPlayers; i++){
    #####: 1212:	if (i != currentPlayer){
    #####: 1213:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1214:	  state->discardCount[i]++;
    #####: 1215:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1216:	}
        -: 1217:      }
    #####: 1218:      return 0;
        -: 1219:		
        -: 1220:    case treasure_map:
        -: 1221:      //search hand for another treasure_map
    #####: 1222:      index = -1;
    #####: 1223:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1224:	{
    #####: 1225:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1226:	    {
    #####: 1227:	      index = i;
    #####: 1228:	      break;
        -: 1229:	    }
        -: 1230:	}
    #####: 1231:      if (index > -1)
        -: 1232:	{
        -: 1233:	  //trash both treasure cards
    #####: 1234:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1235:	  discardCard(index, currentPlayer, state, 1);
        -: 1236:
        -: 1237:	  //gain 4 Gold cards
    #####: 1238:	  for (i = 0; i < 4; i++)
        -: 1239:	    {
    #####: 1240:	      gainCard(gold, state, 1, currentPlayer);
        -: 1241:	    }
        -: 1242:				
        -: 1243:	  //return success
    #####: 1244:	  return 1;
        -: 1245:	}
        -: 1246:			
        -: 1247:      //no second treasure_map found in hand
    #####: 1248:      return -1;
        -: 1249:    }
        -: 1250:	
    #####: 1251:  return -1;
        -: 1252:}
        -: 1253:
    10000: 1254:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1255:{
        -: 1256:	
        -: 1257:  //if card is not trashed, added to Played pile 
    10000: 1258:  if (trashFlag < 1)
        -: 1259:    {
        -: 1260:      //add card to played pile
    #####: 1261:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1262:      state->playedCardCount++;
        -: 1263:    }
        -: 1264:	
        -: 1265:  //set played card to -1
    10000: 1266:  state->hand[currentPlayer][handPos] = -1;
        -: 1267:	
        -: 1268:  //remove card from player's hand
    10000: 1269:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1270:    {
        -: 1271:      //reduce number of cards in hand
    #####: 1272:      state->handCount[currentPlayer]--;
        -: 1273:    }
    10000: 1274:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
        -: 1278:    }
        -: 1279:  else 	
        -: 1280:    {
        -: 1281:      //replace discarded card with last card in hand
    10000: 1282:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1283:      //set last card to -1
    10000: 1284:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1285:      //reduce number of cards in hand
    10000: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
        -: 1288:	
    10000: 1289:  return 0;
        -: 1290:}
        -: 1291:
    #####: 1292:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1293:{
        -: 1294:  //Note: supplyPos is enum of choosen card
        -: 1295:	
        -: 1296:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1297:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1298:    {
    #####: 1299:      return -1;
        -: 1300:    }
        -: 1301:	
        -: 1302:  //added card for [whoseTurn] current player:
        -: 1303:  // toFlag = 0 : add to discard
        -: 1304:  // toFlag = 1 : add to deck
        -: 1305:  // toFlag = 2 : add to hand
        -: 1306:
    #####: 1307:  if (toFlag == 1)
        -: 1308:    {
    #####: 1309:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1310:      state->deckCount[player]++;
        -: 1311:    }
    #####: 1312:  else if (toFlag == 2)
        -: 1313:    {
    #####: 1314:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1315:      state->handCount[player]++;
        -: 1316:    }
        -: 1317:  else
        -: 1318:    {
    #####: 1319:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1320:      state->discardCount[player]++;
        -: 1321:    }
        -: 1322:	
        -: 1323:  //decrease number in supply pile
    #####: 1324:  state->supplyCount[supplyPos]--;
        -: 1325:	 
    #####: 1326:  return 0;
        -: 1327:}
        -: 1328:
       68: 1329:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1330:{
        -: 1331:  int i;
        -: 1332:	
        -: 1333:  //reset coin count
       68: 1334:  state->coins = 0;
        -: 1335:
        -: 1336:  //add coins for each Treasure card in player's hand
      398: 1337:  for (i = 0; i < state->handCount[player]; i++)
        -: 1338:    {
      330: 1339:      if (state->hand[player][i] == copper)
        -: 1340:	{
      237: 1341:	  state->coins += 1;
        -: 1342:	}
       93: 1343:      else if (state->hand[player][i] == silver)
        -: 1344:	{
        9: 1345:	  state->coins += 2;
        -: 1346:	}
       84: 1347:      else if (state->hand[player][i] == gold)
        -: 1348:	{
        8: 1349:	  state->coins += 3;
        -: 1350:	}	
        -: 1351:    }	
        -: 1352:
        -: 1353:  //add bonus
       68: 1354:  state->coins += bonus;
        -: 1355:
       68: 1356:  return 0;
        -: 1357:}
        -: 1358:
        -: 1359:
        -: 1360://end of dominion.c
        -: 1361:


TESTING SMITHYEFFECT() CARD EFFECT FUNCTION

TEST 1: PROPER RETURN OCCURS
----TEST PASSED----  THE FUNCTION DID NOT CRASH AND RETURNED PROPERLY

TEST 2: THREE CARDS ARE DRAWN FROM THE PLAYER'S HAND
----TEST FAILED----  THE PLAYER DID NOT GAIN THREE CARDS

TEST 3: CALLING THE FUNCTION DOES NOT CHANGE THE OTHER PLAYER'S CARDS
----TEST PASSED----  THE OTHER PLAYER'S HAND/DECK/DISCARD WAS NOT CHANGED

TEST 4: CALLING THE FUNCTION DOES NOT CHANGE SUPPLY COUNT OF THE CARDS
----TEST PASSED----  THE SUPPLY COUNT DID NOT CHANGE

TEST 5: CHECK TO MAKE SURE THE GAME DOES NOT CRASH IF THE PLAYER ONLY HAS THE SMITHY CARD
----TEST PASSED----  THE FUNCTION RETURNED PROPERLY
NOT ALL TESTS PASSED. NUMBER OF FAILS: 1
Function 'updateCoins'
Lines executed:100.00% of 11
No branches
No calls

Function 'gainCard'
Lines executed:0.00% of 13
No branches
No calls

Function 'discardCard'
Lines executed:69.23% of 13
No branches
No calls

Function 'cardEffect'
Lines executed:0.00% of 210
No branches
No calls

Function 'embargoEffect'
Lines executed:0.00% of 7
No branches
No calls

Function 'villageEffect'
Lines executed:100.00% of 5
No branches
No calls

Function 'outpostEffect'
Lines executed:100.00% of 3
No branches
No calls

Function 'smithyEffect'
Lines executed:100.00% of 4
No branches
No calls

Function 'adventurerEffect'
Lines executed:100.00% of 15
No branches
No calls

Function 'getCost'
Lines executed:0.00% of 30
No branches
No calls

Function 'drawCard'
Lines executed:100.00% of 22
No branches
No calls

Function 'getWinners'
Lines executed:0.00% of 24
No branches
No calls

Function 'scoreFor'
Lines executed:0.00% of 24
No branches
No calls

Function 'isGameOver'
Lines executed:90.00% of 10
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 20
No branches
No calls

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 9
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
No calls

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
No calls

Function 'buyCard'
Lines executed:0.00% of 13
No branches
No calls

Function 'playCard'
Lines executed:0.00% of 14
No branches
No calls

Function 'shuffle'
Lines executed:100.00% of 16
No branches
No calls

Function 'initializeGame'
Lines executed:96.77% of 62
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
No branches
No calls

File 'dominion.c'
Lines executed:31.29% of 556
Branches executed:26.86% of 417
Taken at least once:25.18% of 417
Calls executed:15.05% of 93
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 9730746 returned 100% blocks executed 100%
  9730746:    8:int compare(const void* a, const void* b) {
  9730746:    8-block  0
  9730746:    9:  if (*(int*)a > *(int*)b)
  9730746:    9-block  0
branch  0 taken 4863001 (fallthrough)
branch  1 taken 4867745
  4863001:   10:    return 1;
  4863001:   10-block  0
unconditional  0 taken 4863001
  4867745:   11:  if (*(int*)a < *(int*)b)
  4867745:   11-block  0
branch  0 taken 1719970 (fallthrough)
branch  1 taken 3147775
  1719970:   12:    return -1;
  1719970:   12-block  0
unconditional  0 taken 1719970
  3147775:   13:  return 0;
  3147775:   13-block  0
unconditional  0 taken 3147775
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
unconditional  0 never executed
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
unconditional  0 never executed
        -:   35:}
        -:   36:
function initializeGame called 40031 returned 100% blocks executed 97%
    40031:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
    40031:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    40031:   44:  SelectStream(1);
    40031:   44-block  0
call    0 returned 40031
    40031:   45:  PutSeed((long)randomSeed);
call    0 returned 40031
        -:   46:  
        -:   47:  //check number of players
    40031:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 40031 (fallthrough)
branch  1 taken 0
    40031:   48-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 40031
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
unconditional  0 never executed
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    40031:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    95113:   57:  for (i = 0; i < 10; i++)
    40031:   57-block  0
unconditional  0 taken 40031
    55082:   57-block  1
unconditional  1 taken 55082
    95113:   57-block  2
branch  2 taken 95055
branch  3 taken 58 (fallthrough)
        -:   58:    {
   930933:   59:      for (j = 0; j < 10; j++)
    95055:   59-block  0
unconditional  0 taken 95055
   835878:   59-block  1
unconditional  1 taken 835878
   930933:   59-block  2
branch  2 taken 875851
branch  3 taken 55082 (fallthrough)
        -:   60:        {
   875851:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
   875851:   61-block  0
branch  0 taken 780796 (fallthrough)
branch  1 taken 95055
   780796:   61-block  1
branch  2 taken 39973 (fallthrough)
branch  3 taken 740823
        -:   62:	    {
    39973:   63:	      return -1;
    39973:   63-block  0
unconditional  0 taken 39973
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       58:   73:  if (numPlayers == 2)
       58:   73-block  0
branch  0 taken 32 (fallthrough)
branch  1 taken 26
        -:   74:    {
       32:   75:      state->supplyCount[curse] = 10;
       32:   75-block  0
unconditional  0 taken 32
        -:   76:    }
       26:   77:  else if (numPlayers == 3)
       26:   77-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 16
        -:   78:    {
       10:   79:      state->supplyCount[curse] = 20;
       10:   79-block  0
unconditional  0 taken 10
        -:   80:    }
        -:   81:  else
        -:   82:    {
       16:   83:      state->supplyCount[curse] = 30;
       16:   83-block  0
unconditional  0 taken 16
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       58:   87:  if (numPlayers == 2)
       58:   87-block  0
branch  0 taken 32 (fallthrough)
branch  1 taken 26
        -:   88:    {
       32:   89:      state->supplyCount[estate] = 8;
       32:   90:      state->supplyCount[duchy] = 8;
       32:   91:      state->supplyCount[province] = 8;
       32:   91-block  0
unconditional  0 taken 32
        -:   92:    }
        -:   93:  else
        -:   94:    {
       26:   95:      state->supplyCount[estate] = 12;
       26:   96:      state->supplyCount[duchy] = 12;
       26:   97:      state->supplyCount[province] = 12;
       26:   97-block  0
unconditional  0 taken 26
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       58:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       58:  102:  state->supplyCount[silver] = 40;
       58:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1218:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
       58:  106-block  0
unconditional  0 taken 58
     1160:  106-block  1
unconditional  1 taken 1160
     1218:  106-block  2
branch  2 taken 1160
branch  3 taken 58 (fallthrough)
        -:  107:    {
     9596:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
     1160:  108-block  0
unconditional  0 taken 1160
     8436:  108-block  1
unconditional  1 taken 8436
     9596:  108-block  2
branch  2 taken 8990
branch  3 taken 606 (fallthrough)
        -:  109:	{
     8990:  110:	  if (kingdomCards[j] == i)
     8990:  110-block  0
branch  0 taken 554 (fallthrough)
branch  1 taken 8436
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      554:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
      554:  113-block  0
branch  0 taken 522 (fallthrough)
branch  1 taken 32
      522:  113-block  1
branch  2 taken 58 (fallthrough)
branch  3 taken 464
        -:  114:		{
      180:  115:		  if (numPlayers == 2){ 
       90:  115-block  0
branch  0 taken 38 (fallthrough)
branch  1 taken 52
       90:  115-block  1
unconditional  2 taken 90
       38:  116:		    state->supplyCount[i] = 8; 
       38:  116-block  0
unconditional  0 taken 38
        -:  117:		  }
       52:  118:		  else{ state->supplyCount[i] = 12; }
       52:  118-block  0
unconditional  0 taken 52
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      464:  122:		  state->supplyCount[i] = 10;
      464:  122-block  0
unconditional  0 taken 464
        -:  123:		}
      554:  124:	      break;
      554:  124-block  0
unconditional  0 taken 554
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     8436:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      216:  138:  for (i = 0; i < numPlayers; i++)
       58:  138-block  0
unconditional  0 taken 58
      158:  138-block  1
unconditional  1 taken 158
      216:  138-block  2
branch  2 taken 158
branch  3 taken 58 (fallthrough)
        -:  139:    {
      158:  140:      state->deckCount[i] = 0;
      632:  141:      for (j = 0; j < 3; j++)
      158:  141-block  0
unconditional  0 taken 158
      474:  141-block  1
unconditional  1 taken 474
      632:  141-block  2
branch  2 taken 474
branch  3 taken 158 (fallthrough)
        -:  142:	{
      474:  143:	  state->deck[i][j] = estate;
      474:  144:	  state->deckCount[i]++;
        -:  145:	}
     1264:  146:      for (j = 3; j < 10; j++)
      158:  146-block  0
unconditional  0 taken 158
     1106:  146-block  1
unconditional  1 taken 1106
     1264:  146-block  2
branch  2 taken 1106
branch  3 taken 158 (fallthrough)
        -:  147:	{
     1106:  148:	  state->deck[i][j] = copper;
     1106:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      216:  154:  for (i = 0; i < numPlayers; i++)
       58:  154-block  0
unconditional  0 taken 58
      158:  154-block  1
unconditional  1 taken 158
      216:  154-block  2
branch  2 taken 158
branch  3 taken 58 (fallthrough)
        -:  155:    {
      158:  156:      if ( shuffle(i, state) < 0 )
      158:  156-block  0
call    0 returned 158
branch  1 taken 0 (fallthrough)
branch  2 taken 158
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
unconditional  0 never executed
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      216:  163:  for (i = 0; i < numPlayers; i++)
       58:  163-block  0
unconditional  0 taken 58
      158:  163-block  1
unconditional  1 taken 158
      216:  163-block  2
branch  2 taken 158
branch  3 taken 58 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      158:  166:      state->handCount[i] = 0;
      158:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1624:  176:  for (i = 0; i <= treasure_map; i++)
       58:  176-block  0
unconditional  0 taken 58
     1566:  176-block  1
unconditional  1 taken 1566
     1624:  176-block  2
branch  2 taken 1566
branch  3 taken 58 (fallthrough)
        -:  177:    {
     1566:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       58:  182:  state->outpostPlayed = 0;
       58:  183:  state->phase = 0;
       58:  184:  state->numActions = 1;
       58:  185:  state->numBuys = 1;
       58:  186:  state->playedCardCount = 0;
       58:  187:  state->whoseTurn = 0;
       58:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      348:  192:  for (it = 0; it < 5; it++){
       58:  192-block  0
unconditional  0 taken 58
unconditional  1 taken 290
      348:  192-block  1
branch  2 taken 290
branch  3 taken 58 (fallthrough)
      290:  193:    drawCard(state->whoseTurn, state);
      290:  193-block  0
call    0 returned 290
        -:  194:  }
        -:  195:
       58:  196:  updateCoins(state->whoseTurn, state, 0);
       58:  196-block  0
call    0 returned 58
        -:  197:
       58:  198:  return 0;
unconditional  0 taken 58
        -:  199:}
        -:  200:
function shuffle called 20167 returned 100% blocks executed 100%
    20167:  201:int shuffle(int player, struct gameState *state) {
    20167:  201-block  0
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    20167:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    20167:  209:  if (state->deckCount[player] < 1)
    20167:  209-block  0
branch  0 taken 6673 (fallthrough)
branch  1 taken 13494
     6673:  210:    return -1;
     6673:  210-block  0
unconditional  0 taken 6673
    13494:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
    13494:  211-block  0
call    0 returned 13494
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  1479649:  214:  while (state->deckCount[player] > 0) {
unconditional  0 taken 13494
  1479649:  214-block  0
branch  1 taken 1466155
branch  2 taken 13494 (fallthrough)
  1466155:  215:    card = floor(Random() * state->deckCount[player]);
  1466155:  215-block  0
call    0 returned 1466155
  1466155:  216:    newDeck[newDeckPos] = state->deck[player][card];
  1466155:  217:    newDeckPos++;
102731079:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
unconditional  0 taken 1466155
101264924:  218-block  0
unconditional  1 taken 101264924
102731079:  218-block  1
branch  2 taken 101264924
branch  3 taken 1466155 (fallthrough)
101264924:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  1466155:  221:    state->deckCount[player]--;
  1466155:  221-block  0
unconditional  0 taken 1466155
        -:  222:  }
  1479649:  223:  for (i = 0; i < newDeckPos; i++) {
    13494:  223-block  0
unconditional  0 taken 13494
  1466155:  223-block  1
unconditional  1 taken 1466155
  1479649:  223-block  2
branch  2 taken 1466155
branch  3 taken 13494 (fallthrough)
  1466155:  224:    state->deck[player][i] = newDeck[i];
  1466155:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    20167:  228:  return 0;
    13494:  228-block  0
unconditional  0 taken 13494
    20167:  228-block  1
unconditional  1 taken 20167
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  231-block  0
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
unconditional  0 never executed
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
unconditional  0 never executed
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
unconditional  0 never executed
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
unconditional  0 never executed
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
unconditional  0 never executed
    $$$$$:  269-block  0
unconditional  1 never executed
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  272-block  0
    $$$$$:  272-block  1
unconditional  0 never executed
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    $$$$$:  282-block  0
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    $$$$$:  285-block  0
unconditional  0 never executed
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
unconditional  0 never executed
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
    $$$$$:  293-block  0
unconditional  0 never executed
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  297-block  0
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
unconditional  0 never executed
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    $$$$$:  308-block  0
unconditional  0 never executed
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    $$$$$:  311-block  0
    #####:  312:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  312-block  0
call    0 never executed
unconditional  1 never executed
        -:  313:}
        -:  314:
function handCard called 4 returned 100% blocks executed 100%
        4:  315:int handCard(int handPos, struct gameState *state) {
        4:  315-block  0
        4:  316:  int currentPlayer = whoseTurn(state);
        4:  316-block  0
call    0 returned 4
        4:  317:  return state->hand[currentPlayer][handPos];
unconditional  0 taken 4
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    $$$$$:  320-block  0
    #####:  321:  return state->supplyCount[card];
    $$$$$:  321-block  0
unconditional  0 never executed
        -:  322:}
        -:  323:
function fullDeckCount called 5 returned 100% blocks executed 100%
        5:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        5:  324-block  0
        -:  325:  int i;
        5:  326:  int count = 0;
        -:  327:
       22:  328:  for (i = 0; i < state->deckCount[player]; i++)
        5:  328-block  0
unconditional  0 taken 5
       17:  328-block  1
unconditional  1 taken 17
       22:  328-block  2
branch  2 taken 17
branch  3 taken 5 (fallthrough)
        -:  329:    {
       17:  330:      if (state->deck[player][i] == card) count++;
       17:  330-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 12
        5:  330-block  1
unconditional  2 taken 5
        -:  331:    }
        -:  332:
       22:  333:  for (i = 0; i < state->handCount[player]; i++)
        5:  333-block  0
unconditional  0 taken 5
       17:  333-block  1
unconditional  1 taken 17
       22:  333-block  2
branch  2 taken 17
branch  3 taken 5 (fallthrough)
        -:  334:    {
       17:  335:      if (state->hand[player][i] == card) count++;
       17:  335-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 9
        8:  335-block  1
unconditional  2 taken 8
        -:  336:    }
        -:  337:
       22:  338:  for (i = 0; i < state->discardCount[player]; i++)
        5:  338-block  0
unconditional  0 taken 5
       17:  338-block  1
unconditional  1 taken 17
       22:  338-block  2
branch  2 taken 17
branch  3 taken 5 (fallthrough)
        -:  339:    {
       17:  340:      if (state->discard[player][i] == card) count++;
       17:  340-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 10
        7:  340-block  1
unconditional  2 taken 7
        -:  341:    }
        -:  342:
        5:  343:  return count;
        5:  343-block  0
unconditional  0 taken 5
        -:  344:}
        -:  345:
function whoseTurn called 4 returned 100% blocks executed 100%
        4:  346:int whoseTurn(struct gameState *state) {
        4:  346-block  0
        4:  347:  return state->whoseTurn;
        4:  347-block  0
unconditional  0 taken 4
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
unconditional  0 never executed
    $$$$$:  356-block  0
unconditional  1 never executed
    $$$$$:  356-block  1
branch  2 never executed
branch  3 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
unconditional  0 never executed
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
unconditional  0 never executed
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  380-block  1
branch  2 never executed
branch  3 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
unconditional  0 never executed
        -:  388:}
        -:  389:
function isGameOver called 7 returned 100% blocks executed 91%
        7:  390:int isGameOver(struct gameState *state) {
        7:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        7:  395:  if (state->supplyCount[province] == 0)
        7:  395-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 4
        -:  396:    {
        3:  397:      return 1;
        3:  397-block  0
unconditional  0 taken 3
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        4:  402-block  0
unconditional  0 taken 4
      100:  402-block  1
unconditional  1 taken 100
      104:  402-block  2
branch  2 taken 100
branch  3 taken 4 (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
      100:  404-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 94
        -:  405:	{
        6:  406:	  j++;
        6:  406-block  0
unconditional  0 taken 6
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        4:  409-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -:  410:    {
    #####:  411:      return 1;
    $$$$$:  411-block  0
unconditional  0 never executed
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        4:  414-block  0
unconditional  0 taken 4
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
unconditional  0 never executed
    $$$$$:  422-block  1
unconditional  1 never executed
    $$$$$:  422-block  2
branch  2 never executed
branch  3 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
unconditional  2 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
unconditional  2 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
unconditional  2 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
unconditional  2 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
unconditional  2 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
unconditional  3 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
unconditional  0 never executed
    $$$$$:  433-block  1
unconditional  1 never executed
    $$$$$:  433-block  2
branch  2 never executed
branch  3 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
unconditional  2 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
unconditional  2 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
unconditional  2 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
unconditional  2 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
unconditional  2 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
unconditional  3 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
unconditional  0 never executed
    $$$$$:  444-block  1
unconditional  1 never executed
    $$$$$:  444-block  2
branch  2 never executed
branch  3 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
unconditional  2 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
unconditional  2 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
unconditional  2 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
unconditional  2 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
unconditional  2 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
unconditional  3 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
unconditional  0 never executed
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
unconditional  0 never executed
    $$$$$:  464-block  1
unconditional  1 never executed
    $$$$$:  464-block  2
branch  2 never executed
branch  3 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
unconditional  0 never executed
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
unconditional  1 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
unconditional  0 never executed
    $$$$$:  479-block  1
unconditional  1 never executed
    $$$$$:  479-block  2
branch  2 never executed
branch  3 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
unconditional  0 never executed
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
    $$$$$:  490-block  0
unconditional  1 never executed
    $$$$$:  490-block  1
branch  2 never executed
branch  3 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
unconditional  0 never executed
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
unconditional  0 never executed
    $$$$$:  500-block  1
unconditional  1 never executed
    $$$$$:  500-block  2
branch  2 never executed
branch  3 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
unconditional  0 never executed
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
unconditional  0 never executed
    $$$$$:  510-block  1
unconditional  1 never executed
    $$$$$:  510-block  2
branch  2 never executed
branch  3 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
unconditional  0 never executed
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
unconditional  0 never executed
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
unconditional  0 never executed
        -:  523:}
        -:  524:
function drawCard called 143920 returned 100% blocks executed 100%
   143920:  525:int drawCard(int player, struct gameState *state)
   143920:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
   143920:  528:  if (state->deckCount[player] <= 0){//Deck is empty
   143920:  528-block  0
branch  0 taken 6675 (fallthrough)
branch  1 taken 137245
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
  1464587:  533:    for (i = 0; i < state->discardCount[player];i++){
     6675:  533-block  0
unconditional  0 taken 6675
  1457912:  533-block  1
unconditional  1 taken 1457912
  1464587:  533-block  2
branch  2 taken 1457912
branch  3 taken 6675 (fallthrough)
  1457912:  534:      state->deck[player][i] = state->discard[player][i];
  1457912:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     6675:  538:    state->deckCount[player] = state->discardCount[player];
     6675:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     6675:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
     6675:  542-block  0
call    0 returned 6675
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     6675:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     6675:  551:    count = state->handCount[player];//Get current player's hand count
unconditional  0 taken 6675
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     6675:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     6675:  559:    if (deckCounter == 0)
     6675:  559-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 6673
        2:  560:      return -1;
        2:  560-block  0
unconditional  0 taken 2
        -:  561:
     6673:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     6673:  563:    state->deckCount[player]--;
     6673:  564:    state->handCount[player]++;//Increment hand count
     6673:  564-block  0
unconditional  0 taken 6673
        -:  565:  }
        -:  566:
        -:  567:  else{
   137245:  568:    int count = state->handCount[player];//Get current hand count for player
   137245:  568-block  0
unconditional  0 taken 137245
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   137245:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   137245:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   137245:  576:    state->deckCount[player]--;
   137245:  577:    state->handCount[player]++;//Increment hand count
   137245:  577-block  0
unconditional  0 taken 137245
        -:  578:  }
        -:  579:
   143918:  580:  return 0;
   143918:  580-block  0
unconditional  0 taken 143918
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
    $$$$$:  583-block  0
        -:  584:{
    #####:  585:  switch( cardNumber ) 
    $$$$$:  585-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
    $$$$$:  588-block  0
unconditional  0 never executed
        -:  589:    case estate:
    #####:  590:      return 2;
    $$$$$:  590-block  0
unconditional  0 never executed
        -:  591:    case duchy:
    #####:  592:      return 5;
    $$$$$:  592-block  0
unconditional  0 never executed
        -:  593:    case province:
    #####:  594:      return 8;
    $$$$$:  594-block  0
unconditional  0 never executed
        -:  595:    case copper:
    #####:  596:      return 0;
    $$$$$:  596-block  0
unconditional  0 never executed
        -:  597:    case silver:
    #####:  598:      return 3;
    $$$$$:  598-block  0
unconditional  0 never executed
        -:  599:    case gold:
    #####:  600:      return 6;
    $$$$$:  600-block  0
unconditional  0 never executed
        -:  601:    case adventurer:
    #####:  602:      return 6;
    $$$$$:  602-block  0
unconditional  0 never executed
        -:  603:    case council_room:
    #####:  604:      return 5;
    $$$$$:  604-block  0
unconditional  0 never executed
        -:  605:    case feast:
    #####:  606:      return 4;
    $$$$$:  606-block  0
unconditional  0 never executed
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
unconditional  0 never executed
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
unconditional  0 never executed
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
unconditional  0 never executed
        -:  613:    case smithy:
    #####:  614:      return 4;
    $$$$$:  614-block  0
unconditional  0 never executed
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
unconditional  0 never executed
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
unconditional  0 never executed
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
unconditional  0 never executed
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
unconditional  0 never executed
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
unconditional  0 never executed
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
unconditional  0 never executed
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
unconditional  0 never executed
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
unconditional  0 never executed
        -:  631:    case embargo: 
    #####:  632:      return 2;
    $$$$$:  632-block  0
unconditional  0 never executed
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
unconditional  0 never executed
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
unconditional  0 never executed
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
unconditional  0 never executed
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
unconditional  0 never executed
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
unconditional  0 never executed
        -:  644:}
        -:  645:
function adventurerEffect called 10000 returned 100% blocks executed 100%
    10000:  646:int adventurerEffect(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphandCounter, int temphand []) {
    10000:  646-block  0
        -:  647:	
   143620:  648:	while (drawntreasure <= 2) {
    10000:  648-block  0
unconditional  0 taken 10000
   143620:  648-block  1
branch  1 taken 133620
branch  2 taken 10000 (fallthrough)
   133620:  649:		if (state->deckCount[currentPlayer] <= 1) {//if the deck is empty we need to shuffle discard and add to deck
   133620:  649-block  0
branch  0 taken 13334 (fallthrough)
branch  1 taken 120286
    13334:  650:			shuffle(currentPlayer, state);
    13334:  650-block  0
call    0 returned 13334
unconditional  1 taken 13334
        -:  651:		}
   133620:  652:		drawCard(currentPlayer, state);
   133620:  652-block  0
call    0 returned 133620
   133620:  653:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
   133620:  654:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 120310 (fallthrough)
branch  1 taken 13310
   120310:  654-block  0
branch  2 taken 107001 (fallthrough)
branch  3 taken 13309
   107001:  654-block  1
branch  4 taken 3381 (fallthrough)
branch  5 taken 103620
    30000:  655:			drawntreasure++;
    30000:  655-block  0
unconditional  0 taken 30000
        -:  656:		else {
   103620:  657:			temphand[temphandCounter] = cardDrawn;
   103620:  658:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   103620:  659:			temphandCounter++;
   103620:  659-block  0
unconditional  0 taken 103620
        -:  660:		}
        -:  661:	}
   113620:  662:	while (temphandCounter - 1 >= 0) {
    10000:  662-block  0
unconditional  0 taken 10000
   113620:  662-block  1
branch  1 taken 103620
branch  2 taken 10000 (fallthrough)
   103620:  663:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[temphandCounter - 1]; // discard all cards in play that have been drawn
   103620:  664:		temphandCounter = temphandCounter - 1;
   103620:  664-block  0
unconditional  0 taken 103620
        -:  665:	}
    10000:  666:	return 0;
    10000:  666-block  0
unconditional  0 taken 10000
        -:  667:}
        -:  668:
function smithyEffect called 5 returned 100% blocks executed 100%
        5:  669:int smithyEffect(int currentPlayer, struct gameState *state, int handPos, int i) {
        5:  669-block  0
        -:  670:	
        -:  671:	//+3 Cards
       15:  672:	for (i = 1; i < 3; i++)
        5:  672-block  0
unconditional  0 taken 5
unconditional  1 taken 10
       15:  672-block  1
branch  2 taken 10
branch  3 taken 5 (fallthrough)
        -:  673:	{
       10:  674:		drawCard(currentPlayer, state);
       10:  674-block  0
call    0 returned 10
        -:  675:	}
        -:  676:
        -:  677:	//discard card from hand
        -:  678:	//discardCard(handPos, currentPlayer, state, 0);
        5:  679:	return 0;
        5:  679-block  0
unconditional  0 taken 5
        -:  680:}
        -:  681:
function outpostEffect called 20000 returned 100% blocks executed 100%
    20000:  682:int outpostEffect(int currentPlayer, struct gameState *state, int handPos) {
    20000:  682-block  0
        -:  683:	
        -:  684:	//set outpost flag
    20000:  685:	state->outpostPlayed++;
        -:  686:
        -:  687:	//discard card
        -:  688:	//discardCard(handPos, currentPlayer, state, 0);
    20000:  689:	return 0;
    20000:  689-block  0
unconditional  0 taken 20000
        -:  690:}
        -:  691:
function villageEffect called 10000 returned 100% blocks executed 100%
    10000:  692:int villageEffect(int currentPlayer, struct gameState *state, int handPos) {
    10000:  692-block  0
        -:  693:	
        -:  694:	//+1 Card
    10000:  695:	drawCard(currentPlayer, state);
    10000:  695-block  0
call    0 returned 10000
        -:  696:
        -:  697:	//+2 Actions
    10000:  698:	state->numActions = state->numActions + 3;
        -:  699:
        -:  700:	//discard played card from hand
    10000:  701:	discardCard(handPos, currentPlayer, state, 1);
call    0 returned 10000
    10000:  702:	return 0;
unconditional  0 taken 10000
        -:  703:}
        -:  704:
function embargoEffect called 0 returned 0% blocks executed 0%
    #####:  705:int embargoEffect(int currentPlayer, struct gameState *state, int handPos, int choice1) {
    $$$$$:  705-block  0
        -:  706:	//+2 Coins
    #####:  707:	state->coins = state->coins + 2;
        -:  708:
        -:  709:	//see if selected pile is in play
    #####:  710:	if (state->supplyCount[choice1] == -1)
    $$$$$:  710-block  0
branch  0 never executed
branch  1 never executed
        -:  711:	{
    #####:  712:		return -1;
    $$$$$:  712-block  0
unconditional  0 never executed
        -:  713:	}
        -:  714:
        -:  715:	//add embargo token to selected supply pile
    #####:  716:	state->embargoTokens[choice1]++;
        -:  717:
        -:  718:	//trash card
    #####:  719:	discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  719-block  0
call    0 never executed
    #####:  720:	return 0;
unconditional  0 never executed
        -:  721:}
        -:  722:
        -:  723:
        -:  724:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  725:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
    $$$$$:  725-block  0
        -:  726:{
        -:  727:  int i;
        -:  728:  int j;
        -:  729:  int k;
        -:  730:  int x;
        -:  731:  int index;
    #####:  732:  int currentPlayer = whoseTurn(state);
    $$$$$:  732-block  0
call    0 never executed
    #####:  733:  int nextPlayer = currentPlayer + 1;
        -:  734:
    #####:  735:  int tributeRevealedCards[2] = {-1, -1};
        -:  736:  int temphand[MAX_HAND];// moved above the if statement
    #####:  737:  int drawntreasure=0;
        -:  738:  int cardDrawn;
    #####:  739:  int z = 0;// this is the counter for the temp hand
    #####:  740:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  741:    nextPlayer = 0;
    $$$$$:  741-block  0
unconditional  0 never executed
        -:  742:  }
        -:  743:  
        -:  744:	
        -:  745:  //uses switch to select card and perform actions
    #####:  746:  switch( card ) 
    $$$$$:  746-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  747:    {
        -:  748:    case adventurer:
    #####:  749:		return adventurerEffect(drawntreasure, state, currentPlayer, cardDrawn, z, temphand);
    $$$$$:  749-block  0
call    0 never executed
unconditional  1 never executed
        -:  750:			
        -:  751:    case council_room:
        -:  752:      //+4 Cards
    #####:  753:      for (i = 0; i < 4; i++)
    $$$$$:  753-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  753-block  1
branch  2 never executed
branch  3 never executed
        -:  754:	{
    #####:  755:	  drawCard(currentPlayer, state);
    $$$$$:  755-block  0
call    0 never executed
        -:  756:	}
        -:  757:			
        -:  758:      //+1 Buy
    #####:  759:      state->numBuys++;
        -:  760:			
        -:  761:      //Each other player draws a card
    #####:  762:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  762-block  0
unconditional  0 never executed
    $$$$$:  762-block  1
unconditional  1 never executed
    $$$$$:  762-block  2
branch  2 never executed
branch  3 never executed
        -:  763:	{
    #####:  764:	  if ( i != currentPlayer )
    $$$$$:  764-block  0
branch  0 never executed
branch  1 never executed
        -:  765:	    {
    #####:  766:	      drawCard(i, state);
    $$$$$:  766-block  0
call    0 never executed
unconditional  1 never executed
        -:  767:	    }
        -:  768:	}
        -:  769:			
        -:  770:      //put played card in played card pile
    #####:  771:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  771-block  0
call    0 never executed
        -:  772:			
    #####:  773:      return 0;
unconditional  0 never executed
        -:  774:			
        -:  775:    case feast:
        -:  776:      //gain card with cost up to 5
        -:  777:      //Backup hand
    #####:  778:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  778-block  0
unconditional  0 never executed
    $$$$$:  778-block  1
unconditional  1 never executed
    $$$$$:  778-block  2
branch  2 never executed
branch  3 never executed
    #####:  779:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  780:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  781:      }
        -:  782:      //Backup hand
        -:  783:
        -:  784:      //Update Coins for Buy
    #####:  785:      updateCoins(currentPlayer, state, 5);
    $$$$$:  785-block  0
call    0 never executed
    #####:  786:      x = 1;//Condition to loop on
    #####:  787:      while( x == 1) {//Buy one card
unconditional  0 never executed
    $$$$$:  787-block  0
branch  1 never executed
branch  2 never executed
    #####:  788:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  788-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  789:	  if (DEBUG)
        -:  790:	    printf("None of that card left, sorry!\n");
        -:  791:
        -:  792:	  if (DEBUG){
        -:  793:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  794:	  }
        -:  795:	}
    #####:  796:	else if (state->coins < getCost(choice1)){
    $$$$$:  796-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  797:	  printf("That card is too expensive!\n");
    $$$$$:  797-block  0
call    0 never executed
unconditional  1 never executed
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  801:	  }
        -:  802:	}
        -:  803:	else{
        -:  804:
        -:  805:	  if (DEBUG){
        -:  806:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  807:	  }
        -:  808:
    #####:  809:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  809-block  0
call    0 never executed
    #####:  810:	  x = 0;//No more buying cards
unconditional  0 never executed
        -:  811:
        -:  812:	  if (DEBUG){
        -:  813:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  814:	  }
        -:  815:
        -:  816:	}
        -:  817:      }     
        -:  818:
        -:  819:      //Reset Hand
    #####:  820:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  820-block  0
unconditional  0 never executed
    $$$$$:  820-block  1
unconditional  1 never executed
    $$$$$:  820-block  2
branch  2 never executed
branch  3 never executed
    #####:  821:	state->hand[currentPlayer][i] = temphand[i];
    #####:  822:	temphand[i] = -1;
        -:  823:      }
        -:  824:      //Reset Hand
        -:  825:      			
    #####:  826:      return 0;
    $$$$$:  826-block  0
unconditional  0 never executed
        -:  827:			
        -:  828:    case gardens:
    #####:  829:      return -1;
    $$$$$:  829-block  0
unconditional  0 never executed
        -:  830:			
        -:  831:    case mine:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  834-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  834-block  1
branch  2 never executed
branch  3 never executed
        -:  835:	{
    #####:  836:	  return -1;
    $$$$$:  836-block  0
unconditional  0 never executed
        -:  837:	}
        -:  838:		
    #####:  839:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  839-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  839-block  1
branch  2 never executed
branch  3 never executed
        -:  840:	{
    #####:  841:	  return -1;
    $$$$$:  841-block  0
unconditional  0 never executed
        -:  842:	}
        -:  843:
    #####:  844:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  844-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  845:	{
    #####:  846:	  return -1;
    $$$$$:  846-block  0
unconditional  0 never executed
        -:  847:	}
        -:  848:
    #####:  849:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  849-block  0
call    0 never executed
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  855-block  0
unconditional  1 never executed
    $$$$$:  855-block  1
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  857-block  0
branch  0 never executed
branch  1 never executed
        -:  858:	    {
    #####:  859:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  859-block  0
call    0 never executed
    #####:  860:	      break;
unconditional  0 never executed
        -:  861:	    }
        -:  862:	}
        -:  863:			
    #####:  864:      return 0;
    $$$$$:  864-block  0
unconditional  0 never executed
        -:  865:			
        -:  866:    case remodel:
    #####:  867:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  868:
    #####:  869:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  869-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  870:	{
    #####:  871:	  return -1;
    $$$$$:  871-block  0
unconditional  0 never executed
        -:  872:	}
        -:  873:
    #####:  874:      gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  874-block  0
call    0 never executed
        -:  875:
        -:  876:      //discard card from hand
    #####:  877:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  878:
        -:  879:      //discard trashed card
    #####:  880:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  880-block  0
unconditional  1 never executed
    $$$$$:  880-block  1
branch  2 never executed
branch  3 never executed
        -:  881:	{
    #####:  882:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  882-block  0
branch  0 never executed
branch  1 never executed
        -:  883:	    {
    #####:  884:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  884-block  0
call    0 never executed
    #####:  885:	      break;
unconditional  0 never executed
        -:  886:	    }
        -:  887:	}
        -:  888:
        -:  889:
    #####:  890:      return 0;
    $$$$$:  890-block  0
unconditional  0 never executed
        -:  891:		
        -:  892:    case smithy:
        -:  893:
    #####:  894:		return smithyEffect(currentPlayer, state, handPos, i);
    $$$$$:  894-block  0
call    0 never executed
unconditional  1 never executed
        -:  895:		
        -:  896:    case village:
        -:  897:
    #####:  898:		return villageEffect(currentPlayer, state, handPos);
    $$$$$:  898-block  0
call    0 never executed
unconditional  1 never executed
        -:  899:		
        -:  900:    case baron:
    #####:  901:      state->numBuys++;//Increase buys by 1!
    #####:  902:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  902-block  0
branch  0 never executed
branch  1 never executed
    #####:  903:	int p = 0;//Iterator for hand!
    #####:  904:	int card_not_discarded = 1;//Flag for discard set!
    #####:  905:	while(card_not_discarded){
    $$$$$:  905-block  0
unconditional  0 never executed
    $$$$$:  905-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  905-block  2
unconditional  3 never executed
    #####:  906:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  906-block  0
branch  0 never executed
branch  1 never executed
    #####:  907:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  908:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  909:	    state->discardCount[currentPlayer]++;
    #####:  910:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  910-block  0
unconditional  0 never executed
    $$$$$:  910-block  1
unconditional  1 never executed
    $$$$$:  910-block  2
branch  2 never executed
branch  3 never executed
    #####:  911:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  912:	    }
    #####:  913:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  914:	    state->handCount[currentPlayer]--;
    #####:  915:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  915-block  0
unconditional  0 never executed
        -:  916:	  }
    #####:  917:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  917-block  0
branch  0 never executed
branch  1 never executed
        -:  918:	    if(DEBUG) {
        -:  919:	      printf("No estate cards in your hand, invalid choice\n");
        -:  920:	      printf("Must gain an estate if there are any\n");
        -:  921:	    }
    #####:  922:	    if (supplyCount(estate, state) > 0){
    $$$$$:  922-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  923-block  0
call    0 never executed
    #####:  924:	      state->supplyCount[estate]--;//Decrement estates
    #####:  925:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:		isGameOver(state);
    $$$$$:  926-block  0
call    0 never executed
unconditional  1 never executed
        -:  927:	      }
        -:  928:	    }
    #####:  929:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  929-block  0
unconditional  0 never executed
        -:  930:	  }
        -:  931:			    
        -:  932:	  else{
    #####:  933:	    p++;//Next card
    $$$$$:  933-block  0
unconditional  0 never executed
        -:  934:	  }
        -:  935:	}
        -:  936:      }
        -:  937:			    
        -:  938:      else{
    #####:  939:	if (supplyCount(estate, state) > 0){
    $$$$$:  939-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  940:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  940-block  0
call    0 never executed
    #####:  941:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  942:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  943:	    isGameOver(state);
    $$$$$:  943-block  0
call    0 never executed
unconditional  1 never executed
        -:  944:	  }
        -:  945:	}
        -:  946:      }
        -:  947:	    
        -:  948:      
    #####:  949:      return 0;
    $$$$$:  949-block  0
unconditional  0 never executed
        -:  950:		
        -:  951:    case great_hall:
        -:  952:      //+1 Card
    #####:  953:      drawCard(currentPlayer, state);
    $$$$$:  953-block  0
call    0 never executed
        -:  954:			
        -:  955:      //+1 Actions
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  960:      return 0;
unconditional  0 never executed
        -:  961:		
        -:  962:    case minion:
        -:  963:      //+1 action
    #####:  964:      state->numActions++;
        -:  965:			
        -:  966:      //discard card from hand
    #####:  967:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  967-block  0
call    0 never executed
        -:  968:			
    #####:  969:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  970:	{
    #####:  971:	  state->coins = state->coins + 2;
    $$$$$:  971-block  0
unconditional  0 never executed
        -:  972:	}
        -:  973:			
    #####:  974:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  974-block  0
branch  0 never executed
branch  1 never executed
        -:  975:	{
        -:  976:	  //discard hand
    #####:  977:	  while(numHandCards(state) > 0)
    $$$$$:  977-block  0
unconditional  0 never executed
    $$$$$:  977-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  978:	    {
    #####:  979:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  979-block  0
call    0 never executed
unconditional  1 never executed
        -:  980:	    }
        -:  981:				
        -:  982:	  //draw 4
    #####:  983:	  for (i = 0; i < 4; i++)
    $$$$$:  983-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  983-block  1
branch  2 never executed
branch  3 never executed
        -:  984:	    {
    #####:  985:	      drawCard(currentPlayer, state);
    $$$$$:  985-block  0
call    0 never executed
        -:  986:	    }
        -:  987:				
        -:  988:	  //other players discard hand and redraw if hand size > 4
    #####:  989:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$:  989-block  0
unconditional  0 never executed
    $$$$$:  989-block  1
unconditional  1 never executed
    $$$$$:  989-block  2
branch  2 never executed
branch  3 never executed
        -:  990:	    {
    #####:  991:	      if (i != currentPlayer)
    $$$$$:  991-block  0
branch  0 never executed
branch  1 never executed
        -:  992:		{
    #####:  993:		  if ( state->handCount[i] > 4 )
    $$$$$:  993-block  0
branch  0 never executed
branch  1 never executed
        -:  994:		    {
        -:  995:		      //discard hand
    #####:  996:		      while( state->handCount[i] > 0 )
    $$$$$:  996-block  0
unconditional  0 never executed
    $$$$$:  996-block  1
branch  1 never executed
branch  2 never executed
        -:  997:			{
    #####:  998:			  discardCard(handPos, i, state, 0);
    $$$$$:  998-block  0
call    0 never executed
unconditional  1 never executed
        -:  999:			}
        -: 1000:							
        -: 1001:		      //draw 4
    #####: 1002:		      for (j = 0; j < 4; j++)
    $$$$$: 1002-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1002-block  1
branch  2 never executed
branch  3 never executed
        -: 1003:			{
    #####: 1004:			  drawCard(i, state);
    $$$$$: 1004-block  0
call    0 never executed
        -: 1005:			}
        -: 1006:		    }
        -: 1007:		}
        -: 1008:	    }
        -: 1009:				
        -: 1010:	}
    #####: 1011:      return 0;
    $$$$$: 1011-block  0
unconditional  0 never executed
        -: 1012:		
        -: 1013:    case steward:
    #####: 1014:      if (choice1 == 1)
    $$$$$: 1014-block  0
branch  0 never executed
branch  1 never executed
        -: 1015:	{
        -: 1016:	  //+2 cards
    #####: 1017:	  drawCard(currentPlayer, state);
    $$$$$: 1017-block  0
call    0 never executed
    #####: 1018:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1019:	}
    #####: 1020:      else if (choice1 == 2)
    $$$$$: 1020-block  0
branch  0 never executed
branch  1 never executed
        -: 1021:	{
        -: 1022:	  //+2 coins
    #####: 1023:	  state->coins = state->coins + 2;
    $$$$$: 1023-block  0
unconditional  0 never executed
        -: 1024:	}
        -: 1025:      else
        -: 1026:	{
        -: 1027:	  //trash 2 cards in hand
    #####: 1028:	  discardCard(choice2, currentPlayer, state, 1);
    $$$$$: 1028-block  0
call    0 never executed
    #####: 1029:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -: 1030:	}
        -: 1031:			
        -: 1032:      //discard card from hand
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1033-block  0
call    0 never executed
    #####: 1034:      return 0;
unconditional  0 never executed
        -: 1035:		
        -: 1036:    case tribute:
    #####: 1037:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1037-block  0
branch  0 never executed
branch  1 never executed
    #####: 1038:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1038-block  0
branch  0 never executed
branch  1 never executed
    #####: 1039:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1040:	  state->deckCount[nextPlayer]--;
    $$$$$: 1040-block  0
unconditional  0 never executed
        -: 1041:	}
    #####: 1042:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1042-block  0
branch  0 never executed
branch  1 never executed
    #####: 1043:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1044:	  state->discardCount[nextPlayer]--;
    $$$$$: 1044-block  0
unconditional  0 never executed
        -: 1045:	}
        -: 1046:	else{
        -: 1047:	  //No Card to Reveal
        -: 1048:	  if (DEBUG){
        -: 1049:	    printf("No cards to reveal\n");
        -: 1050:	  }
        -: 1051:	}
        -: 1052:      }
        -: 1053:	    
        -: 1054:      else{
    #####: 1055:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1055-block  0
branch  0 never executed
branch  1 never executed
    #####: 1056:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1056-block  0
unconditional  0 never executed
    $$$$$: 1056-block  1
unconditional  1 never executed
    $$$$$: 1056-block  2
branch  2 never executed
branch  3 never executed
    #####: 1057:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1058:	    state->deckCount[nextPlayer]++;
    #####: 1059:	    state->discard[nextPlayer][i] = -1;
    #####: 1060:	    state->discardCount[nextPlayer]--;
        -: 1061:	  }
        -: 1062:			    
    #####: 1063:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1063-block  0
call    0 never executed
unconditional  1 never executed
        -: 1064:	} 
    #####: 1065:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1066:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1067:	state->deckCount[nextPlayer]--;
    #####: 1068:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1069:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1070:	state->deckCount[nextPlayer]--;
    $$$$$: 1070-block  0
unconditional  0 never executed
        -: 1071:      }    
        -: 1072:		       
    #####: 1073:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1073-block  0
branch  0 never executed
branch  1 never executed
    #####: 1074:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1075:	state->playedCardCount++;
    #####: 1076:	tributeRevealedCards[1] = -1;
    $$$$$: 1076-block  0
unconditional  0 never executed
        -: 1077:      }
        -: 1078:
    #####: 1079:      for (i = 0; i <= 2; i ++){
    $$$$$: 1079-block  0
unconditional  0 never executed
    $$$$$: 1079-block  1
unconditional  1 never executed
    $$$$$: 1079-block  2
branch  2 never executed
branch  3 never executed
    #####: 1080:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1080-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1080-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1080-block  2
branch  4 never executed
branch  5 never executed
    #####: 1081:	  state->coins += 2;
    $$$$$: 1081-block  0
unconditional  0 never executed
        -: 1082:	}
        -: 1083:		    
    #####: 1084:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1084-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1084-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1084-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1084-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1084-block  4
branch  8 never executed
branch  9 never executed
    #####: 1085:	  drawCard(currentPlayer, state);
    $$$$$: 1085-block  0
call    0 never executed
    #####: 1086:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1087:	}
        -: 1088:	else{//Action Card
    #####: 1089:	  state->numActions = state->numActions + 2;
    $$$$$: 1089-block  0
unconditional  0 never executed
        -: 1090:	}
        -: 1091:      }
        -: 1092:	    
    #####: 1093:      return 0;
    $$$$$: 1093-block  0
unconditional  0 never executed
        -: 1094:		
        -: 1095:    case ambassador:
    #####: 1096:      j = 0;		//used to check if player has enough cards to discard
        -: 1097:
    #####: 1098:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1098-block  1
branch  2 never executed
branch  3 never executed
        -: 1099:	{
    #####: 1100:	  return -1;				
    $$$$$: 1100-block  0
unconditional  0 never executed
        -: 1101:	}
        -: 1102:
    #####: 1103:      if (choice1 == handPos)
    $$$$$: 1103-block  0
branch  0 never executed
branch  1 never executed
        -: 1104:	{
    #####: 1105:	  return -1;
    $$$$$: 1105-block  0
unconditional  0 never executed
        -: 1106:	}
        -: 1107:
    #####: 1108:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1108-block  0
unconditional  0 never executed
    $$$$$: 1108-block  1
unconditional  1 never executed
    $$$$$: 1108-block  2
branch  2 never executed
branch  3 never executed
        -: 1109:	{
    #####: 1110:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1110-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1110-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1110-block  2
branch  4 never executed
branch  5 never executed
        -: 1111:	    {
    #####: 1112:	      j++;
    $$$$$: 1112-block  0
unconditional  0 never executed
        -: 1113:	    }
        -: 1114:	}
    #####: 1115:      if (j < choice2)
    $$$$$: 1115-block  0
branch  0 never executed
branch  1 never executed
        -: 1116:	{
    #####: 1117:	  return -1;				
    $$$$$: 1117-block  0
unconditional  0 never executed
        -: 1118:	}
        -: 1119:
        -: 1120:      if (DEBUG) 
        -: 1121:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1122:
        -: 1123:      //increase supply count for choosen card by amount being discarded
    #####: 1124:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1125:			
        -: 1126:      //each other player gains a copy of revealed card
    #####: 1127:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1127-block  0
unconditional  0 never executed
    $$$$$: 1127-block  1
unconditional  1 never executed
    $$$$$: 1127-block  2
branch  2 never executed
branch  3 never executed
        -: 1128:	{
    #####: 1129:	  if (i != currentPlayer)
    $$$$$: 1129-block  0
branch  0 never executed
branch  1 never executed
        -: 1130:	    {
    #####: 1131:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1131-block  0
call    0 never executed
unconditional  1 never executed
        -: 1132:	    }
        -: 1133:	}
        -: 1134:
        -: 1135:      //discard played card from hand
    #####: 1136:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1136-block  0
call    0 never executed
        -: 1137:
        -: 1138:      //trash copies of cards returned to supply
    #####: 1139:      for (j = 0; j < choice2; j++)
unconditional  0 never executed
    $$$$$: 1139-block  0
unconditional  1 never executed
    $$$$$: 1139-block  1
branch  2 never executed
branch  3 never executed
        -: 1140:	{
    #####: 1141:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1141-block  0
unconditional  0 never executed
    $$$$$: 1141-block  1
unconditional  1 never executed
    $$$$$: 1141-block  2
branch  2 never executed
branch  3 never executed
        -: 1142:	    {
    #####: 1143:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1143-block  0
branch  0 never executed
branch  1 never executed
        -: 1144:		{
    #####: 1145:		  discardCard(i, currentPlayer, state, 1);
    $$$$$: 1145-block  0
call    0 never executed
    #####: 1146:		  break;
unconditional  0 never executed
        -: 1147:		}
        -: 1148:	    }
        -: 1149:	}			
        -: 1150:
    #####: 1151:      return 0;
    $$$$$: 1151-block  0
unconditional  0 never executed
        -: 1152:		
        -: 1153:    case cutpurse:
        -: 1154:
    #####: 1155:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1155-block  0
call    0 never executed
    #####: 1156:      for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
    $$$$$: 1156-block  0
unconditional  1 never executed
    $$$$$: 1156-block  1
branch  2 never executed
branch  3 never executed
        -: 1157:	{
    #####: 1158:	  if (i != currentPlayer)
    $$$$$: 1158-block  0
branch  0 never executed
branch  1 never executed
        -: 1159:	    {
    #####: 1160:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1160-block  0
unconditional  0 never executed
    $$$$$: 1160-block  1
unconditional  1 never executed
    $$$$$: 1160-block  2
branch  2 never executed
branch  3 never executed
        -: 1161:		{
    #####: 1162:		  if (state->hand[i][j] == copper)
    $$$$$: 1162-block  0
branch  0 never executed
branch  1 never executed
        -: 1163:		    {
    #####: 1164:		      discardCard(j, i, state, 0);
    $$$$$: 1164-block  0
call    0 never executed
    #####: 1165:		      break;
unconditional  0 never executed
        -: 1166:		    }
    #####: 1167:		  if (j == state->handCount[i])
    $$$$$: 1167-block  0
branch  0 never executed
branch  1 never executed
        -: 1168:		    {
    #####: 1169:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1169-block  0
unconditional  0 never executed
    $$$$$: 1169-block  1
unconditional  1 never executed
    $$$$$: 1169-block  2
branch  2 never executed
branch  3 never executed
        -: 1170:			{
        -: 1171:			  if (DEBUG)
        -: 1172:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1173:			}	
    #####: 1174:		      break;
    $$$$$: 1174-block  0
unconditional  0 never executed
        -: 1175:		    }		
        -: 1176:		}
        -: 1177:					
        -: 1178:	    }
        -: 1179:				
        -: 1180:	}				
        -: 1181:
        -: 1182:      //discard played card from hand
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1183-block  0
call    0 never executed
        -: 1184:
    #####: 1185:      return 0;
unconditional  0 never executed
        -: 1186:
        -: 1187:		
        -: 1188:    case embargo: 
    #####: 1189:		return embargoEffect(currentPlayer, state, handPos, choice1);
    $$$$$: 1189-block  0
call    0 never executed
unconditional  1 never executed
        -: 1190:		
        -: 1191:    case outpost:
    #####: 1192:		return outpostEffect(currentPlayer, state, handPos);
    $$$$$: 1192-block  0
call    0 never executed
unconditional  1 never executed
        -: 1193:		
        -: 1194:    case salvager:
        -: 1195:      //+1 buy
    #####: 1196:      state->numBuys++;
        -: 1197:			
    #####: 1198:      if (choice1)
    $$$$$: 1198-block  0
branch  0 never executed
branch  1 never executed
        -: 1199:	{
        -: 1200:	  //gain coins equal to trashed card
    #####: 1201:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1201-block  0
call    0 never executed
call    1 never executed
        -: 1202:	  //trash card
    #####: 1203:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
unconditional  1 never executed
        -: 1204:	}
        -: 1205:			
        -: 1206:      //discard card
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1207-block  0
call    0 never executed
    #####: 1208:      return 0;
unconditional  0 never executed
        -: 1209:		
        -: 1210:    case sea_hag:
    #####: 1211:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1211-block  0
unconditional  0 never executed
    $$$$$: 1211-block  1
unconditional  1 never executed
    $$$$$: 1211-block  2
branch  2 never executed
branch  3 never executed
    #####: 1212:	if (i != currentPlayer){
    $$$$$: 1212-block  0
branch  0 never executed
branch  1 never executed
    #####: 1213:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1214:	  state->discardCount[i]++;
    #####: 1215:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1215-block  0
unconditional  0 never executed
        -: 1216:	}
        -: 1217:      }
    #####: 1218:      return 0;
    $$$$$: 1218-block  0
unconditional  0 never executed
        -: 1219:		
        -: 1220:    case treasure_map:
        -: 1221:      //search hand for another treasure_map
    #####: 1222:      index = -1;
    #####: 1223:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1223-block  0
unconditional  0 never executed
    $$$$$: 1223-block  1
unconditional  1 never executed
    $$$$$: 1223-block  2
branch  2 never executed
branch  3 never executed
        -: 1224:	{
    #####: 1225:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1225-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1225-block  1
branch  2 never executed
branch  3 never executed
        -: 1226:	    {
    #####: 1227:	      index = i;
    #####: 1228:	      break;
    $$$$$: 1228-block  0
unconditional  0 never executed
        -: 1229:	    }
        -: 1230:	}
    #####: 1231:      if (index > -1)
    $$$$$: 1231-block  0
branch  0 never executed
branch  1 never executed
        -: 1232:	{
        -: 1233:	  //trash both treasure cards
    #####: 1234:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1234-block  0
call    0 never executed
    #####: 1235:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1236:
        -: 1237:	  //gain 4 Gold cards
    #####: 1238:	  for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1238-block  0
branch  2 never executed
branch  3 never executed
        -: 1239:	    {
    #####: 1240:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1240-block  0
call    0 never executed
        -: 1241:	    }
        -: 1242:				
        -: 1243:	  //return success
    #####: 1244:	  return 1;
    $$$$$: 1244-block  0
unconditional  0 never executed
        -: 1245:	}
        -: 1246:			
        -: 1247:      //no second treasure_map found in hand
    #####: 1248:      return -1;
    $$$$$: 1248-block  0
unconditional  0 never executed
        -: 1249:    }
        -: 1250:	
    #####: 1251:  return -1;
    $$$$$: 1251-block  0
unconditional  0 never executed
    $$$$$: 1251-block  1
unconditional  1 never executed
        -: 1252:}
        -: 1253:
function discardCard called 10000 returned 100% blocks executed 67%
    10000: 1254:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
    10000: 1254-block  0
        -: 1255:{
        -: 1256:	
        -: 1257:  //if card is not trashed, added to Played pile 
    10000: 1258:  if (trashFlag < 1)
    10000: 1258-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10000
        -: 1259:    {
        -: 1260:      //add card to played pile
    #####: 1261:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1262:      state->playedCardCount++;
    $$$$$: 1262-block  0
unconditional  0 never executed
        -: 1263:    }
        -: 1264:	
        -: 1265:  //set played card to -1
    10000: 1266:  state->hand[currentPlayer][handPos] = -1;
        -: 1267:	
        -: 1268:  //remove card from player's hand
    10000: 1269:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
    10000: 1269-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10000
        -: 1270:    {
        -: 1271:      //reduce number of cards in hand
    #####: 1272:      state->handCount[currentPlayer]--;
    $$$$$: 1272-block  0
unconditional  0 never executed
        -: 1273:    }
    10000: 1274:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
    10000: 1274-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10000
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
    $$$$$: 1277-block  0
unconditional  0 never executed
        -: 1278:    }
        -: 1279:  else 	
        -: 1280:    {
        -: 1281:      //replace discarded card with last card in hand
    10000: 1282:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1283:      //set last card to -1
    10000: 1284:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1285:      //reduce number of cards in hand
    10000: 1286:      state->handCount[currentPlayer]--;
    10000: 1286-block  0
unconditional  0 taken 10000
        -: 1287:    }
        -: 1288:	
    10000: 1289:  return 0;
    10000: 1289-block  0
unconditional  0 taken 10000
        -: 1290:}
        -: 1291:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1292:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
    $$$$$: 1292-block  0
        -: 1293:{
        -: 1294:  //Note: supplyPos is enum of choosen card
        -: 1295:	
        -: 1296:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1297:  if ( supplyCount(supplyPos, state) < 1 )
    $$$$$: 1297-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1298:    {
    #####: 1299:      return -1;
    $$$$$: 1299-block  0
unconditional  0 never executed
        -: 1300:    }
        -: 1301:	
        -: 1302:  //added card for [whoseTurn] current player:
        -: 1303:  // toFlag = 0 : add to discard
        -: 1304:  // toFlag = 1 : add to deck
        -: 1305:  // toFlag = 2 : add to hand
        -: 1306:
    #####: 1307:  if (toFlag == 1)
    $$$$$: 1307-block  0
branch  0 never executed
branch  1 never executed
        -: 1308:    {
    #####: 1309:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1310:      state->deckCount[player]++;
    $$$$$: 1310-block  0
unconditional  0 never executed
        -: 1311:    }
    #####: 1312:  else if (toFlag == 2)
    $$$$$: 1312-block  0
branch  0 never executed
branch  1 never executed
        -: 1313:    {
    #####: 1314:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1315:      state->handCount[player]++;
    $$$$$: 1315-block  0
unconditional  0 never executed
        -: 1316:    }
        -: 1317:  else
        -: 1318:    {
    #####: 1319:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1320:      state->discardCount[player]++;
    $$$$$: 1320-block  0
unconditional  0 never executed
        -: 1321:    }
        -: 1322:	
        -: 1323:  //decrease number in supply pile
    #####: 1324:  state->supplyCount[supplyPos]--;
        -: 1325:	 
    #####: 1326:  return 0;
    $$$$$: 1326-block  0
unconditional  0 never executed
        -: 1327:}
        -: 1328:
function updateCoins called 68 returned 100% blocks executed 100%
       68: 1329:int updateCoins(int player, struct gameState *state, int bonus)
       68: 1329-block  0
        -: 1330:{
        -: 1331:  int i;
        -: 1332:	
        -: 1333:  //reset coin count
       68: 1334:  state->coins = 0;
        -: 1335:
        -: 1336:  //add coins for each Treasure card in player's hand
      398: 1337:  for (i = 0; i < state->handCount[player]; i++)
       68: 1337-block  0
unconditional  0 taken 68
      330: 1337-block  1
unconditional  1 taken 330
      398: 1337-block  2
branch  2 taken 330
branch  3 taken 68 (fallthrough)
        -: 1338:    {
      330: 1339:      if (state->hand[player][i] == copper)
      330: 1339-block  0
branch  0 taken 237 (fallthrough)
branch  1 taken 93
        -: 1340:	{
      237: 1341:	  state->coins += 1;
      237: 1341-block  0
unconditional  0 taken 237
        -: 1342:	}
       93: 1343:      else if (state->hand[player][i] == silver)
       93: 1343-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 84
        -: 1344:	{
        9: 1345:	  state->coins += 2;
        9: 1345-block  0
unconditional  0 taken 9
        -: 1346:	}
       84: 1347:      else if (state->hand[player][i] == gold)
       84: 1347-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 76
        -: 1348:	{
        8: 1349:	  state->coins += 3;
        8: 1349-block  0
unconditional  0 taken 8
        -: 1350:	}	
        -: 1351:    }	
        -: 1352:
        -: 1353:  //add bonus
       68: 1354:  state->coins += bonus;
        -: 1355:
       68: 1356:  return 0;
       68: 1356-block  0
unconditional  0 taken 68
        -: 1357:}
        -: 1358:
        -: 1359:
        -: 1360://end of dominion.c
        -: 1361:


TESTING ADVENTUREREFFECT() CARD EFFECT FUNCTION

TEST 1: NO TREAUSRE IN HAND/DECK/DISCARD
----TEST FAILED----  THE FUNCTION DID NOT RETURN PROPERLY

TEST 2: ONE TREASURE IN DECK
----TEST PASSED----  ONE TREASURE FOUND AND PROPERLY ADDED

TEST 3: TWO TREASURE IN DECK - FIRST TWO CARDS
----TEST FAILED----  THE FUNCTION DID NOT RETURN PROPERLY

TEST 4: THREE TREASURES IN DECK
----TEST FAILED----  THE FUNCTION DID NOT RETURN PROPERLY

TEST 5: TREASURES ONLY IN THE DISCARD PILE  

----TEST FAILED----  THE FUNCTION DID NOT RETURN PROPERLY

TEST 6: CALLING THE FUNCTION DOES NOT CHANGE THE SUPPLY COUNT
----TEST PASSED----  THE SUPPLY COUNT DID NOT CHANGE
NOT ALL TESTS PASSED. NUMBER OF FAILS: 4
Function 'updateCoins'
Lines executed:100.00% of 11
No branches
No calls

Function 'gainCard'
Lines executed:0.00% of 13
No branches
No calls

Function 'discardCard'
Lines executed:69.23% of 13
No branches
No calls

Function 'cardEffect'
Lines executed:0.00% of 210
No branches
No calls

Function 'embargoEffect'
Lines executed:0.00% of 7
No branches
No calls

Function 'villageEffect'
Lines executed:100.00% of 5
No branches
No calls

Function 'outpostEffect'
Lines executed:100.00% of 3
No branches
No calls

Function 'smithyEffect'
Lines executed:100.00% of 4
No branches
No calls

Function 'adventurerEffect'
Lines executed:100.00% of 15
No branches
No calls

Function 'getCost'
Lines executed:0.00% of 30
No branches
No calls

Function 'drawCard'
Lines executed:100.00% of 22
No branches
No calls

Function 'getWinners'
Lines executed:0.00% of 24
No branches
No calls

Function 'scoreFor'
Lines executed:0.00% of 24
No branches
No calls

Function 'isGameOver'
Lines executed:90.00% of 10
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 20
No branches
No calls

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 9
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
No calls

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
No calls

Function 'buyCard'
Lines executed:0.00% of 13
No branches
No calls

Function 'playCard'
Lines executed:0.00% of 14
No branches
No calls

Function 'shuffle'
Lines executed:100.00% of 16
No branches
No calls

Function 'initializeGame'
Lines executed:96.77% of 62
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
No branches
No calls

File 'dominion.c'
Lines executed:31.29% of 556
Branches executed:26.86% of 417
Taken at least once:25.18% of 417
Calls executed:15.05% of 93
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:10
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 9730766 returned 100% blocks executed 100%
  9730766:    8:int compare(const void* a, const void* b) {
  9730766:    8-block  0
  9730766:    9:  if (*(int*)a > *(int*)b)
  9730766:    9-block  0
branch  0 taken 4863001 (fallthrough)
branch  1 taken 4867765
  4863001:   10:    return 1;
  4863001:   10-block  0
unconditional  0 taken 4863001
  4867765:   11:  if (*(int*)a < *(int*)b)
  4867765:   11-block  0
branch  0 taken 1719970 (fallthrough)
branch  1 taken 3147795
  1719970:   12:    return -1;
  1719970:   12-block  0
unconditional  0 taken 1719970
  3147795:   13:  return 0;
  3147795:   13-block  0
unconditional  0 taken 3147795
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
unconditional  0 never executed
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
unconditional  0 never executed
        -:   35:}
        -:   36:
function initializeGame called 40037 returned 100% blocks executed 97%
    40037:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
    40037:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    40037:   44:  SelectStream(1);
    40037:   44-block  0
call    0 returned 40037
    40037:   45:  PutSeed((long)randomSeed);
call    0 returned 40037
        -:   46:  
        -:   47:  //check number of players
    40037:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 40037 (fallthrough)
branch  1 taken 0
    40037:   48-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 40037
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
unconditional  0 never executed
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    40037:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    95125:   57:  for (i = 0; i < 10; i++)
    40037:   57-block  0
unconditional  0 taken 40037
    55088:   57-block  1
unconditional  1 taken 55088
    95125:   57-block  2
branch  2 taken 95067
branch  3 taken 58 (fallthrough)
        -:   58:    {
   931041:   59:      for (j = 0; j < 10; j++)
    95067:   59-block  0
unconditional  0 taken 95067
   835974:   59-block  1
unconditional  1 taken 835974
   931041:   59-block  2
branch  2 taken 875953
branch  3 taken 55088 (fallthrough)
        -:   60:        {
   875953:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
   875953:   61-block  0
branch  0 taken 780886 (fallthrough)
branch  1 taken 95067
   780886:   61-block  1
branch  2 taken 39979 (fallthrough)
branch  3 taken 740907
        -:   62:	    {
    39979:   63:	      return -1;
    39979:   63-block  0
unconditional  0 taken 39979
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       58:   73:  if (numPlayers == 2)
       58:   73-block  0
branch  0 taken 32 (fallthrough)
branch  1 taken 26
        -:   74:    {
       32:   75:      state->supplyCount[curse] = 10;
       32:   75-block  0
unconditional  0 taken 32
        -:   76:    }
       26:   77:  else if (numPlayers == 3)
       26:   77-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 16
        -:   78:    {
       10:   79:      state->supplyCount[curse] = 20;
       10:   79-block  0
unconditional  0 taken 10
        -:   80:    }
        -:   81:  else
        -:   82:    {
       16:   83:      state->supplyCount[curse] = 30;
       16:   83-block  0
unconditional  0 taken 16
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       58:   87:  if (numPlayers == 2)
       58:   87-block  0
branch  0 taken 32 (fallthrough)
branch  1 taken 26
        -:   88:    {
       32:   89:      state->supplyCount[estate] = 8;
       32:   90:      state->supplyCount[duchy] = 8;
       32:   91:      state->supplyCount[province] = 8;
       32:   91-block  0
unconditional  0 taken 32
        -:   92:    }
        -:   93:  else
        -:   94:    {
       26:   95:      state->supplyCount[estate] = 12;
       26:   96:      state->supplyCount[duchy] = 12;
       26:   97:      state->supplyCount[province] = 12;
       26:   97-block  0
unconditional  0 taken 26
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       58:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       58:  102:  state->supplyCount[silver] = 40;
       58:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1218:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
       58:  106-block  0
unconditional  0 taken 58
     1160:  106-block  1
unconditional  1 taken 1160
     1218:  106-block  2
branch  2 taken 1160
branch  3 taken 58 (fallthrough)
        -:  107:    {
     9596:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
     1160:  108-block  0
unconditional  0 taken 1160
     8436:  108-block  1
unconditional  1 taken 8436
     9596:  108-block  2
branch  2 taken 8990
branch  3 taken 606 (fallthrough)
        -:  109:	{
     8990:  110:	  if (kingdomCards[j] == i)
     8990:  110-block  0
branch  0 taken 554 (fallthrough)
branch  1 taken 8436
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      554:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
      554:  113-block  0
branch  0 taken 522 (fallthrough)
branch  1 taken 32
      522:  113-block  1
branch  2 taken 58 (fallthrough)
branch  3 taken 464
        -:  114:		{
      180:  115:		  if (numPlayers == 2){ 
       90:  115-block  0
branch  0 taken 38 (fallthrough)
branch  1 taken 52
       90:  115-block  1
unconditional  2 taken 90
       38:  116:		    state->supplyCount[i] = 8; 
       38:  116-block  0
unconditional  0 taken 38
        -:  117:		  }
       52:  118:		  else{ state->supplyCount[i] = 12; }
       52:  118-block  0
unconditional  0 taken 52
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      464:  122:		  state->supplyCount[i] = 10;
      464:  122-block  0
unconditional  0 taken 464
        -:  123:		}
      554:  124:	      break;
      554:  124-block  0
unconditional  0 taken 554
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     8436:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      216:  138:  for (i = 0; i < numPlayers; i++)
       58:  138-block  0
unconditional  0 taken 58
      158:  138-block  1
unconditional  1 taken 158
      216:  138-block  2
branch  2 taken 158
branch  3 taken 58 (fallthrough)
        -:  139:    {
      158:  140:      state->deckCount[i] = 0;
      632:  141:      for (j = 0; j < 3; j++)
      158:  141-block  0
unconditional  0 taken 158
      474:  141-block  1
unconditional  1 taken 474
      632:  141-block  2
branch  2 taken 474
branch  3 taken 158 (fallthrough)
        -:  142:	{
      474:  143:	  state->deck[i][j] = estate;
      474:  144:	  state->deckCount[i]++;
        -:  145:	}
     1264:  146:      for (j = 3; j < 10; j++)
      158:  146-block  0
unconditional  0 taken 158
     1106:  146-block  1
unconditional  1 taken 1106
     1264:  146-block  2
branch  2 taken 1106
branch  3 taken 158 (fallthrough)
        -:  147:	{
     1106:  148:	  state->deck[i][j] = copper;
     1106:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      216:  154:  for (i = 0; i < numPlayers; i++)
       58:  154-block  0
unconditional  0 taken 58
      158:  154-block  1
unconditional  1 taken 158
      216:  154-block  2
branch  2 taken 158
branch  3 taken 58 (fallthrough)
        -:  155:    {
      158:  156:      if ( shuffle(i, state) < 0 )
      158:  156-block  0
call    0 returned 158
branch  1 taken 0 (fallthrough)
branch  2 taken 158
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
unconditional  0 never executed
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      216:  163:  for (i = 0; i < numPlayers; i++)
       58:  163-block  0
unconditional  0 taken 58
      158:  163-block  1
unconditional  1 taken 158
      216:  163-block  2
branch  2 taken 158
branch  3 taken 58 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      158:  166:      state->handCount[i] = 0;
      158:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1624:  176:  for (i = 0; i <= treasure_map; i++)
       58:  176-block  0
unconditional  0 taken 58
     1566:  176-block  1
unconditional  1 taken 1566
     1624:  176-block  2
branch  2 taken 1566
branch  3 taken 58 (fallthrough)
        -:  177:    {
     1566:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       58:  182:  state->outpostPlayed = 0;
       58:  183:  state->phase = 0;
       58:  184:  state->numActions = 1;
       58:  185:  state->numBuys = 1;
       58:  186:  state->playedCardCount = 0;
       58:  187:  state->whoseTurn = 0;
       58:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      348:  192:  for (it = 0; it < 5; it++){
       58:  192-block  0
unconditional  0 taken 58
unconditional  1 taken 290
      348:  192-block  1
branch  2 taken 290
branch  3 taken 58 (fallthrough)
      290:  193:    drawCard(state->whoseTurn, state);
      290:  193-block  0
call    0 returned 290
        -:  194:  }
        -:  195:
       58:  196:  updateCoins(state->whoseTurn, state, 0);
       58:  196-block  0
call    0 returned 58
        -:  197:
       58:  198:  return 0;
unconditional  0 taken 58
        -:  199:}
        -:  200:
function shuffle called 21338 returned 100% blocks executed 100%
    21338:  201:int shuffle(int player, struct gameState *state) {
    21338:  201-block  0
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    21338:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    21338:  209:  if (state->deckCount[player] < 1)
    21338:  209-block  0
branch  0 taken 7833 (fallthrough)
branch  1 taken 13505
     7833:  210:    return -1;
     7833:  210-block  0
unconditional  0 taken 7833
    13505:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
    13505:  211-block  0
call    0 returned 13505
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  1479687:  214:  while (state->deckCount[player] > 0) {
unconditional  0 taken 13505
  1479687:  214-block  0
branch  1 taken 1466182
branch  2 taken 13505 (fallthrough)
  1466182:  215:    card = floor(Random() * state->deckCount[player]);
  1466182:  215-block  0
call    0 returned 1466182
  1466182:  216:    newDeck[newDeckPos] = state->deck[player][card];
  1466182:  217:    newDeckPos++;
102731134:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
unconditional  0 taken 1466182
101264952:  218-block  0
unconditional  1 taken 101264952
102731134:  218-block  1
branch  2 taken 101264952
branch  3 taken 1466182 (fallthrough)
101264952:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  1466182:  221:    state->deckCount[player]--;
  1466182:  221-block  0
unconditional  0 taken 1466182
        -:  222:  }
  1479687:  223:  for (i = 0; i < newDeckPos; i++) {
    13505:  223-block  0
unconditional  0 taken 13505
  1466182:  223-block  1
unconditional  1 taken 1466182
  1479687:  223-block  2
branch  2 taken 1466182
branch  3 taken 13505 (fallthrough)
  1466182:  224:    state->deck[player][i] = newDeck[i];
  1466182:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    21338:  228:  return 0;
    13505:  228-block  0
unconditional  0 taken 13505
    21338:  228-block  1
unconditional  1 taken 21338
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  231-block  0
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
unconditional  0 never executed
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
unconditional  0 never executed
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
unconditional  0 never executed
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
unconditional  0 never executed
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
unconditional  0 never executed
    $$$$$:  269-block  0
unconditional  1 never executed
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  272-block  0
    $$$$$:  272-block  1
unconditional  0 never executed
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    $$$$$:  282-block  0
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    $$$$$:  285-block  0
unconditional  0 never executed
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
unconditional  0 never executed
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
    $$$$$:  293-block  0
unconditional  0 never executed
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  297-block  0
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
unconditional  0 never executed
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    $$$$$:  308-block  0
unconditional  0 never executed
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    $$$$$:  311-block  0
    #####:  312:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  312-block  0
call    0 never executed
unconditional  1 never executed
        -:  313:}
        -:  314:
function handCard called 4 returned 100% blocks executed 100%
        4:  315:int handCard(int handPos, struct gameState *state) {
        4:  315-block  0
        4:  316:  int currentPlayer = whoseTurn(state);
        4:  316-block  0
call    0 returned 4
        4:  317:  return state->hand[currentPlayer][handPos];
unconditional  0 taken 4
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    $$$$$:  320-block  0
    #####:  321:  return state->supplyCount[card];
    $$$$$:  321-block  0
unconditional  0 never executed
        -:  322:}
        -:  323:
function fullDeckCount called 5 returned 100% blocks executed 100%
        5:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        5:  324-block  0
        -:  325:  int i;
        5:  326:  int count = 0;
        -:  327:
       22:  328:  for (i = 0; i < state->deckCount[player]; i++)
        5:  328-block  0
unconditional  0 taken 5
       17:  328-block  1
unconditional  1 taken 17
       22:  328-block  2
branch  2 taken 17
branch  3 taken 5 (fallthrough)
        -:  329:    {
       17:  330:      if (state->deck[player][i] == card) count++;
       17:  330-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 12
        5:  330-block  1
unconditional  2 taken 5
        -:  331:    }
        -:  332:
       22:  333:  for (i = 0; i < state->handCount[player]; i++)
        5:  333-block  0
unconditional  0 taken 5
       17:  333-block  1
unconditional  1 taken 17
       22:  333-block  2
branch  2 taken 17
branch  3 taken 5 (fallthrough)
        -:  334:    {
       17:  335:      if (state->hand[player][i] == card) count++;
       17:  335-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 9
        8:  335-block  1
unconditional  2 taken 8
        -:  336:    }
        -:  337:
       22:  338:  for (i = 0; i < state->discardCount[player]; i++)
        5:  338-block  0
unconditional  0 taken 5
       17:  338-block  1
unconditional  1 taken 17
       22:  338-block  2
branch  2 taken 17
branch  3 taken 5 (fallthrough)
        -:  339:    {
       17:  340:      if (state->discard[player][i] == card) count++;
       17:  340-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 10
        7:  340-block  1
unconditional  2 taken 7
        -:  341:    }
        -:  342:
        5:  343:  return count;
        5:  343-block  0
unconditional  0 taken 5
        -:  344:}
        -:  345:
function whoseTurn called 4 returned 100% blocks executed 100%
        4:  346:int whoseTurn(struct gameState *state) {
        4:  346-block  0
        4:  347:  return state->whoseTurn;
        4:  347-block  0
unconditional  0 taken 4
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
unconditional  0 never executed
    $$$$$:  356-block  0
unconditional  1 never executed
    $$$$$:  356-block  1
branch  2 never executed
branch  3 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
unconditional  0 never executed
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
unconditional  0 never executed
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  380-block  1
branch  2 never executed
branch  3 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
unconditional  0 never executed
        -:  388:}
        -:  389:
function isGameOver called 7 returned 100% blocks executed 91%
        7:  390:int isGameOver(struct gameState *state) {
        7:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        7:  395:  if (state->supplyCount[province] == 0)
        7:  395-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 4
        -:  396:    {
        3:  397:      return 1;
        3:  397-block  0
unconditional  0 taken 3
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        4:  402-block  0
unconditional  0 taken 4
      100:  402-block  1
unconditional  1 taken 100
      104:  402-block  2
branch  2 taken 100
branch  3 taken 4 (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
      100:  404-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 94
        -:  405:	{
        6:  406:	  j++;
        6:  406-block  0
unconditional  0 taken 6
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        4:  409-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -:  410:    {
    #####:  411:      return 1;
    $$$$$:  411-block  0
unconditional  0 never executed
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        4:  414-block  0
unconditional  0 taken 4
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
unconditional  0 never executed
    $$$$$:  422-block  1
unconditional  1 never executed
    $$$$$:  422-block  2
branch  2 never executed
branch  3 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
unconditional  2 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
unconditional  2 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
unconditional  2 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
unconditional  2 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
unconditional  2 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
unconditional  3 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
unconditional  0 never executed
    $$$$$:  433-block  1
unconditional  1 never executed
    $$$$$:  433-block  2
branch  2 never executed
branch  3 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
unconditional  2 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
unconditional  2 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
unconditional  2 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
unconditional  2 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
unconditional  2 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
unconditional  3 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
unconditional  0 never executed
    $$$$$:  444-block  1
unconditional  1 never executed
    $$$$$:  444-block  2
branch  2 never executed
branch  3 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
unconditional  2 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
unconditional  2 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
unconditional  2 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
unconditional  2 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
unconditional  2 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
unconditional  3 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
unconditional  0 never executed
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
unconditional  0 never executed
    $$$$$:  464-block  1
unconditional  1 never executed
    $$$$$:  464-block  2
branch  2 never executed
branch  3 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
unconditional  0 never executed
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
unconditional  1 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
unconditional  0 never executed
    $$$$$:  479-block  1
unconditional  1 never executed
    $$$$$:  479-block  2
branch  2 never executed
branch  3 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
unconditional  0 never executed
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
    $$$$$:  490-block  0
unconditional  1 never executed
    $$$$$:  490-block  1
branch  2 never executed
branch  3 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
unconditional  0 never executed
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
unconditional  0 never executed
    $$$$$:  500-block  1
unconditional  1 never executed
    $$$$$:  500-block  2
branch  2 never executed
branch  3 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
unconditional  0 never executed
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
unconditional  0 never executed
    $$$$$:  510-block  1
unconditional  1 never executed
    $$$$$:  510-block  2
branch  2 never executed
branch  3 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
unconditional  0 never executed
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
unconditional  0 never executed
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
unconditional  0 never executed
        -:  523:}
        -:  524:
function drawCard called 144542 returned 100% blocks executed 100%
   144542:  525:int drawCard(int player, struct gameState *state)
   144542:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
   144542:  528:  if (state->deckCount[player] <= 0){//Deck is empty
   144542:  528-block  0
branch  0 taken 7257 (fallthrough)
branch  1 taken 137285
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
  1465189:  533:    for (i = 0; i < state->discardCount[player];i++){
     7257:  533-block  0
unconditional  0 taken 7257
  1457932:  533-block  1
unconditional  1 taken 1457932
  1465189:  533-block  2
branch  2 taken 1457932
branch  3 taken 7257 (fallthrough)
  1457932:  534:      state->deck[player][i] = state->discard[player][i];
  1457932:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     7257:  538:    state->deckCount[player] = state->discardCount[player];
     7257:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     7257:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
     7257:  542-block  0
call    0 returned 7257
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     7257:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     7257:  551:    count = state->handCount[player];//Get current player's hand count
unconditional  0 taken 7257
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     7257:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     7257:  559:    if (deckCounter == 0)
     7257:  559-block  0
branch  0 taken 580 (fallthrough)
branch  1 taken 6677
      580:  560:      return -1;
      580:  560-block  0
unconditional  0 taken 580
        -:  561:
     6677:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     6677:  563:    state->deckCount[player]--;
     6677:  564:    state->handCount[player]++;//Increment hand count
     6677:  564-block  0
unconditional  0 taken 6677
        -:  565:  }
        -:  566:
        -:  567:  else{
   137285:  568:    int count = state->handCount[player];//Get current hand count for player
   137285:  568-block  0
unconditional  0 taken 137285
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   137285:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   137285:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   137285:  576:    state->deckCount[player]--;
   137285:  577:    state->handCount[player]++;//Increment hand count
   137285:  577-block  0
unconditional  0 taken 137285
        -:  578:  }
        -:  579:
   143962:  580:  return 0;
   143962:  580-block  0
unconditional  0 taken 143962
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
    $$$$$:  583-block  0
        -:  584:{
    #####:  585:  switch( cardNumber ) 
    $$$$$:  585-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
    $$$$$:  588-block  0
unconditional  0 never executed
        -:  589:    case estate:
    #####:  590:      return 2;
    $$$$$:  590-block  0
unconditional  0 never executed
        -:  591:    case duchy:
    #####:  592:      return 5;
    $$$$$:  592-block  0
unconditional  0 never executed
        -:  593:    case province:
    #####:  594:      return 8;
    $$$$$:  594-block  0
unconditional  0 never executed
        -:  595:    case copper:
    #####:  596:      return 0;
    $$$$$:  596-block  0
unconditional  0 never executed
        -:  597:    case silver:
    #####:  598:      return 3;
    $$$$$:  598-block  0
unconditional  0 never executed
        -:  599:    case gold:
    #####:  600:      return 6;
    $$$$$:  600-block  0
unconditional  0 never executed
        -:  601:    case adventurer:
    #####:  602:      return 6;
    $$$$$:  602-block  0
unconditional  0 never executed
        -:  603:    case council_room:
    #####:  604:      return 5;
    $$$$$:  604-block  0
unconditional  0 never executed
        -:  605:    case feast:
    #####:  606:      return 4;
    $$$$$:  606-block  0
unconditional  0 never executed
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
unconditional  0 never executed
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
unconditional  0 never executed
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
unconditional  0 never executed
        -:  613:    case smithy:
    #####:  614:      return 4;
    $$$$$:  614-block  0
unconditional  0 never executed
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
unconditional  0 never executed
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
unconditional  0 never executed
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
unconditional  0 never executed
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
unconditional  0 never executed
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
unconditional  0 never executed
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
unconditional  0 never executed
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
unconditional  0 never executed
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
unconditional  0 never executed
        -:  631:    case embargo: 
    #####:  632:      return 2;
    $$$$$:  632-block  0
unconditional  0 never executed
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
unconditional  0 never executed
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
unconditional  0 never executed
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
unconditional  0 never executed
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
unconditional  0 never executed
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
unconditional  0 never executed
        -:  644:}
        -:  645:
function adventurerEffect called 10006 returned 100% blocks executed 100%
    10006:  646:int adventurerEffect(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphandCounter, int temphand []) {
    10006:  646-block  0
        -:  647:	
   144248:  648:	while (drawntreasure <= 2) {
    10006:  648-block  0
unconditional  0 taken 10006
   144248:  648-block  1
branch  1 taken 134242
branch  2 taken 10006 (fallthrough)
   134242:  649:		if (state->deckCount[currentPlayer] <= 1) {//if the deck is empty we need to shuffle discard and add to deck
   134242:  649-block  0
branch  0 taken 13923 (fallthrough)
branch  1 taken 120319
    13923:  650:			shuffle(currentPlayer, state);
    13923:  650-block  0
call    0 returned 13923
unconditional  1 taken 13923
        -:  651:		}
   134242:  652:		drawCard(currentPlayer, state);
   134242:  652-block  0
call    0 returned 134242
   134242:  653:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
   134242:  654:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 120924 (fallthrough)
branch  1 taken 13318
   120924:  654-block  0
branch  2 taken 107614 (fallthrough)
branch  3 taken 13310
   107614:  654-block  1
branch  4 taken 3390 (fallthrough)
branch  5 taken 104224
    30018:  655:			drawntreasure++;
    30018:  655-block  0
unconditional  0 taken 30018
        -:  656:		else {
   104224:  657:			temphand[temphandCounter] = cardDrawn;
   104224:  658:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   104224:  659:			temphandCounter++;
   104224:  659-block  0
unconditional  0 taken 104224
        -:  660:		}
        -:  661:	}
   114230:  662:	while (temphandCounter - 1 >= 0) {
    10006:  662-block  0
unconditional  0 taken 10006
   114230:  662-block  1
branch  1 taken 104224
branch  2 taken 10006 (fallthrough)
   104224:  663:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[temphandCounter - 1]; // discard all cards in play that have been drawn
   104224:  664:		temphandCounter = temphandCounter - 1;
   104224:  664-block  0
unconditional  0 taken 104224
        -:  665:	}
    10006:  666:	return 0;
    10006:  666-block  0
unconditional  0 taken 10006
        -:  667:}
        -:  668:
function smithyEffect called 5 returned 100% blocks executed 100%
        5:  669:int smithyEffect(int currentPlayer, struct gameState *state, int handPos, int i) {
        5:  669-block  0
        -:  670:	
        -:  671:	//+3 Cards
       15:  672:	for (i = 1; i < 3; i++)
        5:  672-block  0
unconditional  0 taken 5
unconditional  1 taken 10
       15:  672-block  1
branch  2 taken 10
branch  3 taken 5 (fallthrough)
        -:  673:	{
       10:  674:		drawCard(currentPlayer, state);
       10:  674-block  0
call    0 returned 10
        -:  675:	}
        -:  676:
        -:  677:	//discard card from hand
        -:  678:	//discardCard(handPos, currentPlayer, state, 0);
        5:  679:	return 0;
        5:  679-block  0
unconditional  0 taken 5
        -:  680:}
        -:  681:
function outpostEffect called 20000 returned 100% blocks executed 100%
    20000:  682:int outpostEffect(int currentPlayer, struct gameState *state, int handPos) {
    20000:  682-block  0
        -:  683:	
        -:  684:	//set outpost flag
    20000:  685:	state->outpostPlayed++;
        -:  686:
        -:  687:	//discard card
        -:  688:	//discardCard(handPos, currentPlayer, state, 0);
    20000:  689:	return 0;
    20000:  689-block  0
unconditional  0 taken 20000
        -:  690:}
        -:  691:
function villageEffect called 10000 returned 100% blocks executed 100%
    10000:  692:int villageEffect(int currentPlayer, struct gameState *state, int handPos) {
    10000:  692-block  0
        -:  693:	
        -:  694:	//+1 Card
    10000:  695:	drawCard(currentPlayer, state);
    10000:  695-block  0
call    0 returned 10000
        -:  696:
        -:  697:	//+2 Actions
    10000:  698:	state->numActions = state->numActions + 3;
        -:  699:
        -:  700:	//discard played card from hand
    10000:  701:	discardCard(handPos, currentPlayer, state, 1);
call    0 returned 10000
    10000:  702:	return 0;
unconditional  0 taken 10000
        -:  703:}
        -:  704:
function embargoEffect called 0 returned 0% blocks executed 0%
    #####:  705:int embargoEffect(int currentPlayer, struct gameState *state, int handPos, int choice1) {
    $$$$$:  705-block  0
        -:  706:	//+2 Coins
    #####:  707:	state->coins = state->coins + 2;
        -:  708:
        -:  709:	//see if selected pile is in play
    #####:  710:	if (state->supplyCount[choice1] == -1)
    $$$$$:  710-block  0
branch  0 never executed
branch  1 never executed
        -:  711:	{
    #####:  712:		return -1;
    $$$$$:  712-block  0
unconditional  0 never executed
        -:  713:	}
        -:  714:
        -:  715:	//add embargo token to selected supply pile
    #####:  716:	state->embargoTokens[choice1]++;
        -:  717:
        -:  718:	//trash card
    #####:  719:	discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  719-block  0
call    0 never executed
    #####:  720:	return 0;
unconditional  0 never executed
        -:  721:}
        -:  722:
        -:  723:
        -:  724:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  725:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
    $$$$$:  725-block  0
        -:  726:{
        -:  727:  int i;
        -:  728:  int j;
        -:  729:  int k;
        -:  730:  int x;
        -:  731:  int index;
    #####:  732:  int currentPlayer = whoseTurn(state);
    $$$$$:  732-block  0
call    0 never executed
    #####:  733:  int nextPlayer = currentPlayer + 1;
        -:  734:
    #####:  735:  int tributeRevealedCards[2] = {-1, -1};
        -:  736:  int temphand[MAX_HAND];// moved above the if statement
    #####:  737:  int drawntreasure=0;
        -:  738:  int cardDrawn;
    #####:  739:  int z = 0;// this is the counter for the temp hand
    #####:  740:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  741:    nextPlayer = 0;
    $$$$$:  741-block  0
unconditional  0 never executed
        -:  742:  }
        -:  743:  
        -:  744:	
        -:  745:  //uses switch to select card and perform actions
    #####:  746:  switch( card ) 
    $$$$$:  746-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  747:    {
        -:  748:    case adventurer:
    #####:  749:		return adventurerEffect(drawntreasure, state, currentPlayer, cardDrawn, z, temphand);
    $$$$$:  749-block  0
call    0 never executed
unconditional  1 never executed
        -:  750:			
        -:  751:    case council_room:
        -:  752:      //+4 Cards
    #####:  753:      for (i = 0; i < 4; i++)
    $$$$$:  753-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  753-block  1
branch  2 never executed
branch  3 never executed
        -:  754:	{
    #####:  755:	  drawCard(currentPlayer, state);
    $$$$$:  755-block  0
call    0 never executed
        -:  756:	}
        -:  757:			
        -:  758:      //+1 Buy
    #####:  759:      state->numBuys++;
        -:  760:			
        -:  761:      //Each other player draws a card
    #####:  762:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  762-block  0
unconditional  0 never executed
    $$$$$:  762-block  1
unconditional  1 never executed
    $$$$$:  762-block  2
branch  2 never executed
branch  3 never executed
        -:  763:	{
    #####:  764:	  if ( i != currentPlayer )
    $$$$$:  764-block  0
branch  0 never executed
branch  1 never executed
        -:  765:	    {
    #####:  766:	      drawCard(i, state);
    $$$$$:  766-block  0
call    0 never executed
unconditional  1 never executed
        -:  767:	    }
        -:  768:	}
        -:  769:			
        -:  770:      //put played card in played card pile
    #####:  771:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  771-block  0
call    0 never executed
        -:  772:			
    #####:  773:      return 0;
unconditional  0 never executed
        -:  774:			
        -:  775:    case feast:
        -:  776:      //gain card with cost up to 5
        -:  777:      //Backup hand
    #####:  778:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  778-block  0
unconditional  0 never executed
    $$$$$:  778-block  1
unconditional  1 never executed
    $$$$$:  778-block  2
branch  2 never executed
branch  3 never executed
    #####:  779:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  780:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  781:      }
        -:  782:      //Backup hand
        -:  783:
        -:  784:      //Update Coins for Buy
    #####:  785:      updateCoins(currentPlayer, state, 5);
    $$$$$:  785-block  0
call    0 never executed
    #####:  786:      x = 1;//Condition to loop on
    #####:  787:      while( x == 1) {//Buy one card
unconditional  0 never executed
    $$$$$:  787-block  0
branch  1 never executed
branch  2 never executed
    #####:  788:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  788-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  789:	  if (DEBUG)
        -:  790:	    printf("None of that card left, sorry!\n");
        -:  791:
        -:  792:	  if (DEBUG){
        -:  793:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  794:	  }
        -:  795:	}
    #####:  796:	else if (state->coins < getCost(choice1)){
    $$$$$:  796-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  797:	  printf("That card is too expensive!\n");
    $$$$$:  797-block  0
call    0 never executed
unconditional  1 never executed
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  801:	  }
        -:  802:	}
        -:  803:	else{
        -:  804:
        -:  805:	  if (DEBUG){
        -:  806:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  807:	  }
        -:  808:
    #####:  809:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  809-block  0
call    0 never executed
    #####:  810:	  x = 0;//No more buying cards
unconditional  0 never executed
        -:  811:
        -:  812:	  if (DEBUG){
        -:  813:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  814:	  }
        -:  815:
        -:  816:	}
        -:  817:      }     
        -:  818:
        -:  819:      //Reset Hand
    #####:  820:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  820-block  0
unconditional  0 never executed
    $$$$$:  820-block  1
unconditional  1 never executed
    $$$$$:  820-block  2
branch  2 never executed
branch  3 never executed
    #####:  821:	state->hand[currentPlayer][i] = temphand[i];
    #####:  822:	temphand[i] = -1;
        -:  823:      }
        -:  824:      //Reset Hand
        -:  825:      			
    #####:  826:      return 0;
    $$$$$:  826-block  0
unconditional  0 never executed
        -:  827:			
        -:  828:    case gardens:
    #####:  829:      return -1;
    $$$$$:  829-block  0
unconditional  0 never executed
        -:  830:			
        -:  831:    case mine:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  834-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  834-block  1
branch  2 never executed
branch  3 never executed
        -:  835:	{
    #####:  836:	  return -1;
    $$$$$:  836-block  0
unconditional  0 never executed
        -:  837:	}
        -:  838:		
    #####:  839:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  839-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  839-block  1
branch  2 never executed
branch  3 never executed
        -:  840:	{
    #####:  841:	  return -1;
    $$$$$:  841-block  0
unconditional  0 never executed
        -:  842:	}
        -:  843:
    #####:  844:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  844-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  845:	{
    #####:  846:	  return -1;
    $$$$$:  846-block  0
unconditional  0 never executed
        -:  847:	}
        -:  848:
    #####:  849:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  849-block  0
call    0 never executed
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  855-block  0
unconditional  1 never executed
    $$$$$:  855-block  1
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  857-block  0
branch  0 never executed
branch  1 never executed
        -:  858:	    {
    #####:  859:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  859-block  0
call    0 never executed
    #####:  860:	      break;
unconditional  0 never executed
        -:  861:	    }
        -:  862:	}
        -:  863:			
    #####:  864:      return 0;
    $$$$$:  864-block  0
unconditional  0 never executed
        -:  865:			
        -:  866:    case remodel:
    #####:  867:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  868:
    #####:  869:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  869-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  870:	{
    #####:  871:	  return -1;
    $$$$$:  871-block  0
unconditional  0 never executed
        -:  872:	}
        -:  873:
    #####:  874:      gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  874-block  0
call    0 never executed
        -:  875:
        -:  876:      //discard card from hand
    #####:  877:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  878:
        -:  879:      //discard trashed card
    #####:  880:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  880-block  0
unconditional  1 never executed
    $$$$$:  880-block  1
branch  2 never executed
branch  3 never executed
        -:  881:	{
    #####:  882:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  882-block  0
branch  0 never executed
branch  1 never executed
        -:  883:	    {
    #####:  884:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  884-block  0
call    0 never executed
    #####:  885:	      break;
unconditional  0 never executed
        -:  886:	    }
        -:  887:	}
        -:  888:
        -:  889:
    #####:  890:      return 0;
    $$$$$:  890-block  0
unconditional  0 never executed
        -:  891:		
        -:  892:    case smithy:
        -:  893:
    #####:  894:		return smithyEffect(currentPlayer, state, handPos, i);
    $$$$$:  894-block  0
call    0 never executed
unconditional  1 never executed
        -:  895:		
        -:  896:    case village:
        -:  897:
    #####:  898:		return villageEffect(currentPlayer, state, handPos);
    $$$$$:  898-block  0
call    0 never executed
unconditional  1 never executed
        -:  899:		
        -:  900:    case baron:
    #####:  901:      state->numBuys++;//Increase buys by 1!
    #####:  902:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  902-block  0
branch  0 never executed
branch  1 never executed
    #####:  903:	int p = 0;//Iterator for hand!
    #####:  904:	int card_not_discarded = 1;//Flag for discard set!
    #####:  905:	while(card_not_discarded){
    $$$$$:  905-block  0
unconditional  0 never executed
    $$$$$:  905-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  905-block  2
unconditional  3 never executed
    #####:  906:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  906-block  0
branch  0 never executed
branch  1 never executed
    #####:  907:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  908:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  909:	    state->discardCount[currentPlayer]++;
    #####:  910:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  910-block  0
unconditional  0 never executed
    $$$$$:  910-block  1
unconditional  1 never executed
    $$$$$:  910-block  2
branch  2 never executed
branch  3 never executed
    #####:  911:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  912:	    }
    #####:  913:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  914:	    state->handCount[currentPlayer]--;
    #####:  915:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  915-block  0
unconditional  0 never executed
        -:  916:	  }
    #####:  917:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  917-block  0
branch  0 never executed
branch  1 never executed
        -:  918:	    if(DEBUG) {
        -:  919:	      printf("No estate cards in your hand, invalid choice\n");
        -:  920:	      printf("Must gain an estate if there are any\n");
        -:  921:	    }
    #####:  922:	    if (supplyCount(estate, state) > 0){
    $$$$$:  922-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  923-block  0
call    0 never executed
    #####:  924:	      state->supplyCount[estate]--;//Decrement estates
    #####:  925:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:		isGameOver(state);
    $$$$$:  926-block  0
call    0 never executed
unconditional  1 never executed
        -:  927:	      }
        -:  928:	    }
    #####:  929:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  929-block  0
unconditional  0 never executed
        -:  930:	  }
        -:  931:			    
        -:  932:	  else{
    #####:  933:	    p++;//Next card
    $$$$$:  933-block  0
unconditional  0 never executed
        -:  934:	  }
        -:  935:	}
        -:  936:      }
        -:  937:			    
        -:  938:      else{
    #####:  939:	if (supplyCount(estate, state) > 0){
    $$$$$:  939-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  940:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  940-block  0
call    0 never executed
    #####:  941:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  942:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  943:	    isGameOver(state);
    $$$$$:  943-block  0
call    0 never executed
unconditional  1 never executed
        -:  944:	  }
        -:  945:	}
        -:  946:      }
        -:  947:	    
        -:  948:      
    #####:  949:      return 0;
    $$$$$:  949-block  0
unconditional  0 never executed
        -:  950:		
        -:  951:    case great_hall:
        -:  952:      //+1 Card
    #####:  953:      drawCard(currentPlayer, state);
    $$$$$:  953-block  0
call    0 never executed
        -:  954:			
        -:  955:      //+1 Actions
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  960:      return 0;
unconditional  0 never executed
        -:  961:		
        -:  962:    case minion:
        -:  963:      //+1 action
    #####:  964:      state->numActions++;
        -:  965:			
        -:  966:      //discard card from hand
    #####:  967:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  967-block  0
call    0 never executed
        -:  968:			
    #####:  969:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  970:	{
    #####:  971:	  state->coins = state->coins + 2;
    $$$$$:  971-block  0
unconditional  0 never executed
        -:  972:	}
        -:  973:			
    #####:  974:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  974-block  0
branch  0 never executed
branch  1 never executed
        -:  975:	{
        -:  976:	  //discard hand
    #####:  977:	  while(numHandCards(state) > 0)
    $$$$$:  977-block  0
unconditional  0 never executed
    $$$$$:  977-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  978:	    {
    #####:  979:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  979-block  0
call    0 never executed
unconditional  1 never executed
        -:  980:	    }
        -:  981:				
        -:  982:	  //draw 4
    #####:  983:	  for (i = 0; i < 4; i++)
    $$$$$:  983-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  983-block  1
branch  2 never executed
branch  3 never executed
        -:  984:	    {
    #####:  985:	      drawCard(currentPlayer, state);
    $$$$$:  985-block  0
call    0 never executed
        -:  986:	    }
        -:  987:				
        -:  988:	  //other players discard hand and redraw if hand size > 4
    #####:  989:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$:  989-block  0
unconditional  0 never executed
    $$$$$:  989-block  1
unconditional  1 never executed
    $$$$$:  989-block  2
branch  2 never executed
branch  3 never executed
        -:  990:	    {
    #####:  991:	      if (i != currentPlayer)
    $$$$$:  991-block  0
branch  0 never executed
branch  1 never executed
        -:  992:		{
    #####:  993:		  if ( state->handCount[i] > 4 )
    $$$$$:  993-block  0
branch  0 never executed
branch  1 never executed
        -:  994:		    {
        -:  995:		      //discard hand
    #####:  996:		      while( state->handCount[i] > 0 )
    $$$$$:  996-block  0
unconditional  0 never executed
    $$$$$:  996-block  1
branch  1 never executed
branch  2 never executed
        -:  997:			{
    #####:  998:			  discardCard(handPos, i, state, 0);
    $$$$$:  998-block  0
call    0 never executed
unconditional  1 never executed
        -:  999:			}
        -: 1000:							
        -: 1001:		      //draw 4
    #####: 1002:		      for (j = 0; j < 4; j++)
    $$$$$: 1002-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1002-block  1
branch  2 never executed
branch  3 never executed
        -: 1003:			{
    #####: 1004:			  drawCard(i, state);
    $$$$$: 1004-block  0
call    0 never executed
        -: 1005:			}
        -: 1006:		    }
        -: 1007:		}
        -: 1008:	    }
        -: 1009:				
        -: 1010:	}
    #####: 1011:      return 0;
    $$$$$: 1011-block  0
unconditional  0 never executed
        -: 1012:		
        -: 1013:    case steward:
    #####: 1014:      if (choice1 == 1)
    $$$$$: 1014-block  0
branch  0 never executed
branch  1 never executed
        -: 1015:	{
        -: 1016:	  //+2 cards
    #####: 1017:	  drawCard(currentPlayer, state);
    $$$$$: 1017-block  0
call    0 never executed
    #####: 1018:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1019:	}
    #####: 1020:      else if (choice1 == 2)
    $$$$$: 1020-block  0
branch  0 never executed
branch  1 never executed
        -: 1021:	{
        -: 1022:	  //+2 coins
    #####: 1023:	  state->coins = state->coins + 2;
    $$$$$: 1023-block  0
unconditional  0 never executed
        -: 1024:	}
        -: 1025:      else
        -: 1026:	{
        -: 1027:	  //trash 2 cards in hand
    #####: 1028:	  discardCard(choice2, currentPlayer, state, 1);
    $$$$$: 1028-block  0
call    0 never executed
    #####: 1029:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -: 1030:	}
        -: 1031:			
        -: 1032:      //discard card from hand
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1033-block  0
call    0 never executed
    #####: 1034:      return 0;
unconditional  0 never executed
        -: 1035:		
        -: 1036:    case tribute:
    #####: 1037:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1037-block  0
branch  0 never executed
branch  1 never executed
    #####: 1038:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1038-block  0
branch  0 never executed
branch  1 never executed
    #####: 1039:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1040:	  state->deckCount[nextPlayer]--;
    $$$$$: 1040-block  0
unconditional  0 never executed
        -: 1041:	}
    #####: 1042:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1042-block  0
branch  0 never executed
branch  1 never executed
    #####: 1043:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1044:	  state->discardCount[nextPlayer]--;
    $$$$$: 1044-block  0
unconditional  0 never executed
        -: 1045:	}
        -: 1046:	else{
        -: 1047:	  //No Card to Reveal
        -: 1048:	  if (DEBUG){
        -: 1049:	    printf("No cards to reveal\n");
        -: 1050:	  }
        -: 1051:	}
        -: 1052:      }
        -: 1053:	    
        -: 1054:      else{
    #####: 1055:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1055-block  0
branch  0 never executed
branch  1 never executed
    #####: 1056:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1056-block  0
unconditional  0 never executed
    $$$$$: 1056-block  1
unconditional  1 never executed
    $$$$$: 1056-block  2
branch  2 never executed
branch  3 never executed
    #####: 1057:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1058:	    state->deckCount[nextPlayer]++;
    #####: 1059:	    state->discard[nextPlayer][i] = -1;
    #####: 1060:	    state->discardCount[nextPlayer]--;
        -: 1061:	  }
        -: 1062:			    
    #####: 1063:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1063-block  0
call    0 never executed
unconditional  1 never executed
        -: 1064:	} 
    #####: 1065:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1066:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1067:	state->deckCount[nextPlayer]--;
    #####: 1068:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1069:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1070:	state->deckCount[nextPlayer]--;
    $$$$$: 1070-block  0
unconditional  0 never executed
        -: 1071:      }    
        -: 1072:		       
    #####: 1073:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1073-block  0
branch  0 never executed
branch  1 never executed
    #####: 1074:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1075:	state->playedCardCount++;
    #####: 1076:	tributeRevealedCards[1] = -1;
    $$$$$: 1076-block  0
unconditional  0 never executed
        -: 1077:      }
        -: 1078:
    #####: 1079:      for (i = 0; i <= 2; i ++){
    $$$$$: 1079-block  0
unconditional  0 never executed
    $$$$$: 1079-block  1
unconditional  1 never executed
    $$$$$: 1079-block  2
branch  2 never executed
branch  3 never executed
    #####: 1080:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1080-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1080-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1080-block  2
branch  4 never executed
branch  5 never executed
    #####: 1081:	  state->coins += 2;
    $$$$$: 1081-block  0
unconditional  0 never executed
        -: 1082:	}
        -: 1083:		    
    #####: 1084:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1084-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1084-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1084-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1084-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1084-block  4
branch  8 never executed
branch  9 never executed
    #####: 1085:	  drawCard(currentPlayer, state);
    $$$$$: 1085-block  0
call    0 never executed
    #####: 1086:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1087:	}
        -: 1088:	else{//Action Card
    #####: 1089:	  state->numActions = state->numActions + 2;
    $$$$$: 1089-block  0
unconditional  0 never executed
        -: 1090:	}
        -: 1091:      }
        -: 1092:	    
    #####: 1093:      return 0;
    $$$$$: 1093-block  0
unconditional  0 never executed
        -: 1094:		
        -: 1095:    case ambassador:
    #####: 1096:      j = 0;		//used to check if player has enough cards to discard
        -: 1097:
    #####: 1098:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1098-block  1
branch  2 never executed
branch  3 never executed
        -: 1099:	{
    #####: 1100:	  return -1;				
    $$$$$: 1100-block  0
unconditional  0 never executed
        -: 1101:	}
        -: 1102:
    #####: 1103:      if (choice1 == handPos)
    $$$$$: 1103-block  0
branch  0 never executed
branch  1 never executed
        -: 1104:	{
    #####: 1105:	  return -1;
    $$$$$: 1105-block  0
unconditional  0 never executed
        -: 1106:	}
        -: 1107:
    #####: 1108:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1108-block  0
unconditional  0 never executed
    $$$$$: 1108-block  1
unconditional  1 never executed
    $$$$$: 1108-block  2
branch  2 never executed
branch  3 never executed
        -: 1109:	{
    #####: 1110:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1110-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1110-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1110-block  2
branch  4 never executed
branch  5 never executed
        -: 1111:	    {
    #####: 1112:	      j++;
    $$$$$: 1112-block  0
unconditional  0 never executed
        -: 1113:	    }
        -: 1114:	}
    #####: 1115:      if (j < choice2)
    $$$$$: 1115-block  0
branch  0 never executed
branch  1 never executed
        -: 1116:	{
    #####: 1117:	  return -1;				
    $$$$$: 1117-block  0
unconditional  0 never executed
        -: 1118:	}
        -: 1119:
        -: 1120:      if (DEBUG) 
        -: 1121:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1122:
        -: 1123:      //increase supply count for choosen card by amount being discarded
    #####: 1124:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1125:			
        -: 1126:      //each other player gains a copy of revealed card
    #####: 1127:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1127-block  0
unconditional  0 never executed
    $$$$$: 1127-block  1
unconditional  1 never executed
    $$$$$: 1127-block  2
branch  2 never executed
branch  3 never executed
        -: 1128:	{
    #####: 1129:	  if (i != currentPlayer)
    $$$$$: 1129-block  0
branch  0 never executed
branch  1 never executed
        -: 1130:	    {
    #####: 1131:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1131-block  0
call    0 never executed
unconditional  1 never executed
        -: 1132:	    }
        -: 1133:	}
        -: 1134:
        -: 1135:      //discard played card from hand
    #####: 1136:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1136-block  0
call    0 never executed
        -: 1137:
        -: 1138:      //trash copies of cards returned to supply
    #####: 1139:      for (j = 0; j < choice2; j++)
unconditional  0 never executed
    $$$$$: 1139-block  0
unconditional  1 never executed
    $$$$$: 1139-block  1
branch  2 never executed
branch  3 never executed
        -: 1140:	{
    #####: 1141:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1141-block  0
unconditional  0 never executed
    $$$$$: 1141-block  1
unconditional  1 never executed
    $$$$$: 1141-block  2
branch  2 never executed
branch  3 never executed
        -: 1142:	    {
    #####: 1143:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1143-block  0
branch  0 never executed
branch  1 never executed
        -: 1144:		{
    #####: 1145:		  discardCard(i, currentPlayer, state, 1);
    $$$$$: 1145-block  0
call    0 never executed
    #####: 1146:		  break;
unconditional  0 never executed
        -: 1147:		}
        -: 1148:	    }
        -: 1149:	}			
        -: 1150:
    #####: 1151:      return 0;
    $$$$$: 1151-block  0
unconditional  0 never executed
        -: 1152:		
        -: 1153:    case cutpurse:
        -: 1154:
    #####: 1155:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1155-block  0
call    0 never executed
    #####: 1156:      for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
    $$$$$: 1156-block  0
unconditional  1 never executed
    $$$$$: 1156-block  1
branch  2 never executed
branch  3 never executed
        -: 1157:	{
    #####: 1158:	  if (i != currentPlayer)
    $$$$$: 1158-block  0
branch  0 never executed
branch  1 never executed
        -: 1159:	    {
    #####: 1160:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1160-block  0
unconditional  0 never executed
    $$$$$: 1160-block  1
unconditional  1 never executed
    $$$$$: 1160-block  2
branch  2 never executed
branch  3 never executed
        -: 1161:		{
    #####: 1162:		  if (state->hand[i][j] == copper)
    $$$$$: 1162-block  0
branch  0 never executed
branch  1 never executed
        -: 1163:		    {
    #####: 1164:		      discardCard(j, i, state, 0);
    $$$$$: 1164-block  0
call    0 never executed
    #####: 1165:		      break;
unconditional  0 never executed
        -: 1166:		    }
    #####: 1167:		  if (j == state->handCount[i])
    $$$$$: 1167-block  0
branch  0 never executed
branch  1 never executed
        -: 1168:		    {
    #####: 1169:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1169-block  0
unconditional  0 never executed
    $$$$$: 1169-block  1
unconditional  1 never executed
    $$$$$: 1169-block  2
branch  2 never executed
branch  3 never executed
        -: 1170:			{
        -: 1171:			  if (DEBUG)
        -: 1172:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1173:			}	
    #####: 1174:		      break;
    $$$$$: 1174-block  0
unconditional  0 never executed
        -: 1175:		    }		
        -: 1176:		}
        -: 1177:					
        -: 1178:	    }
        -: 1179:				
        -: 1180:	}				
        -: 1181:
        -: 1182:      //discard played card from hand
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1183-block  0
call    0 never executed
        -: 1184:
    #####: 1185:      return 0;
unconditional  0 never executed
        -: 1186:
        -: 1187:		
        -: 1188:    case embargo: 
    #####: 1189:		return embargoEffect(currentPlayer, state, handPos, choice1);
    $$$$$: 1189-block  0
call    0 never executed
unconditional  1 never executed
        -: 1190:		
        -: 1191:    case outpost:
    #####: 1192:		return outpostEffect(currentPlayer, state, handPos);
    $$$$$: 1192-block  0
call    0 never executed
unconditional  1 never executed
        -: 1193:		
        -: 1194:    case salvager:
        -: 1195:      //+1 buy
    #####: 1196:      state->numBuys++;
        -: 1197:			
    #####: 1198:      if (choice1)
    $$$$$: 1198-block  0
branch  0 never executed
branch  1 never executed
        -: 1199:	{
        -: 1200:	  //gain coins equal to trashed card
    #####: 1201:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1201-block  0
call    0 never executed
call    1 never executed
        -: 1202:	  //trash card
    #####: 1203:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
unconditional  1 never executed
        -: 1204:	}
        -: 1205:			
        -: 1206:      //discard card
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1207-block  0
call    0 never executed
    #####: 1208:      return 0;
unconditional  0 never executed
        -: 1209:		
        -: 1210:    case sea_hag:
    #####: 1211:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1211-block  0
unconditional  0 never executed
    $$$$$: 1211-block  1
unconditional  1 never executed
    $$$$$: 1211-block  2
branch  2 never executed
branch  3 never executed
    #####: 1212:	if (i != currentPlayer){
    $$$$$: 1212-block  0
branch  0 never executed
branch  1 never executed
    #####: 1213:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1214:	  state->discardCount[i]++;
    #####: 1215:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1215-block  0
unconditional  0 never executed
        -: 1216:	}
        -: 1217:      }
    #####: 1218:      return 0;
    $$$$$: 1218-block  0
unconditional  0 never executed
        -: 1219:		
        -: 1220:    case treasure_map:
        -: 1221:      //search hand for another treasure_map
    #####: 1222:      index = -1;
    #####: 1223:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1223-block  0
unconditional  0 never executed
    $$$$$: 1223-block  1
unconditional  1 never executed
    $$$$$: 1223-block  2
branch  2 never executed
branch  3 never executed
        -: 1224:	{
    #####: 1225:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1225-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1225-block  1
branch  2 never executed
branch  3 never executed
        -: 1226:	    {
    #####: 1227:	      index = i;
    #####: 1228:	      break;
    $$$$$: 1228-block  0
unconditional  0 never executed
        -: 1229:	    }
        -: 1230:	}
    #####: 1231:      if (index > -1)
    $$$$$: 1231-block  0
branch  0 never executed
branch  1 never executed
        -: 1232:	{
        -: 1233:	  //trash both treasure cards
    #####: 1234:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1234-block  0
call    0 never executed
    #####: 1235:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1236:
        -: 1237:	  //gain 4 Gold cards
    #####: 1238:	  for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1238-block  0
branch  2 never executed
branch  3 never executed
        -: 1239:	    {
    #####: 1240:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1240-block  0
call    0 never executed
        -: 1241:	    }
        -: 1242:				
        -: 1243:	  //return success
    #####: 1244:	  return 1;
    $$$$$: 1244-block  0
unconditional  0 never executed
        -: 1245:	}
        -: 1246:			
        -: 1247:      //no second treasure_map found in hand
    #####: 1248:      return -1;
    $$$$$: 1248-block  0
unconditional  0 never executed
        -: 1249:    }
        -: 1250:	
    #####: 1251:  return -1;
    $$$$$: 1251-block  0
unconditional  0 never executed
    $$$$$: 1251-block  1
unconditional  1 never executed
        -: 1252:}
        -: 1253:
function discardCard called 10000 returned 100% blocks executed 67%
    10000: 1254:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
    10000: 1254-block  0
        -: 1255:{
        -: 1256:	
        -: 1257:  //if card is not trashed, added to Played pile 
    10000: 1258:  if (trashFlag < 1)
    10000: 1258-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10000
        -: 1259:    {
        -: 1260:      //add card to played pile
    #####: 1261:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1262:      state->playedCardCount++;
    $$$$$: 1262-block  0
unconditional  0 never executed
        -: 1263:    }
        -: 1264:	
        -: 1265:  //set played card to -1
    10000: 1266:  state->hand[currentPlayer][handPos] = -1;
        -: 1267:	
        -: 1268:  //remove card from player's hand
    10000: 1269:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
    10000: 1269-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10000
        -: 1270:    {
        -: 1271:      //reduce number of cards in hand
    #####: 1272:      state->handCount[currentPlayer]--;
    $$$$$: 1272-block  0
unconditional  0 never executed
        -: 1273:    }
    10000: 1274:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
    10000: 1274-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10000
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
    $$$$$: 1277-block  0
unconditional  0 never executed
        -: 1278:    }
        -: 1279:  else 	
        -: 1280:    {
        -: 1281:      //replace discarded card with last card in hand
    10000: 1282:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1283:      //set last card to -1
    10000: 1284:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1285:      //reduce number of cards in hand
    10000: 1286:      state->handCount[currentPlayer]--;
    10000: 1286-block  0
unconditional  0 taken 10000
        -: 1287:    }
        -: 1288:	
    10000: 1289:  return 0;
    10000: 1289-block  0
unconditional  0 taken 10000
        -: 1290:}
        -: 1291:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1292:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
    $$$$$: 1292-block  0
        -: 1293:{
        -: 1294:  //Note: supplyPos is enum of choosen card
        -: 1295:	
        -: 1296:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1297:  if ( supplyCount(supplyPos, state) < 1 )
    $$$$$: 1297-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1298:    {
    #####: 1299:      return -1;
    $$$$$: 1299-block  0
unconditional  0 never executed
        -: 1300:    }
        -: 1301:	
        -: 1302:  //added card for [whoseTurn] current player:
        -: 1303:  // toFlag = 0 : add to discard
        -: 1304:  // toFlag = 1 : add to deck
        -: 1305:  // toFlag = 2 : add to hand
        -: 1306:
    #####: 1307:  if (toFlag == 1)
    $$$$$: 1307-block  0
branch  0 never executed
branch  1 never executed
        -: 1308:    {
    #####: 1309:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1310:      state->deckCount[player]++;
    $$$$$: 1310-block  0
unconditional  0 never executed
        -: 1311:    }
    #####: 1312:  else if (toFlag == 2)
    $$$$$: 1312-block  0
branch  0 never executed
branch  1 never executed
        -: 1313:    {
    #####: 1314:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1315:      state->handCount[player]++;
    $$$$$: 1315-block  0
unconditional  0 never executed
        -: 1316:    }
        -: 1317:  else
        -: 1318:    {
    #####: 1319:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1320:      state->discardCount[player]++;
    $$$$$: 1320-block  0
unconditional  0 never executed
        -: 1321:    }
        -: 1322:	
        -: 1323:  //decrease number in supply pile
    #####: 1324:  state->supplyCount[supplyPos]--;
        -: 1325:	 
    #####: 1326:  return 0;
    $$$$$: 1326-block  0
unconditional  0 never executed
        -: 1327:}
        -: 1328:
function updateCoins called 68 returned 100% blocks executed 100%
       68: 1329:int updateCoins(int player, struct gameState *state, int bonus)
       68: 1329-block  0
        -: 1330:{
        -: 1331:  int i;
        -: 1332:	
        -: 1333:  //reset coin count
       68: 1334:  state->coins = 0;
        -: 1335:
        -: 1336:  //add coins for each Treasure card in player's hand
      398: 1337:  for (i = 0; i < state->handCount[player]; i++)
       68: 1337-block  0
unconditional  0 taken 68
      330: 1337-block  1
unconditional  1 taken 330
      398: 1337-block  2
branch  2 taken 330
branch  3 taken 68 (fallthrough)
        -: 1338:    {
      330: 1339:      if (state->hand[player][i] == copper)
      330: 1339-block  0
branch  0 taken 237 (fallthrough)
branch  1 taken 93
        -: 1340:	{
      237: 1341:	  state->coins += 1;
      237: 1341-block  0
unconditional  0 taken 237
        -: 1342:	}
       93: 1343:      else if (state->hand[player][i] == silver)
       93: 1343-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 84
        -: 1344:	{
        9: 1345:	  state->coins += 2;
        9: 1345-block  0
unconditional  0 taken 9
        -: 1346:	}
       84: 1347:      else if (state->hand[player][i] == gold)
       84: 1347-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 76
        -: 1348:	{
        8: 1349:	  state->coins += 3;
        8: 1349-block  0
unconditional  0 taken 8
        -: 1350:	}	
        -: 1351:    }	
        -: 1352:
        -: 1353:  //add bonus
       68: 1354:  state->coins += bonus;
        -: 1355:
       68: 1356:  return 0;
       68: 1356-block  0
unconditional  0 taken 68
        -: 1357:}
        -: 1358:
        -: 1359:
        -: 1360://end of dominion.c
        -: 1361:

TESTING OUTPOSTEFFECT() CARD EFFECT FUNCTION

TEST 1: PROPER RETURN OCCURS
----TEST PASSED----  THE FUNCTION DID NOT CRASH AND RETURNED PROPERLY

TEST 2: OUTPOST FLAG IS SET AFTER FUNCTION CALL
----TEST PASSED----  THE OUTPOST FLAG WAS SET

TEST 3: CALLING THE FUNCTION DOES NOT CHANGE THE OTHER PLAYER'S CARDS
----TEST PASSED----  THE OTHER PLAYER'S HAND/DECK/DISCARD WAS NOT CHANGED

TEST 4: CALLING THE FUNCTION DOES NOT CHANGE SUPPLY COUNT OF THE CARDS
----TEST PASSED----  THE SUPPLY COUNT DID NOT CHANGE

TEST 5: CHECK TO MAKE SURE THE OUTPOST CARD IS DISCARDED
----TEST FAILED----  THE CARD WAS NOT PROPERLY DISCARDED
NOT ALL TESTS PASSED. NUMBER OF FAILS: 1
Function 'updateCoins'
Lines executed:100.00% of 11
No branches
No calls

Function 'gainCard'
Lines executed:0.00% of 13
No branches
No calls

Function 'discardCard'
Lines executed:69.23% of 13
No branches
No calls

Function 'cardEffect'
Lines executed:0.00% of 210
No branches
No calls

Function 'embargoEffect'
Lines executed:0.00% of 7
No branches
No calls

Function 'villageEffect'
Lines executed:100.00% of 5
No branches
No calls

Function 'outpostEffect'
Lines executed:100.00% of 3
No branches
No calls

Function 'smithyEffect'
Lines executed:100.00% of 4
No branches
No calls

Function 'adventurerEffect'
Lines executed:100.00% of 15
No branches
No calls

Function 'getCost'
Lines executed:0.00% of 30
No branches
No calls

Function 'drawCard'
Lines executed:100.00% of 22
No branches
No calls

Function 'getWinners'
Lines executed:0.00% of 24
No branches
No calls

Function 'scoreFor'
Lines executed:0.00% of 24
No branches
No calls

Function 'isGameOver'
Lines executed:90.00% of 10
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 20
No branches
No calls

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 9
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
No calls

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
No calls

Function 'buyCard'
Lines executed:0.00% of 13
No branches
No calls

Function 'playCard'
Lines executed:0.00% of 14
No branches
No calls

Function 'shuffle'
Lines executed:100.00% of 16
No branches
No calls

Function 'initializeGame'
Lines executed:96.77% of 62
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
No branches
No calls

File 'dominion.c'
Lines executed:31.29% of 556
Branches executed:26.86% of 417
Taken at least once:25.18% of 417
Calls executed:15.05% of 93
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 9730766 returned 100% blocks executed 100%
  9730766:    8:int compare(const void* a, const void* b) {
  9730766:    8-block  0
  9730766:    9:  if (*(int*)a > *(int*)b)
  9730766:    9-block  0
branch  0 taken 4863001 (fallthrough)
branch  1 taken 4867765
  4863001:   10:    return 1;
  4863001:   10-block  0
unconditional  0 taken 4863001
  4867765:   11:  if (*(int*)a < *(int*)b)
  4867765:   11-block  0
branch  0 taken 1719970 (fallthrough)
branch  1 taken 3147795
  1719970:   12:    return -1;
  1719970:   12-block  0
unconditional  0 taken 1719970
  3147795:   13:  return 0;
  3147795:   13-block  0
unconditional  0 taken 3147795
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
unconditional  0 never executed
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
unconditional  0 never executed
        -:   35:}
        -:   36:
function initializeGame called 40042 returned 100% blocks executed 97%
    40042:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
    40042:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    40042:   44:  SelectStream(1);
    40042:   44-block  0
call    0 returned 40042
    40042:   45:  PutSeed((long)randomSeed);
call    0 returned 40042
        -:   46:  
        -:   47:  //check number of players
    40042:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 40042 (fallthrough)
branch  1 taken 0
    40042:   48-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 40042
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
unconditional  0 never executed
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    40042:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    95135:   57:  for (i = 0; i < 10; i++)
    40042:   57-block  0
unconditional  0 taken 40042
    55093:   57-block  1
unconditional  1 taken 55093
    95135:   57-block  2
branch  2 taken 95077
branch  3 taken 58 (fallthrough)
        -:   58:    {
   931131:   59:      for (j = 0; j < 10; j++)
    95077:   59-block  0
unconditional  0 taken 95077
   836054:   59-block  1
unconditional  1 taken 836054
   931131:   59-block  2
branch  2 taken 876038
branch  3 taken 55093 (fallthrough)
        -:   60:        {
   876038:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
   876038:   61-block  0
branch  0 taken 780961 (fallthrough)
branch  1 taken 95077
   780961:   61-block  1
branch  2 taken 39984 (fallthrough)
branch  3 taken 740977
        -:   62:	    {
    39984:   63:	      return -1;
    39984:   63-block  0
unconditional  0 taken 39984
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       58:   73:  if (numPlayers == 2)
       58:   73-block  0
branch  0 taken 32 (fallthrough)
branch  1 taken 26
        -:   74:    {
       32:   75:      state->supplyCount[curse] = 10;
       32:   75-block  0
unconditional  0 taken 32
        -:   76:    }
       26:   77:  else if (numPlayers == 3)
       26:   77-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 16
        -:   78:    {
       10:   79:      state->supplyCount[curse] = 20;
       10:   79-block  0
unconditional  0 taken 10
        -:   80:    }
        -:   81:  else
        -:   82:    {
       16:   83:      state->supplyCount[curse] = 30;
       16:   83-block  0
unconditional  0 taken 16
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       58:   87:  if (numPlayers == 2)
       58:   87-block  0
branch  0 taken 32 (fallthrough)
branch  1 taken 26
        -:   88:    {
       32:   89:      state->supplyCount[estate] = 8;
       32:   90:      state->supplyCount[duchy] = 8;
       32:   91:      state->supplyCount[province] = 8;
       32:   91-block  0
unconditional  0 taken 32
        -:   92:    }
        -:   93:  else
        -:   94:    {
       26:   95:      state->supplyCount[estate] = 12;
       26:   96:      state->supplyCount[duchy] = 12;
       26:   97:      state->supplyCount[province] = 12;
       26:   97-block  0
unconditional  0 taken 26
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       58:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       58:  102:  state->supplyCount[silver] = 40;
       58:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1218:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
       58:  106-block  0
unconditional  0 taken 58
     1160:  106-block  1
unconditional  1 taken 1160
     1218:  106-block  2
branch  2 taken 1160
branch  3 taken 58 (fallthrough)
        -:  107:    {
     9596:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
     1160:  108-block  0
unconditional  0 taken 1160
     8436:  108-block  1
unconditional  1 taken 8436
     9596:  108-block  2
branch  2 taken 8990
branch  3 taken 606 (fallthrough)
        -:  109:	{
     8990:  110:	  if (kingdomCards[j] == i)
     8990:  110-block  0
branch  0 taken 554 (fallthrough)
branch  1 taken 8436
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      554:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
      554:  113-block  0
branch  0 taken 522 (fallthrough)
branch  1 taken 32
      522:  113-block  1
branch  2 taken 58 (fallthrough)
branch  3 taken 464
        -:  114:		{
      180:  115:		  if (numPlayers == 2){ 
       90:  115-block  0
branch  0 taken 38 (fallthrough)
branch  1 taken 52
       90:  115-block  1
unconditional  2 taken 90
       38:  116:		    state->supplyCount[i] = 8; 
       38:  116-block  0
unconditional  0 taken 38
        -:  117:		  }
       52:  118:		  else{ state->supplyCount[i] = 12; }
       52:  118-block  0
unconditional  0 taken 52
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      464:  122:		  state->supplyCount[i] = 10;
      464:  122-block  0
unconditional  0 taken 464
        -:  123:		}
      554:  124:	      break;
      554:  124-block  0
unconditional  0 taken 554
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     8436:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      216:  138:  for (i = 0; i < numPlayers; i++)
       58:  138-block  0
unconditional  0 taken 58
      158:  138-block  1
unconditional  1 taken 158
      216:  138-block  2
branch  2 taken 158
branch  3 taken 58 (fallthrough)
        -:  139:    {
      158:  140:      state->deckCount[i] = 0;
      632:  141:      for (j = 0; j < 3; j++)
      158:  141-block  0
unconditional  0 taken 158
      474:  141-block  1
unconditional  1 taken 474
      632:  141-block  2
branch  2 taken 474
branch  3 taken 158 (fallthrough)
        -:  142:	{
      474:  143:	  state->deck[i][j] = estate;
      474:  144:	  state->deckCount[i]++;
        -:  145:	}
     1264:  146:      for (j = 3; j < 10; j++)
      158:  146-block  0
unconditional  0 taken 158
     1106:  146-block  1
unconditional  1 taken 1106
     1264:  146-block  2
branch  2 taken 1106
branch  3 taken 158 (fallthrough)
        -:  147:	{
     1106:  148:	  state->deck[i][j] = copper;
     1106:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      216:  154:  for (i = 0; i < numPlayers; i++)
       58:  154-block  0
unconditional  0 taken 58
      158:  154-block  1
unconditional  1 taken 158
      216:  154-block  2
branch  2 taken 158
branch  3 taken 58 (fallthrough)
        -:  155:    {
      158:  156:      if ( shuffle(i, state) < 0 )
      158:  156-block  0
call    0 returned 158
branch  1 taken 0 (fallthrough)
branch  2 taken 158
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
unconditional  0 never executed
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      216:  163:  for (i = 0; i < numPlayers; i++)
       58:  163-block  0
unconditional  0 taken 58
      158:  163-block  1
unconditional  1 taken 158
      216:  163-block  2
branch  2 taken 158
branch  3 taken 58 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      158:  166:      state->handCount[i] = 0;
      158:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1624:  176:  for (i = 0; i <= treasure_map; i++)
       58:  176-block  0
unconditional  0 taken 58
     1566:  176-block  1
unconditional  1 taken 1566
     1624:  176-block  2
branch  2 taken 1566
branch  3 taken 58 (fallthrough)
        -:  177:    {
     1566:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       58:  182:  state->outpostPlayed = 0;
       58:  183:  state->phase = 0;
       58:  184:  state->numActions = 1;
       58:  185:  state->numBuys = 1;
       58:  186:  state->playedCardCount = 0;
       58:  187:  state->whoseTurn = 0;
       58:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      348:  192:  for (it = 0; it < 5; it++){
       58:  192-block  0
unconditional  0 taken 58
unconditional  1 taken 290
      348:  192-block  1
branch  2 taken 290
branch  3 taken 58 (fallthrough)
      290:  193:    drawCard(state->whoseTurn, state);
      290:  193-block  0
call    0 returned 290
        -:  194:  }
        -:  195:
       58:  196:  updateCoins(state->whoseTurn, state, 0);
       58:  196-block  0
call    0 returned 58
        -:  197:
       58:  198:  return 0;
unconditional  0 taken 58
        -:  199:}
        -:  200:
function shuffle called 21338 returned 100% blocks executed 100%
    21338:  201:int shuffle(int player, struct gameState *state) {
    21338:  201-block  0
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    21338:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    21338:  209:  if (state->deckCount[player] < 1)
    21338:  209-block  0
branch  0 taken 7833 (fallthrough)
branch  1 taken 13505
     7833:  210:    return -1;
     7833:  210-block  0
unconditional  0 taken 7833
    13505:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
    13505:  211-block  0
call    0 returned 13505
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  1479687:  214:  while (state->deckCount[player] > 0) {
unconditional  0 taken 13505
  1479687:  214-block  0
branch  1 taken 1466182
branch  2 taken 13505 (fallthrough)
  1466182:  215:    card = floor(Random() * state->deckCount[player]);
  1466182:  215-block  0
call    0 returned 1466182
  1466182:  216:    newDeck[newDeckPos] = state->deck[player][card];
  1466182:  217:    newDeckPos++;
102731134:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
unconditional  0 taken 1466182
101264952:  218-block  0
unconditional  1 taken 101264952
102731134:  218-block  1
branch  2 taken 101264952
branch  3 taken 1466182 (fallthrough)
101264952:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  1466182:  221:    state->deckCount[player]--;
  1466182:  221-block  0
unconditional  0 taken 1466182
        -:  222:  }
  1479687:  223:  for (i = 0; i < newDeckPos; i++) {
    13505:  223-block  0
unconditional  0 taken 13505
  1466182:  223-block  1
unconditional  1 taken 1466182
  1479687:  223-block  2
branch  2 taken 1466182
branch  3 taken 13505 (fallthrough)
  1466182:  224:    state->deck[player][i] = newDeck[i];
  1466182:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    21338:  228:  return 0;
    13505:  228-block  0
unconditional  0 taken 13505
    21338:  228-block  1
unconditional  1 taken 21338
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  231-block  0
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
unconditional  0 never executed
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
unconditional  0 never executed
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
unconditional  0 never executed
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
unconditional  0 never executed
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
unconditional  0 never executed
    $$$$$:  269-block  0
unconditional  1 never executed
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  272-block  0
    $$$$$:  272-block  1
unconditional  0 never executed
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    $$$$$:  282-block  0
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    $$$$$:  285-block  0
unconditional  0 never executed
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
unconditional  0 never executed
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
    $$$$$:  293-block  0
unconditional  0 never executed
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  297-block  0
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
unconditional  0 never executed
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    $$$$$:  308-block  0
unconditional  0 never executed
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    $$$$$:  311-block  0
    #####:  312:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  312-block  0
call    0 never executed
unconditional  1 never executed
        -:  313:}
        -:  314:
function handCard called 4 returned 100% blocks executed 100%
        4:  315:int handCard(int handPos, struct gameState *state) {
        4:  315-block  0
        4:  316:  int currentPlayer = whoseTurn(state);
        4:  316-block  0
call    0 returned 4
        4:  317:  return state->hand[currentPlayer][handPos];
unconditional  0 taken 4
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    $$$$$:  320-block  0
    #####:  321:  return state->supplyCount[card];
    $$$$$:  321-block  0
unconditional  0 never executed
        -:  322:}
        -:  323:
function fullDeckCount called 5 returned 100% blocks executed 100%
        5:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        5:  324-block  0
        -:  325:  int i;
        5:  326:  int count = 0;
        -:  327:
       22:  328:  for (i = 0; i < state->deckCount[player]; i++)
        5:  328-block  0
unconditional  0 taken 5
       17:  328-block  1
unconditional  1 taken 17
       22:  328-block  2
branch  2 taken 17
branch  3 taken 5 (fallthrough)
        -:  329:    {
       17:  330:      if (state->deck[player][i] == card) count++;
       17:  330-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 12
        5:  330-block  1
unconditional  2 taken 5
        -:  331:    }
        -:  332:
       22:  333:  for (i = 0; i < state->handCount[player]; i++)
        5:  333-block  0
unconditional  0 taken 5
       17:  333-block  1
unconditional  1 taken 17
       22:  333-block  2
branch  2 taken 17
branch  3 taken 5 (fallthrough)
        -:  334:    {
       17:  335:      if (state->hand[player][i] == card) count++;
       17:  335-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 9
        8:  335-block  1
unconditional  2 taken 8
        -:  336:    }
        -:  337:
       22:  338:  for (i = 0; i < state->discardCount[player]; i++)
        5:  338-block  0
unconditional  0 taken 5
       17:  338-block  1
unconditional  1 taken 17
       22:  338-block  2
branch  2 taken 17
branch  3 taken 5 (fallthrough)
        -:  339:    {
       17:  340:      if (state->discard[player][i] == card) count++;
       17:  340-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 10
        7:  340-block  1
unconditional  2 taken 7
        -:  341:    }
        -:  342:
        5:  343:  return count;
        5:  343-block  0
unconditional  0 taken 5
        -:  344:}
        -:  345:
function whoseTurn called 4 returned 100% blocks executed 100%
        4:  346:int whoseTurn(struct gameState *state) {
        4:  346-block  0
        4:  347:  return state->whoseTurn;
        4:  347-block  0
unconditional  0 taken 4
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
unconditional  0 never executed
    $$$$$:  356-block  0
unconditional  1 never executed
    $$$$$:  356-block  1
branch  2 never executed
branch  3 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
unconditional  0 never executed
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
unconditional  0 never executed
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  380-block  1
branch  2 never executed
branch  3 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
unconditional  0 never executed
        -:  388:}
        -:  389:
function isGameOver called 7 returned 100% blocks executed 91%
        7:  390:int isGameOver(struct gameState *state) {
        7:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        7:  395:  if (state->supplyCount[province] == 0)
        7:  395-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 4
        -:  396:    {
        3:  397:      return 1;
        3:  397-block  0
unconditional  0 taken 3
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        4:  402-block  0
unconditional  0 taken 4
      100:  402-block  1
unconditional  1 taken 100
      104:  402-block  2
branch  2 taken 100
branch  3 taken 4 (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
      100:  404-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 94
        -:  405:	{
        6:  406:	  j++;
        6:  406-block  0
unconditional  0 taken 6
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        4:  409-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -:  410:    {
    #####:  411:      return 1;
    $$$$$:  411-block  0
unconditional  0 never executed
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        4:  414-block  0
unconditional  0 taken 4
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
unconditional  0 never executed
    $$$$$:  422-block  1
unconditional  1 never executed
    $$$$$:  422-block  2
branch  2 never executed
branch  3 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
unconditional  2 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
unconditional  2 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
unconditional  2 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
unconditional  2 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
unconditional  2 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
unconditional  3 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
unconditional  0 never executed
    $$$$$:  433-block  1
unconditional  1 never executed
    $$$$$:  433-block  2
branch  2 never executed
branch  3 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
unconditional  2 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
unconditional  2 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
unconditional  2 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
unconditional  2 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
unconditional  2 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
unconditional  3 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
unconditional  0 never executed
    $$$$$:  444-block  1
unconditional  1 never executed
    $$$$$:  444-block  2
branch  2 never executed
branch  3 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
unconditional  2 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
unconditional  2 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
unconditional  2 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
unconditional  2 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
unconditional  2 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
unconditional  3 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
unconditional  0 never executed
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
unconditional  0 never executed
    $$$$$:  464-block  1
unconditional  1 never executed
    $$$$$:  464-block  2
branch  2 never executed
branch  3 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
unconditional  0 never executed
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
unconditional  1 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
unconditional  0 never executed
    $$$$$:  479-block  1
unconditional  1 never executed
    $$$$$:  479-block  2
branch  2 never executed
branch  3 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
unconditional  0 never executed
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
    $$$$$:  490-block  0
unconditional  1 never executed
    $$$$$:  490-block  1
branch  2 never executed
branch  3 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
unconditional  0 never executed
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
unconditional  0 never executed
    $$$$$:  500-block  1
unconditional  1 never executed
    $$$$$:  500-block  2
branch  2 never executed
branch  3 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
unconditional  0 never executed
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
unconditional  0 never executed
    $$$$$:  510-block  1
unconditional  1 never executed
    $$$$$:  510-block  2
branch  2 never executed
branch  3 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
unconditional  0 never executed
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
unconditional  0 never executed
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
unconditional  0 never executed
        -:  523:}
        -:  524:
function drawCard called 144542 returned 100% blocks executed 100%
   144542:  525:int drawCard(int player, struct gameState *state)
   144542:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
   144542:  528:  if (state->deckCount[player] <= 0){//Deck is empty
   144542:  528-block  0
branch  0 taken 7257 (fallthrough)
branch  1 taken 137285
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
  1465189:  533:    for (i = 0; i < state->discardCount[player];i++){
     7257:  533-block  0
unconditional  0 taken 7257
  1457932:  533-block  1
unconditional  1 taken 1457932
  1465189:  533-block  2
branch  2 taken 1457932
branch  3 taken 7257 (fallthrough)
  1457932:  534:      state->deck[player][i] = state->discard[player][i];
  1457932:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     7257:  538:    state->deckCount[player] = state->discardCount[player];
     7257:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     7257:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
     7257:  542-block  0
call    0 returned 7257
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     7257:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     7257:  551:    count = state->handCount[player];//Get current player's hand count
unconditional  0 taken 7257
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     7257:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     7257:  559:    if (deckCounter == 0)
     7257:  559-block  0
branch  0 taken 580 (fallthrough)
branch  1 taken 6677
      580:  560:      return -1;
      580:  560-block  0
unconditional  0 taken 580
        -:  561:
     6677:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     6677:  563:    state->deckCount[player]--;
     6677:  564:    state->handCount[player]++;//Increment hand count
     6677:  564-block  0
unconditional  0 taken 6677
        -:  565:  }
        -:  566:
        -:  567:  else{
   137285:  568:    int count = state->handCount[player];//Get current hand count for player
   137285:  568-block  0
unconditional  0 taken 137285
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   137285:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   137285:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   137285:  576:    state->deckCount[player]--;
   137285:  577:    state->handCount[player]++;//Increment hand count
   137285:  577-block  0
unconditional  0 taken 137285
        -:  578:  }
        -:  579:
   143962:  580:  return 0;
   143962:  580-block  0
unconditional  0 taken 143962
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
    $$$$$:  583-block  0
        -:  584:{
    #####:  585:  switch( cardNumber ) 
    $$$$$:  585-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
    $$$$$:  588-block  0
unconditional  0 never executed
        -:  589:    case estate:
    #####:  590:      return 2;
    $$$$$:  590-block  0
unconditional  0 never executed
        -:  591:    case duchy:
    #####:  592:      return 5;
    $$$$$:  592-block  0
unconditional  0 never executed
        -:  593:    case province:
    #####:  594:      return 8;
    $$$$$:  594-block  0
unconditional  0 never executed
        -:  595:    case copper:
    #####:  596:      return 0;
    $$$$$:  596-block  0
unconditional  0 never executed
        -:  597:    case silver:
    #####:  598:      return 3;
    $$$$$:  598-block  0
unconditional  0 never executed
        -:  599:    case gold:
    #####:  600:      return 6;
    $$$$$:  600-block  0
unconditional  0 never executed
        -:  601:    case adventurer:
    #####:  602:      return 6;
    $$$$$:  602-block  0
unconditional  0 never executed
        -:  603:    case council_room:
    #####:  604:      return 5;
    $$$$$:  604-block  0
unconditional  0 never executed
        -:  605:    case feast:
    #####:  606:      return 4;
    $$$$$:  606-block  0
unconditional  0 never executed
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
unconditional  0 never executed
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
unconditional  0 never executed
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
unconditional  0 never executed
        -:  613:    case smithy:
    #####:  614:      return 4;
    $$$$$:  614-block  0
unconditional  0 never executed
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
unconditional  0 never executed
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
unconditional  0 never executed
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
unconditional  0 never executed
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
unconditional  0 never executed
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
unconditional  0 never executed
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
unconditional  0 never executed
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
unconditional  0 never executed
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
unconditional  0 never executed
        -:  631:    case embargo: 
    #####:  632:      return 2;
    $$$$$:  632-block  0
unconditional  0 never executed
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
unconditional  0 never executed
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
unconditional  0 never executed
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
unconditional  0 never executed
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
unconditional  0 never executed
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
unconditional  0 never executed
        -:  644:}
        -:  645:
function adventurerEffect called 10006 returned 100% blocks executed 100%
    10006:  646:int adventurerEffect(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphandCounter, int temphand []) {
    10006:  646-block  0
        -:  647:	
   144248:  648:	while (drawntreasure <= 2) {
    10006:  648-block  0
unconditional  0 taken 10006
   144248:  648-block  1
branch  1 taken 134242
branch  2 taken 10006 (fallthrough)
   134242:  649:		if (state->deckCount[currentPlayer] <= 1) {//if the deck is empty we need to shuffle discard and add to deck
   134242:  649-block  0
branch  0 taken 13923 (fallthrough)
branch  1 taken 120319
    13923:  650:			shuffle(currentPlayer, state);
    13923:  650-block  0
call    0 returned 13923
unconditional  1 taken 13923
        -:  651:		}
   134242:  652:		drawCard(currentPlayer, state);
   134242:  652-block  0
call    0 returned 134242
   134242:  653:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
   134242:  654:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 120924 (fallthrough)
branch  1 taken 13318
   120924:  654-block  0
branch  2 taken 107614 (fallthrough)
branch  3 taken 13310
   107614:  654-block  1
branch  4 taken 3390 (fallthrough)
branch  5 taken 104224
    30018:  655:			drawntreasure++;
    30018:  655-block  0
unconditional  0 taken 30018
        -:  656:		else {
   104224:  657:			temphand[temphandCounter] = cardDrawn;
   104224:  658:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   104224:  659:			temphandCounter++;
   104224:  659-block  0
unconditional  0 taken 104224
        -:  660:		}
        -:  661:	}
   114230:  662:	while (temphandCounter - 1 >= 0) {
    10006:  662-block  0
unconditional  0 taken 10006
   114230:  662-block  1
branch  1 taken 104224
branch  2 taken 10006 (fallthrough)
   104224:  663:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[temphandCounter - 1]; // discard all cards in play that have been drawn
   104224:  664:		temphandCounter = temphandCounter - 1;
   104224:  664-block  0
unconditional  0 taken 104224
        -:  665:	}
    10006:  666:	return 0;
    10006:  666-block  0
unconditional  0 taken 10006
        -:  667:}
        -:  668:
function smithyEffect called 5 returned 100% blocks executed 100%
        5:  669:int smithyEffect(int currentPlayer, struct gameState *state, int handPos, int i) {
        5:  669-block  0
        -:  670:	
        -:  671:	//+3 Cards
       15:  672:	for (i = 1; i < 3; i++)
        5:  672-block  0
unconditional  0 taken 5
unconditional  1 taken 10
       15:  672-block  1
branch  2 taken 10
branch  3 taken 5 (fallthrough)
        -:  673:	{
       10:  674:		drawCard(currentPlayer, state);
       10:  674-block  0
call    0 returned 10
        -:  675:	}
        -:  676:
        -:  677:	//discard card from hand
        -:  678:	//discardCard(handPos, currentPlayer, state, 0);
        5:  679:	return 0;
        5:  679-block  0
unconditional  0 taken 5
        -:  680:}
        -:  681:
function outpostEffect called 20005 returned 100% blocks executed 100%
    20005:  682:int outpostEffect(int currentPlayer, struct gameState *state, int handPos) {
    20005:  682-block  0
        -:  683:	
        -:  684:	//set outpost flag
    20005:  685:	state->outpostPlayed++;
        -:  686:
        -:  687:	//discard card
        -:  688:	//discardCard(handPos, currentPlayer, state, 0);
    20005:  689:	return 0;
    20005:  689-block  0
unconditional  0 taken 20005
        -:  690:}
        -:  691:
function villageEffect called 10000 returned 100% blocks executed 100%
    10000:  692:int villageEffect(int currentPlayer, struct gameState *state, int handPos) {
    10000:  692-block  0
        -:  693:	
        -:  694:	//+1 Card
    10000:  695:	drawCard(currentPlayer, state);
    10000:  695-block  0
call    0 returned 10000
        -:  696:
        -:  697:	//+2 Actions
    10000:  698:	state->numActions = state->numActions + 3;
        -:  699:
        -:  700:	//discard played card from hand
    10000:  701:	discardCard(handPos, currentPlayer, state, 1);
call    0 returned 10000
    10000:  702:	return 0;
unconditional  0 taken 10000
        -:  703:}
        -:  704:
function embargoEffect called 0 returned 0% blocks executed 0%
    #####:  705:int embargoEffect(int currentPlayer, struct gameState *state, int handPos, int choice1) {
    $$$$$:  705-block  0
        -:  706:	//+2 Coins
    #####:  707:	state->coins = state->coins + 2;
        -:  708:
        -:  709:	//see if selected pile is in play
    #####:  710:	if (state->supplyCount[choice1] == -1)
    $$$$$:  710-block  0
branch  0 never executed
branch  1 never executed
        -:  711:	{
    #####:  712:		return -1;
    $$$$$:  712-block  0
unconditional  0 never executed
        -:  713:	}
        -:  714:
        -:  715:	//add embargo token to selected supply pile
    #####:  716:	state->embargoTokens[choice1]++;
        -:  717:
        -:  718:	//trash card
    #####:  719:	discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  719-block  0
call    0 never executed
    #####:  720:	return 0;
unconditional  0 never executed
        -:  721:}
        -:  722:
        -:  723:
        -:  724:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  725:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
    $$$$$:  725-block  0
        -:  726:{
        -:  727:  int i;
        -:  728:  int j;
        -:  729:  int k;
        -:  730:  int x;
        -:  731:  int index;
    #####:  732:  int currentPlayer = whoseTurn(state);
    $$$$$:  732-block  0
call    0 never executed
    #####:  733:  int nextPlayer = currentPlayer + 1;
        -:  734:
    #####:  735:  int tributeRevealedCards[2] = {-1, -1};
        -:  736:  int temphand[MAX_HAND];// moved above the if statement
    #####:  737:  int drawntreasure=0;
        -:  738:  int cardDrawn;
    #####:  739:  int z = 0;// this is the counter for the temp hand
    #####:  740:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  741:    nextPlayer = 0;
    $$$$$:  741-block  0
unconditional  0 never executed
        -:  742:  }
        -:  743:  
        -:  744:	
        -:  745:  //uses switch to select card and perform actions
    #####:  746:  switch( card ) 
    $$$$$:  746-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  747:    {
        -:  748:    case adventurer:
    #####:  749:		return adventurerEffect(drawntreasure, state, currentPlayer, cardDrawn, z, temphand);
    $$$$$:  749-block  0
call    0 never executed
unconditional  1 never executed
        -:  750:			
        -:  751:    case council_room:
        -:  752:      //+4 Cards
    #####:  753:      for (i = 0; i < 4; i++)
    $$$$$:  753-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  753-block  1
branch  2 never executed
branch  3 never executed
        -:  754:	{
    #####:  755:	  drawCard(currentPlayer, state);
    $$$$$:  755-block  0
call    0 never executed
        -:  756:	}
        -:  757:			
        -:  758:      //+1 Buy
    #####:  759:      state->numBuys++;
        -:  760:			
        -:  761:      //Each other player draws a card
    #####:  762:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  762-block  0
unconditional  0 never executed
    $$$$$:  762-block  1
unconditional  1 never executed
    $$$$$:  762-block  2
branch  2 never executed
branch  3 never executed
        -:  763:	{
    #####:  764:	  if ( i != currentPlayer )
    $$$$$:  764-block  0
branch  0 never executed
branch  1 never executed
        -:  765:	    {
    #####:  766:	      drawCard(i, state);
    $$$$$:  766-block  0
call    0 never executed
unconditional  1 never executed
        -:  767:	    }
        -:  768:	}
        -:  769:			
        -:  770:      //put played card in played card pile
    #####:  771:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  771-block  0
call    0 never executed
        -:  772:			
    #####:  773:      return 0;
unconditional  0 never executed
        -:  774:			
        -:  775:    case feast:
        -:  776:      //gain card with cost up to 5
        -:  777:      //Backup hand
    #####:  778:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  778-block  0
unconditional  0 never executed
    $$$$$:  778-block  1
unconditional  1 never executed
    $$$$$:  778-block  2
branch  2 never executed
branch  3 never executed
    #####:  779:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  780:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  781:      }
        -:  782:      //Backup hand
        -:  783:
        -:  784:      //Update Coins for Buy
    #####:  785:      updateCoins(currentPlayer, state, 5);
    $$$$$:  785-block  0
call    0 never executed
    #####:  786:      x = 1;//Condition to loop on
    #####:  787:      while( x == 1) {//Buy one card
unconditional  0 never executed
    $$$$$:  787-block  0
branch  1 never executed
branch  2 never executed
    #####:  788:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  788-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  789:	  if (DEBUG)
        -:  790:	    printf("None of that card left, sorry!\n");
        -:  791:
        -:  792:	  if (DEBUG){
        -:  793:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  794:	  }
        -:  795:	}
    #####:  796:	else if (state->coins < getCost(choice1)){
    $$$$$:  796-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  797:	  printf("That card is too expensive!\n");
    $$$$$:  797-block  0
call    0 never executed
unconditional  1 never executed
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  801:	  }
        -:  802:	}
        -:  803:	else{
        -:  804:
        -:  805:	  if (DEBUG){
        -:  806:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  807:	  }
        -:  808:
    #####:  809:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  809-block  0
call    0 never executed
    #####:  810:	  x = 0;//No more buying cards
unconditional  0 never executed
        -:  811:
        -:  812:	  if (DEBUG){
        -:  813:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  814:	  }
        -:  815:
        -:  816:	}
        -:  817:      }     
        -:  818:
        -:  819:      //Reset Hand
    #####:  820:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  820-block  0
unconditional  0 never executed
    $$$$$:  820-block  1
unconditional  1 never executed
    $$$$$:  820-block  2
branch  2 never executed
branch  3 never executed
    #####:  821:	state->hand[currentPlayer][i] = temphand[i];
    #####:  822:	temphand[i] = -1;
        -:  823:      }
        -:  824:      //Reset Hand
        -:  825:      			
    #####:  826:      return 0;
    $$$$$:  826-block  0
unconditional  0 never executed
        -:  827:			
        -:  828:    case gardens:
    #####:  829:      return -1;
    $$$$$:  829-block  0
unconditional  0 never executed
        -:  830:			
        -:  831:    case mine:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  834-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  834-block  1
branch  2 never executed
branch  3 never executed
        -:  835:	{
    #####:  836:	  return -1;
    $$$$$:  836-block  0
unconditional  0 never executed
        -:  837:	}
        -:  838:		
    #####:  839:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  839-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  839-block  1
branch  2 never executed
branch  3 never executed
        -:  840:	{
    #####:  841:	  return -1;
    $$$$$:  841-block  0
unconditional  0 never executed
        -:  842:	}
        -:  843:
    #####:  844:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  844-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  845:	{
    #####:  846:	  return -1;
    $$$$$:  846-block  0
unconditional  0 never executed
        -:  847:	}
        -:  848:
    #####:  849:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  849-block  0
call    0 never executed
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  855-block  0
unconditional  1 never executed
    $$$$$:  855-block  1
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  857-block  0
branch  0 never executed
branch  1 never executed
        -:  858:	    {
    #####:  859:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  859-block  0
call    0 never executed
    #####:  860:	      break;
unconditional  0 never executed
        -:  861:	    }
        -:  862:	}
        -:  863:			
    #####:  864:      return 0;
    $$$$$:  864-block  0
unconditional  0 never executed
        -:  865:			
        -:  866:    case remodel:
    #####:  867:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  868:
    #####:  869:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  869-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  870:	{
    #####:  871:	  return -1;
    $$$$$:  871-block  0
unconditional  0 never executed
        -:  872:	}
        -:  873:
    #####:  874:      gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  874-block  0
call    0 never executed
        -:  875:
        -:  876:      //discard card from hand
    #####:  877:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  878:
        -:  879:      //discard trashed card
    #####:  880:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  880-block  0
unconditional  1 never executed
    $$$$$:  880-block  1
branch  2 never executed
branch  3 never executed
        -:  881:	{
    #####:  882:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  882-block  0
branch  0 never executed
branch  1 never executed
        -:  883:	    {
    #####:  884:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  884-block  0
call    0 never executed
    #####:  885:	      break;
unconditional  0 never executed
        -:  886:	    }
        -:  887:	}
        -:  888:
        -:  889:
    #####:  890:      return 0;
    $$$$$:  890-block  0
unconditional  0 never executed
        -:  891:		
        -:  892:    case smithy:
        -:  893:
    #####:  894:		return smithyEffect(currentPlayer, state, handPos, i);
    $$$$$:  894-block  0
call    0 never executed
unconditional  1 never executed
        -:  895:		
        -:  896:    case village:
        -:  897:
    #####:  898:		return villageEffect(currentPlayer, state, handPos);
    $$$$$:  898-block  0
call    0 never executed
unconditional  1 never executed
        -:  899:		
        -:  900:    case baron:
    #####:  901:      state->numBuys++;//Increase buys by 1!
    #####:  902:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  902-block  0
branch  0 never executed
branch  1 never executed
    #####:  903:	int p = 0;//Iterator for hand!
    #####:  904:	int card_not_discarded = 1;//Flag for discard set!
    #####:  905:	while(card_not_discarded){
    $$$$$:  905-block  0
unconditional  0 never executed
    $$$$$:  905-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  905-block  2
unconditional  3 never executed
    #####:  906:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  906-block  0
branch  0 never executed
branch  1 never executed
    #####:  907:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  908:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  909:	    state->discardCount[currentPlayer]++;
    #####:  910:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  910-block  0
unconditional  0 never executed
    $$$$$:  910-block  1
unconditional  1 never executed
    $$$$$:  910-block  2
branch  2 never executed
branch  3 never executed
    #####:  911:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  912:	    }
    #####:  913:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  914:	    state->handCount[currentPlayer]--;
    #####:  915:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  915-block  0
unconditional  0 never executed
        -:  916:	  }
    #####:  917:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  917-block  0
branch  0 never executed
branch  1 never executed
        -:  918:	    if(DEBUG) {
        -:  919:	      printf("No estate cards in your hand, invalid choice\n");
        -:  920:	      printf("Must gain an estate if there are any\n");
        -:  921:	    }
    #####:  922:	    if (supplyCount(estate, state) > 0){
    $$$$$:  922-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  923-block  0
call    0 never executed
    #####:  924:	      state->supplyCount[estate]--;//Decrement estates
    #####:  925:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:		isGameOver(state);
    $$$$$:  926-block  0
call    0 never executed
unconditional  1 never executed
        -:  927:	      }
        -:  928:	    }
    #####:  929:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  929-block  0
unconditional  0 never executed
        -:  930:	  }
        -:  931:			    
        -:  932:	  else{
    #####:  933:	    p++;//Next card
    $$$$$:  933-block  0
unconditional  0 never executed
        -:  934:	  }
        -:  935:	}
        -:  936:      }
        -:  937:			    
        -:  938:      else{
    #####:  939:	if (supplyCount(estate, state) > 0){
    $$$$$:  939-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  940:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  940-block  0
call    0 never executed
    #####:  941:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  942:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  943:	    isGameOver(state);
    $$$$$:  943-block  0
call    0 never executed
unconditional  1 never executed
        -:  944:	  }
        -:  945:	}
        -:  946:      }
        -:  947:	    
        -:  948:      
    #####:  949:      return 0;
    $$$$$:  949-block  0
unconditional  0 never executed
        -:  950:		
        -:  951:    case great_hall:
        -:  952:      //+1 Card
    #####:  953:      drawCard(currentPlayer, state);
    $$$$$:  953-block  0
call    0 never executed
        -:  954:			
        -:  955:      //+1 Actions
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  960:      return 0;
unconditional  0 never executed
        -:  961:		
        -:  962:    case minion:
        -:  963:      //+1 action
    #####:  964:      state->numActions++;
        -:  965:			
        -:  966:      //discard card from hand
    #####:  967:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  967-block  0
call    0 never executed
        -:  968:			
    #####:  969:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  970:	{
    #####:  971:	  state->coins = state->coins + 2;
    $$$$$:  971-block  0
unconditional  0 never executed
        -:  972:	}
        -:  973:			
    #####:  974:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  974-block  0
branch  0 never executed
branch  1 never executed
        -:  975:	{
        -:  976:	  //discard hand
    #####:  977:	  while(numHandCards(state) > 0)
    $$$$$:  977-block  0
unconditional  0 never executed
    $$$$$:  977-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  978:	    {
    #####:  979:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  979-block  0
call    0 never executed
unconditional  1 never executed
        -:  980:	    }
        -:  981:				
        -:  982:	  //draw 4
    #####:  983:	  for (i = 0; i < 4; i++)
    $$$$$:  983-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  983-block  1
branch  2 never executed
branch  3 never executed
        -:  984:	    {
    #####:  985:	      drawCard(currentPlayer, state);
    $$$$$:  985-block  0
call    0 never executed
        -:  986:	    }
        -:  987:				
        -:  988:	  //other players discard hand and redraw if hand size > 4
    #####:  989:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$:  989-block  0
unconditional  0 never executed
    $$$$$:  989-block  1
unconditional  1 never executed
    $$$$$:  989-block  2
branch  2 never executed
branch  3 never executed
        -:  990:	    {
    #####:  991:	      if (i != currentPlayer)
    $$$$$:  991-block  0
branch  0 never executed
branch  1 never executed
        -:  992:		{
    #####:  993:		  if ( state->handCount[i] > 4 )
    $$$$$:  993-block  0
branch  0 never executed
branch  1 never executed
        -:  994:		    {
        -:  995:		      //discard hand
    #####:  996:		      while( state->handCount[i] > 0 )
    $$$$$:  996-block  0
unconditional  0 never executed
    $$$$$:  996-block  1
branch  1 never executed
branch  2 never executed
        -:  997:			{
    #####:  998:			  discardCard(handPos, i, state, 0);
    $$$$$:  998-block  0
call    0 never executed
unconditional  1 never executed
        -:  999:			}
        -: 1000:							
        -: 1001:		      //draw 4
    #####: 1002:		      for (j = 0; j < 4; j++)
    $$$$$: 1002-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1002-block  1
branch  2 never executed
branch  3 never executed
        -: 1003:			{
    #####: 1004:			  drawCard(i, state);
    $$$$$: 1004-block  0
call    0 never executed
        -: 1005:			}
        -: 1006:		    }
        -: 1007:		}
        -: 1008:	    }
        -: 1009:				
        -: 1010:	}
    #####: 1011:      return 0;
    $$$$$: 1011-block  0
unconditional  0 never executed
        -: 1012:		
        -: 1013:    case steward:
    #####: 1014:      if (choice1 == 1)
    $$$$$: 1014-block  0
branch  0 never executed
branch  1 never executed
        -: 1015:	{
        -: 1016:	  //+2 cards
    #####: 1017:	  drawCard(currentPlayer, state);
    $$$$$: 1017-block  0
call    0 never executed
    #####: 1018:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1019:	}
    #####: 1020:      else if (choice1 == 2)
    $$$$$: 1020-block  0
branch  0 never executed
branch  1 never executed
        -: 1021:	{
        -: 1022:	  //+2 coins
    #####: 1023:	  state->coins = state->coins + 2;
    $$$$$: 1023-block  0
unconditional  0 never executed
        -: 1024:	}
        -: 1025:      else
        -: 1026:	{
        -: 1027:	  //trash 2 cards in hand
    #####: 1028:	  discardCard(choice2, currentPlayer, state, 1);
    $$$$$: 1028-block  0
call    0 never executed
    #####: 1029:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -: 1030:	}
        -: 1031:			
        -: 1032:      //discard card from hand
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1033-block  0
call    0 never executed
    #####: 1034:      return 0;
unconditional  0 never executed
        -: 1035:		
        -: 1036:    case tribute:
    #####: 1037:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1037-block  0
branch  0 never executed
branch  1 never executed
    #####: 1038:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1038-block  0
branch  0 never executed
branch  1 never executed
    #####: 1039:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1040:	  state->deckCount[nextPlayer]--;
    $$$$$: 1040-block  0
unconditional  0 never executed
        -: 1041:	}
    #####: 1042:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1042-block  0
branch  0 never executed
branch  1 never executed
    #####: 1043:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1044:	  state->discardCount[nextPlayer]--;
    $$$$$: 1044-block  0
unconditional  0 never executed
        -: 1045:	}
        -: 1046:	else{
        -: 1047:	  //No Card to Reveal
        -: 1048:	  if (DEBUG){
        -: 1049:	    printf("No cards to reveal\n");
        -: 1050:	  }
        -: 1051:	}
        -: 1052:      }
        -: 1053:	    
        -: 1054:      else{
    #####: 1055:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1055-block  0
branch  0 never executed
branch  1 never executed
    #####: 1056:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1056-block  0
unconditional  0 never executed
    $$$$$: 1056-block  1
unconditional  1 never executed
    $$$$$: 1056-block  2
branch  2 never executed
branch  3 never executed
    #####: 1057:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1058:	    state->deckCount[nextPlayer]++;
    #####: 1059:	    state->discard[nextPlayer][i] = -1;
    #####: 1060:	    state->discardCount[nextPlayer]--;
        -: 1061:	  }
        -: 1062:			    
    #####: 1063:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1063-block  0
call    0 never executed
unconditional  1 never executed
        -: 1064:	} 
    #####: 1065:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1066:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1067:	state->deckCount[nextPlayer]--;
    #####: 1068:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1069:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1070:	state->deckCount[nextPlayer]--;
    $$$$$: 1070-block  0
unconditional  0 never executed
        -: 1071:      }    
        -: 1072:		       
    #####: 1073:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1073-block  0
branch  0 never executed
branch  1 never executed
    #####: 1074:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1075:	state->playedCardCount++;
    #####: 1076:	tributeRevealedCards[1] = -1;
    $$$$$: 1076-block  0
unconditional  0 never executed
        -: 1077:      }
        -: 1078:
    #####: 1079:      for (i = 0; i <= 2; i ++){
    $$$$$: 1079-block  0
unconditional  0 never executed
    $$$$$: 1079-block  1
unconditional  1 never executed
    $$$$$: 1079-block  2
branch  2 never executed
branch  3 never executed
    #####: 1080:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1080-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1080-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1080-block  2
branch  4 never executed
branch  5 never executed
    #####: 1081:	  state->coins += 2;
    $$$$$: 1081-block  0
unconditional  0 never executed
        -: 1082:	}
        -: 1083:		    
    #####: 1084:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1084-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1084-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1084-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1084-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1084-block  4
branch  8 never executed
branch  9 never executed
    #####: 1085:	  drawCard(currentPlayer, state);
    $$$$$: 1085-block  0
call    0 never executed
    #####: 1086:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1087:	}
        -: 1088:	else{//Action Card
    #####: 1089:	  state->numActions = state->numActions + 2;
    $$$$$: 1089-block  0
unconditional  0 never executed
        -: 1090:	}
        -: 1091:      }
        -: 1092:	    
    #####: 1093:      return 0;
    $$$$$: 1093-block  0
unconditional  0 never executed
        -: 1094:		
        -: 1095:    case ambassador:
    #####: 1096:      j = 0;		//used to check if player has enough cards to discard
        -: 1097:
    #####: 1098:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1098-block  1
branch  2 never executed
branch  3 never executed
        -: 1099:	{
    #####: 1100:	  return -1;				
    $$$$$: 1100-block  0
unconditional  0 never executed
        -: 1101:	}
        -: 1102:
    #####: 1103:      if (choice1 == handPos)
    $$$$$: 1103-block  0
branch  0 never executed
branch  1 never executed
        -: 1104:	{
    #####: 1105:	  return -1;
    $$$$$: 1105-block  0
unconditional  0 never executed
        -: 1106:	}
        -: 1107:
    #####: 1108:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1108-block  0
unconditional  0 never executed
    $$$$$: 1108-block  1
unconditional  1 never executed
    $$$$$: 1108-block  2
branch  2 never executed
branch  3 never executed
        -: 1109:	{
    #####: 1110:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1110-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1110-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1110-block  2
branch  4 never executed
branch  5 never executed
        -: 1111:	    {
    #####: 1112:	      j++;
    $$$$$: 1112-block  0
unconditional  0 never executed
        -: 1113:	    }
        -: 1114:	}
    #####: 1115:      if (j < choice2)
    $$$$$: 1115-block  0
branch  0 never executed
branch  1 never executed
        -: 1116:	{
    #####: 1117:	  return -1;				
    $$$$$: 1117-block  0
unconditional  0 never executed
        -: 1118:	}
        -: 1119:
        -: 1120:      if (DEBUG) 
        -: 1121:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1122:
        -: 1123:      //increase supply count for choosen card by amount being discarded
    #####: 1124:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1125:			
        -: 1126:      //each other player gains a copy of revealed card
    #####: 1127:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1127-block  0
unconditional  0 never executed
    $$$$$: 1127-block  1
unconditional  1 never executed
    $$$$$: 1127-block  2
branch  2 never executed
branch  3 never executed
        -: 1128:	{
    #####: 1129:	  if (i != currentPlayer)
    $$$$$: 1129-block  0
branch  0 never executed
branch  1 never executed
        -: 1130:	    {
    #####: 1131:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1131-block  0
call    0 never executed
unconditional  1 never executed
        -: 1132:	    }
        -: 1133:	}
        -: 1134:
        -: 1135:      //discard played card from hand
    #####: 1136:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1136-block  0
call    0 never executed
        -: 1137:
        -: 1138:      //trash copies of cards returned to supply
    #####: 1139:      for (j = 0; j < choice2; j++)
unconditional  0 never executed
    $$$$$: 1139-block  0
unconditional  1 never executed
    $$$$$: 1139-block  1
branch  2 never executed
branch  3 never executed
        -: 1140:	{
    #####: 1141:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1141-block  0
unconditional  0 never executed
    $$$$$: 1141-block  1
unconditional  1 never executed
    $$$$$: 1141-block  2
branch  2 never executed
branch  3 never executed
        -: 1142:	    {
    #####: 1143:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1143-block  0
branch  0 never executed
branch  1 never executed
        -: 1144:		{
    #####: 1145:		  discardCard(i, currentPlayer, state, 1);
    $$$$$: 1145-block  0
call    0 never executed
    #####: 1146:		  break;
unconditional  0 never executed
        -: 1147:		}
        -: 1148:	    }
        -: 1149:	}			
        -: 1150:
    #####: 1151:      return 0;
    $$$$$: 1151-block  0
unconditional  0 never executed
        -: 1152:		
        -: 1153:    case cutpurse:
        -: 1154:
    #####: 1155:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1155-block  0
call    0 never executed
    #####: 1156:      for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
    $$$$$: 1156-block  0
unconditional  1 never executed
    $$$$$: 1156-block  1
branch  2 never executed
branch  3 never executed
        -: 1157:	{
    #####: 1158:	  if (i != currentPlayer)
    $$$$$: 1158-block  0
branch  0 never executed
branch  1 never executed
        -: 1159:	    {
    #####: 1160:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1160-block  0
unconditional  0 never executed
    $$$$$: 1160-block  1
unconditional  1 never executed
    $$$$$: 1160-block  2
branch  2 never executed
branch  3 never executed
        -: 1161:		{
    #####: 1162:		  if (state->hand[i][j] == copper)
    $$$$$: 1162-block  0
branch  0 never executed
branch  1 never executed
        -: 1163:		    {
    #####: 1164:		      discardCard(j, i, state, 0);
    $$$$$: 1164-block  0
call    0 never executed
    #####: 1165:		      break;
unconditional  0 never executed
        -: 1166:		    }
    #####: 1167:		  if (j == state->handCount[i])
    $$$$$: 1167-block  0
branch  0 never executed
branch  1 never executed
        -: 1168:		    {
    #####: 1169:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1169-block  0
unconditional  0 never executed
    $$$$$: 1169-block  1
unconditional  1 never executed
    $$$$$: 1169-block  2
branch  2 never executed
branch  3 never executed
        -: 1170:			{
        -: 1171:			  if (DEBUG)
        -: 1172:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1173:			}	
    #####: 1174:		      break;
    $$$$$: 1174-block  0
unconditional  0 never executed
        -: 1175:		    }		
        -: 1176:		}
        -: 1177:					
        -: 1178:	    }
        -: 1179:				
        -: 1180:	}				
        -: 1181:
        -: 1182:      //discard played card from hand
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1183-block  0
call    0 never executed
        -: 1184:
    #####: 1185:      return 0;
unconditional  0 never executed
        -: 1186:
        -: 1187:		
        -: 1188:    case embargo: 
    #####: 1189:		return embargoEffect(currentPlayer, state, handPos, choice1);
    $$$$$: 1189-block  0
call    0 never executed
unconditional  1 never executed
        -: 1190:		
        -: 1191:    case outpost:
    #####: 1192:		return outpostEffect(currentPlayer, state, handPos);
    $$$$$: 1192-block  0
call    0 never executed
unconditional  1 never executed
        -: 1193:		
        -: 1194:    case salvager:
        -: 1195:      //+1 buy
    #####: 1196:      state->numBuys++;
        -: 1197:			
    #####: 1198:      if (choice1)
    $$$$$: 1198-block  0
branch  0 never executed
branch  1 never executed
        -: 1199:	{
        -: 1200:	  //gain coins equal to trashed card
    #####: 1201:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1201-block  0
call    0 never executed
call    1 never executed
        -: 1202:	  //trash card
    #####: 1203:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
unconditional  1 never executed
        -: 1204:	}
        -: 1205:			
        -: 1206:      //discard card
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1207-block  0
call    0 never executed
    #####: 1208:      return 0;
unconditional  0 never executed
        -: 1209:		
        -: 1210:    case sea_hag:
    #####: 1211:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1211-block  0
unconditional  0 never executed
    $$$$$: 1211-block  1
unconditional  1 never executed
    $$$$$: 1211-block  2
branch  2 never executed
branch  3 never executed
    #####: 1212:	if (i != currentPlayer){
    $$$$$: 1212-block  0
branch  0 never executed
branch  1 never executed
    #####: 1213:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1214:	  state->discardCount[i]++;
    #####: 1215:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1215-block  0
unconditional  0 never executed
        -: 1216:	}
        -: 1217:      }
    #####: 1218:      return 0;
    $$$$$: 1218-block  0
unconditional  0 never executed
        -: 1219:		
        -: 1220:    case treasure_map:
        -: 1221:      //search hand for another treasure_map
    #####: 1222:      index = -1;
    #####: 1223:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1223-block  0
unconditional  0 never executed
    $$$$$: 1223-block  1
unconditional  1 never executed
    $$$$$: 1223-block  2
branch  2 never executed
branch  3 never executed
        -: 1224:	{
    #####: 1225:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1225-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1225-block  1
branch  2 never executed
branch  3 never executed
        -: 1226:	    {
    #####: 1227:	      index = i;
    #####: 1228:	      break;
    $$$$$: 1228-block  0
unconditional  0 never executed
        -: 1229:	    }
        -: 1230:	}
    #####: 1231:      if (index > -1)
    $$$$$: 1231-block  0
branch  0 never executed
branch  1 never executed
        -: 1232:	{
        -: 1233:	  //trash both treasure cards
    #####: 1234:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1234-block  0
call    0 never executed
    #####: 1235:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1236:
        -: 1237:	  //gain 4 Gold cards
    #####: 1238:	  for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1238-block  0
branch  2 never executed
branch  3 never executed
        -: 1239:	    {
    #####: 1240:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1240-block  0
call    0 never executed
        -: 1241:	    }
        -: 1242:				
        -: 1243:	  //return success
    #####: 1244:	  return 1;
    $$$$$: 1244-block  0
unconditional  0 never executed
        -: 1245:	}
        -: 1246:			
        -: 1247:      //no second treasure_map found in hand
    #####: 1248:      return -1;
    $$$$$: 1248-block  0
unconditional  0 never executed
        -: 1249:    }
        -: 1250:	
    #####: 1251:  return -1;
    $$$$$: 1251-block  0
unconditional  0 never executed
    $$$$$: 1251-block  1
unconditional  1 never executed
        -: 1252:}
        -: 1253:
function discardCard called 10000 returned 100% blocks executed 67%
    10000: 1254:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
    10000: 1254-block  0
        -: 1255:{
        -: 1256:	
        -: 1257:  //if card is not trashed, added to Played pile 
    10000: 1258:  if (trashFlag < 1)
    10000: 1258-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10000
        -: 1259:    {
        -: 1260:      //add card to played pile
    #####: 1261:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1262:      state->playedCardCount++;
    $$$$$: 1262-block  0
unconditional  0 never executed
        -: 1263:    }
        -: 1264:	
        -: 1265:  //set played card to -1
    10000: 1266:  state->hand[currentPlayer][handPos] = -1;
        -: 1267:	
        -: 1268:  //remove card from player's hand
    10000: 1269:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
    10000: 1269-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10000
        -: 1270:    {
        -: 1271:      //reduce number of cards in hand
    #####: 1272:      state->handCount[currentPlayer]--;
    $$$$$: 1272-block  0
unconditional  0 never executed
        -: 1273:    }
    10000: 1274:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
    10000: 1274-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10000
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
    $$$$$: 1277-block  0
unconditional  0 never executed
        -: 1278:    }
        -: 1279:  else 	
        -: 1280:    {
        -: 1281:      //replace discarded card with last card in hand
    10000: 1282:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1283:      //set last card to -1
    10000: 1284:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1285:      //reduce number of cards in hand
    10000: 1286:      state->handCount[currentPlayer]--;
    10000: 1286-block  0
unconditional  0 taken 10000
        -: 1287:    }
        -: 1288:	
    10000: 1289:  return 0;
    10000: 1289-block  0
unconditional  0 taken 10000
        -: 1290:}
        -: 1291:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1292:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
    $$$$$: 1292-block  0
        -: 1293:{
        -: 1294:  //Note: supplyPos is enum of choosen card
        -: 1295:	
        -: 1296:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1297:  if ( supplyCount(supplyPos, state) < 1 )
    $$$$$: 1297-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1298:    {
    #####: 1299:      return -1;
    $$$$$: 1299-block  0
unconditional  0 never executed
        -: 1300:    }
        -: 1301:	
        -: 1302:  //added card for [whoseTurn] current player:
        -: 1303:  // toFlag = 0 : add to discard
        -: 1304:  // toFlag = 1 : add to deck
        -: 1305:  // toFlag = 2 : add to hand
        -: 1306:
    #####: 1307:  if (toFlag == 1)
    $$$$$: 1307-block  0
branch  0 never executed
branch  1 never executed
        -: 1308:    {
    #####: 1309:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1310:      state->deckCount[player]++;
    $$$$$: 1310-block  0
unconditional  0 never executed
        -: 1311:    }
    #####: 1312:  else if (toFlag == 2)
    $$$$$: 1312-block  0
branch  0 never executed
branch  1 never executed
        -: 1313:    {
    #####: 1314:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1315:      state->handCount[player]++;
    $$$$$: 1315-block  0
unconditional  0 never executed
        -: 1316:    }
        -: 1317:  else
        -: 1318:    {
    #####: 1319:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1320:      state->discardCount[player]++;
    $$$$$: 1320-block  0
unconditional  0 never executed
        -: 1321:    }
        -: 1322:	
        -: 1323:  //decrease number in supply pile
    #####: 1324:  state->supplyCount[supplyPos]--;
        -: 1325:	 
    #####: 1326:  return 0;
    $$$$$: 1326-block  0
unconditional  0 never executed
        -: 1327:}
        -: 1328:
function updateCoins called 68 returned 100% blocks executed 100%
       68: 1329:int updateCoins(int player, struct gameState *state, int bonus)
       68: 1329-block  0
        -: 1330:{
        -: 1331:  int i;
        -: 1332:	
        -: 1333:  //reset coin count
       68: 1334:  state->coins = 0;
        -: 1335:
        -: 1336:  //add coins for each Treasure card in player's hand
      398: 1337:  for (i = 0; i < state->handCount[player]; i++)
       68: 1337-block  0
unconditional  0 taken 68
      330: 1337-block  1
unconditional  1 taken 330
      398: 1337-block  2
branch  2 taken 330
branch  3 taken 68 (fallthrough)
        -: 1338:    {
      330: 1339:      if (state->hand[player][i] == copper)
      330: 1339-block  0
branch  0 taken 237 (fallthrough)
branch  1 taken 93
        -: 1340:	{
      237: 1341:	  state->coins += 1;
      237: 1341-block  0
unconditional  0 taken 237
        -: 1342:	}
       93: 1343:      else if (state->hand[player][i] == silver)
       93: 1343-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 84
        -: 1344:	{
        9: 1345:	  state->coins += 2;
        9: 1345-block  0
unconditional  0 taken 9
        -: 1346:	}
       84: 1347:      else if (state->hand[player][i] == gold)
       84: 1347-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 76
        -: 1348:	{
        8: 1349:	  state->coins += 3;
        8: 1349-block  0
unconditional  0 taken 8
        -: 1350:	}	
        -: 1351:    }	
        -: 1352:
        -: 1353:  //add bonus
       68: 1354:  state->coins += bonus;
        -: 1355:
       68: 1356:  return 0;
       68: 1356-block  0
unconditional  0 taken 68
        -: 1357:}
        -: 1358:
        -: 1359:
        -: 1360://end of dominion.c
        -: 1361:

TESTING VILLAGEEFFECT() CARD EFFECT FUNCTION


TEST 1: PROPER RETURN OCCURS
----TEST PASSED----  THE FUNCTION DID NOT CRASH AND RETURNED PROPERLY

TEST 2: +TWO ACTIONS ARE GIVEN AFTER CARD USED
----TEST FAILED----  TWO ADDITIONAL ACTIONS WERE NOT GAINED

TEST 3: ONE CARD IS DRAWN
----TEST PASSED----  ONE CARD WAS DRAWN

TEST 4: CALLING THE FUNCTION DOES NOT CHANGE THE OTHER PLAYER'S CARDS
----TEST PASSED----  THE OTHER PLAYER'S HAND/DECK/DISCARD WAS NOT CHANGED

TEST 5: CALLING THE FUNCTION DOES NOT CHANGE SUPPLY COUNT OF THE CARDS
----TEST PASSED----  THE SUPPLY COUNT DID NOT CHANGE

TEST 6: CHECK TO MAKE SURE THE FUNCTION WORKS PROPERLY IF VILLAGE IS THE ONLY CARD THE PLAYER HAS
----TEST FAILED----  THE FUNCTION DID NOT RETURN PROPERLY

TEST 7: CHECK TO MAKE SURE THE VILLAGE CARD IS DISCARDED
----TEST FAILED----  THE CARD WAS NOT PROPERLY DISCARDED
NOT ALL TESTS PASSED. NUMBER OF FAILS: 3
Function 'updateCoins'
Lines executed:100.00% of 11
No branches
No calls

Function 'gainCard'
Lines executed:0.00% of 13
No branches
No calls

Function 'discardCard'
Lines executed:76.92% of 13
No branches
No calls

Function 'cardEffect'
Lines executed:0.00% of 210
No branches
No calls

Function 'embargoEffect'
Lines executed:0.00% of 7
No branches
No calls

Function 'villageEffect'
Lines executed:100.00% of 5
No branches
No calls

Function 'outpostEffect'
Lines executed:100.00% of 3
No branches
No calls

Function 'smithyEffect'
Lines executed:100.00% of 4
No branches
No calls

Function 'adventurerEffect'
Lines executed:100.00% of 15
No branches
No calls

Function 'getCost'
Lines executed:0.00% of 30
No branches
No calls

Function 'drawCard'
Lines executed:100.00% of 22
No branches
No calls

Function 'getWinners'
Lines executed:0.00% of 24
No branches
No calls

Function 'scoreFor'
Lines executed:0.00% of 24
No branches
No calls

Function 'isGameOver'
Lines executed:90.00% of 10
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 20
No branches
No calls

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 9
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
No calls

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
No calls

Function 'buyCard'
Lines executed:0.00% of 13
No branches
No calls

Function 'playCard'
Lines executed:0.00% of 14
No branches
No calls

Function 'shuffle'
Lines executed:100.00% of 16
No branches
No calls

Function 'initializeGame'
Lines executed:96.77% of 62
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
No branches
No calls

File 'dominion.c'
Lines executed:31.47% of 556
Branches executed:26.86% of 417
Taken at least once:25.42% of 417
Calls executed:15.05% of 93
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:12
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 9730766 returned 100% blocks executed 100%
  9730766:    8:int compare(const void* a, const void* b) {
  9730766:    8-block  0
  9730766:    9:  if (*(int*)a > *(int*)b)
  9730766:    9-block  0
branch  0 taken 4863001 (fallthrough)
branch  1 taken 4867765
  4863001:   10:    return 1;
  4863001:   10-block  0
unconditional  0 taken 4863001
  4867765:   11:  if (*(int*)a < *(int*)b)
  4867765:   11-block  0
branch  0 taken 1719970 (fallthrough)
branch  1 taken 3147795
  1719970:   12:    return -1;
  1719970:   12-block  0
unconditional  0 taken 1719970
  3147795:   13:  return 0;
  3147795:   13-block  0
unconditional  0 taken 3147795
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
unconditional  0 never executed
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
unconditional  0 never executed
        -:   35:}
        -:   36:
function initializeGame called 40049 returned 100% blocks executed 97%
    40049:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
    40049:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    40049:   44:  SelectStream(1);
    40049:   44-block  0
call    0 returned 40049
    40049:   45:  PutSeed((long)randomSeed);
call    0 returned 40049
        -:   46:  
        -:   47:  //check number of players
    40049:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 40049 (fallthrough)
branch  1 taken 0
    40049:   48-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 40049
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
unconditional  0 never executed
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    40049:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    95149:   57:  for (i = 0; i < 10; i++)
    40049:   57-block  0
unconditional  0 taken 40049
    55100:   57-block  1
unconditional  1 taken 55100
    95149:   57-block  2
branch  2 taken 95091
branch  3 taken 58 (fallthrough)
        -:   58:    {
   931257:   59:      for (j = 0; j < 10; j++)
    95091:   59-block  0
unconditional  0 taken 95091
   836166:   59-block  1
unconditional  1 taken 836166
   931257:   59-block  2
branch  2 taken 876157
branch  3 taken 55100 (fallthrough)
        -:   60:        {
   876157:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
   876157:   61-block  0
branch  0 taken 781066 (fallthrough)
branch  1 taken 95091
   781066:   61-block  1
branch  2 taken 39991 (fallthrough)
branch  3 taken 741075
        -:   62:	    {
    39991:   63:	      return -1;
    39991:   63-block  0
unconditional  0 taken 39991
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       58:   73:  if (numPlayers == 2)
       58:   73-block  0
branch  0 taken 32 (fallthrough)
branch  1 taken 26
        -:   74:    {
       32:   75:      state->supplyCount[curse] = 10;
       32:   75-block  0
unconditional  0 taken 32
        -:   76:    }
       26:   77:  else if (numPlayers == 3)
       26:   77-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 16
        -:   78:    {
       10:   79:      state->supplyCount[curse] = 20;
       10:   79-block  0
unconditional  0 taken 10
        -:   80:    }
        -:   81:  else
        -:   82:    {
       16:   83:      state->supplyCount[curse] = 30;
       16:   83-block  0
unconditional  0 taken 16
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       58:   87:  if (numPlayers == 2)
       58:   87-block  0
branch  0 taken 32 (fallthrough)
branch  1 taken 26
        -:   88:    {
       32:   89:      state->supplyCount[estate] = 8;
       32:   90:      state->supplyCount[duchy] = 8;
       32:   91:      state->supplyCount[province] = 8;
       32:   91-block  0
unconditional  0 taken 32
        -:   92:    }
        -:   93:  else
        -:   94:    {
       26:   95:      state->supplyCount[estate] = 12;
       26:   96:      state->supplyCount[duchy] = 12;
       26:   97:      state->supplyCount[province] = 12;
       26:   97-block  0
unconditional  0 taken 26
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       58:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       58:  102:  state->supplyCount[silver] = 40;
       58:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1218:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
       58:  106-block  0
unconditional  0 taken 58
     1160:  106-block  1
unconditional  1 taken 1160
     1218:  106-block  2
branch  2 taken 1160
branch  3 taken 58 (fallthrough)
        -:  107:    {
     9596:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
     1160:  108-block  0
unconditional  0 taken 1160
     8436:  108-block  1
unconditional  1 taken 8436
     9596:  108-block  2
branch  2 taken 8990
branch  3 taken 606 (fallthrough)
        -:  109:	{
     8990:  110:	  if (kingdomCards[j] == i)
     8990:  110-block  0
branch  0 taken 554 (fallthrough)
branch  1 taken 8436
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      554:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
      554:  113-block  0
branch  0 taken 522 (fallthrough)
branch  1 taken 32
      522:  113-block  1
branch  2 taken 58 (fallthrough)
branch  3 taken 464
        -:  114:		{
      180:  115:		  if (numPlayers == 2){ 
       90:  115-block  0
branch  0 taken 38 (fallthrough)
branch  1 taken 52
       90:  115-block  1
unconditional  2 taken 90
       38:  116:		    state->supplyCount[i] = 8; 
       38:  116-block  0
unconditional  0 taken 38
        -:  117:		  }
       52:  118:		  else{ state->supplyCount[i] = 12; }
       52:  118-block  0
unconditional  0 taken 52
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      464:  122:		  state->supplyCount[i] = 10;
      464:  122-block  0
unconditional  0 taken 464
        -:  123:		}
      554:  124:	      break;
      554:  124-block  0
unconditional  0 taken 554
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     8436:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      216:  138:  for (i = 0; i < numPlayers; i++)
       58:  138-block  0
unconditional  0 taken 58
      158:  138-block  1
unconditional  1 taken 158
      216:  138-block  2
branch  2 taken 158
branch  3 taken 58 (fallthrough)
        -:  139:    {
      158:  140:      state->deckCount[i] = 0;
      632:  141:      for (j = 0; j < 3; j++)
      158:  141-block  0
unconditional  0 taken 158
      474:  141-block  1
unconditional  1 taken 474
      632:  141-block  2
branch  2 taken 474
branch  3 taken 158 (fallthrough)
        -:  142:	{
      474:  143:	  state->deck[i][j] = estate;
      474:  144:	  state->deckCount[i]++;
        -:  145:	}
     1264:  146:      for (j = 3; j < 10; j++)
      158:  146-block  0
unconditional  0 taken 158
     1106:  146-block  1
unconditional  1 taken 1106
     1264:  146-block  2
branch  2 taken 1106
branch  3 taken 158 (fallthrough)
        -:  147:	{
     1106:  148:	  state->deck[i][j] = copper;
     1106:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      216:  154:  for (i = 0; i < numPlayers; i++)
       58:  154-block  0
unconditional  0 taken 58
      158:  154-block  1
unconditional  1 taken 158
      216:  154-block  2
branch  2 taken 158
branch  3 taken 58 (fallthrough)
        -:  155:    {
      158:  156:      if ( shuffle(i, state) < 0 )
      158:  156-block  0
call    0 returned 158
branch  1 taken 0 (fallthrough)
branch  2 taken 158
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
unconditional  0 never executed
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      216:  163:  for (i = 0; i < numPlayers; i++)
       58:  163-block  0
unconditional  0 taken 58
      158:  163-block  1
unconditional  1 taken 158
      216:  163-block  2
branch  2 taken 158
branch  3 taken 58 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      158:  166:      state->handCount[i] = 0;
      158:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1624:  176:  for (i = 0; i <= treasure_map; i++)
       58:  176-block  0
unconditional  0 taken 58
     1566:  176-block  1
unconditional  1 taken 1566
     1624:  176-block  2
branch  2 taken 1566
branch  3 taken 58 (fallthrough)
        -:  177:    {
     1566:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       58:  182:  state->outpostPlayed = 0;
       58:  183:  state->phase = 0;
       58:  184:  state->numActions = 1;
       58:  185:  state->numBuys = 1;
       58:  186:  state->playedCardCount = 0;
       58:  187:  state->whoseTurn = 0;
       58:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      348:  192:  for (it = 0; it < 5; it++){
       58:  192-block  0
unconditional  0 taken 58
unconditional  1 taken 290
      348:  192-block  1
branch  2 taken 290
branch  3 taken 58 (fallthrough)
      290:  193:    drawCard(state->whoseTurn, state);
      290:  193-block  0
call    0 returned 290
        -:  194:  }
        -:  195:
       58:  196:  updateCoins(state->whoseTurn, state, 0);
       58:  196-block  0
call    0 returned 58
        -:  197:
       58:  198:  return 0;
unconditional  0 taken 58
        -:  199:}
        -:  200:
function shuffle called 21340 returned 100% blocks executed 100%
    21340:  201:int shuffle(int player, struct gameState *state) {
    21340:  201-block  0
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    21340:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    21340:  209:  if (state->deckCount[player] < 1)
    21340:  209-block  0
branch  0 taken 7835 (fallthrough)
branch  1 taken 13505
     7835:  210:    return -1;
     7835:  210-block  0
unconditional  0 taken 7835
    13505:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
    13505:  211-block  0
call    0 returned 13505
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  1479687:  214:  while (state->deckCount[player] > 0) {
unconditional  0 taken 13505
  1479687:  214-block  0
branch  1 taken 1466182
branch  2 taken 13505 (fallthrough)
  1466182:  215:    card = floor(Random() * state->deckCount[player]);
  1466182:  215-block  0
call    0 returned 1466182
  1466182:  216:    newDeck[newDeckPos] = state->deck[player][card];
  1466182:  217:    newDeckPos++;
102731134:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
unconditional  0 taken 1466182
101264952:  218-block  0
unconditional  1 taken 101264952
102731134:  218-block  1
branch  2 taken 101264952
branch  3 taken 1466182 (fallthrough)
101264952:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  1466182:  221:    state->deckCount[player]--;
  1466182:  221-block  0
unconditional  0 taken 1466182
        -:  222:  }
  1479687:  223:  for (i = 0; i < newDeckPos; i++) {
    13505:  223-block  0
unconditional  0 taken 13505
  1466182:  223-block  1
unconditional  1 taken 1466182
  1479687:  223-block  2
branch  2 taken 1466182
branch  3 taken 13505 (fallthrough)
  1466182:  224:    state->deck[player][i] = newDeck[i];
  1466182:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    21340:  228:  return 0;
    13505:  228-block  0
unconditional  0 taken 13505
    21340:  228-block  1
unconditional  1 taken 21340
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  231-block  0
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
unconditional  0 never executed
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
unconditional  0 never executed
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
unconditional  0 never executed
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
unconditional  0 never executed
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
unconditional  0 never executed
    $$$$$:  269-block  0
unconditional  1 never executed
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  272-block  0
    $$$$$:  272-block  1
unconditional  0 never executed
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    $$$$$:  282-block  0
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    $$$$$:  285-block  0
unconditional  0 never executed
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
unconditional  0 never executed
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
    $$$$$:  293-block  0
unconditional  0 never executed
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  297-block  0
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
unconditional  0 never executed
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    $$$$$:  308-block  0
unconditional  0 never executed
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    $$$$$:  311-block  0
    #####:  312:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  312-block  0
call    0 never executed
unconditional  1 never executed
        -:  313:}
        -:  314:
function handCard called 4 returned 100% blocks executed 100%
        4:  315:int handCard(int handPos, struct gameState *state) {
        4:  315-block  0
        4:  316:  int currentPlayer = whoseTurn(state);
        4:  316-block  0
call    0 returned 4
        4:  317:  return state->hand[currentPlayer][handPos];
unconditional  0 taken 4
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    $$$$$:  320-block  0
    #####:  321:  return state->supplyCount[card];
    $$$$$:  321-block  0
unconditional  0 never executed
        -:  322:}
        -:  323:
function fullDeckCount called 5 returned 100% blocks executed 100%
        5:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        5:  324-block  0
        -:  325:  int i;
        5:  326:  int count = 0;
        -:  327:
       22:  328:  for (i = 0; i < state->deckCount[player]; i++)
        5:  328-block  0
unconditional  0 taken 5
       17:  328-block  1
unconditional  1 taken 17
       22:  328-block  2
branch  2 taken 17
branch  3 taken 5 (fallthrough)
        -:  329:    {
       17:  330:      if (state->deck[player][i] == card) count++;
       17:  330-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 12
        5:  330-block  1
unconditional  2 taken 5
        -:  331:    }
        -:  332:
       22:  333:  for (i = 0; i < state->handCount[player]; i++)
        5:  333-block  0
unconditional  0 taken 5
       17:  333-block  1
unconditional  1 taken 17
       22:  333-block  2
branch  2 taken 17
branch  3 taken 5 (fallthrough)
        -:  334:    {
       17:  335:      if (state->hand[player][i] == card) count++;
       17:  335-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 9
        8:  335-block  1
unconditional  2 taken 8
        -:  336:    }
        -:  337:
       22:  338:  for (i = 0; i < state->discardCount[player]; i++)
        5:  338-block  0
unconditional  0 taken 5
       17:  338-block  1
unconditional  1 taken 17
       22:  338-block  2
branch  2 taken 17
branch  3 taken 5 (fallthrough)
        -:  339:    {
       17:  340:      if (state->discard[player][i] == card) count++;
       17:  340-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 10
        7:  340-block  1
unconditional  2 taken 7
        -:  341:    }
        -:  342:
        5:  343:  return count;
        5:  343-block  0
unconditional  0 taken 5
        -:  344:}
        -:  345:
function whoseTurn called 4 returned 100% blocks executed 100%
        4:  346:int whoseTurn(struct gameState *state) {
        4:  346-block  0
        4:  347:  return state->whoseTurn;
        4:  347-block  0
unconditional  0 taken 4
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
unconditional  0 never executed
    $$$$$:  356-block  0
unconditional  1 never executed
    $$$$$:  356-block  1
branch  2 never executed
branch  3 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
unconditional  0 never executed
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
unconditional  0 never executed
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  380-block  1
branch  2 never executed
branch  3 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
unconditional  0 never executed
        -:  388:}
        -:  389:
function isGameOver called 7 returned 100% blocks executed 91%
        7:  390:int isGameOver(struct gameState *state) {
        7:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        7:  395:  if (state->supplyCount[province] == 0)
        7:  395-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 4
        -:  396:    {
        3:  397:      return 1;
        3:  397-block  0
unconditional  0 taken 3
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        4:  402-block  0
unconditional  0 taken 4
      100:  402-block  1
unconditional  1 taken 100
      104:  402-block  2
branch  2 taken 100
branch  3 taken 4 (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
      100:  404-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 94
        -:  405:	{
        6:  406:	  j++;
        6:  406-block  0
unconditional  0 taken 6
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        4:  409-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -:  410:    {
    #####:  411:      return 1;
    $$$$$:  411-block  0
unconditional  0 never executed
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        4:  414-block  0
unconditional  0 taken 4
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
unconditional  0 never executed
    $$$$$:  422-block  1
unconditional  1 never executed
    $$$$$:  422-block  2
branch  2 never executed
branch  3 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
unconditional  2 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
unconditional  2 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
unconditional  2 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
unconditional  2 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
unconditional  2 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
unconditional  3 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
unconditional  0 never executed
    $$$$$:  433-block  1
unconditional  1 never executed
    $$$$$:  433-block  2
branch  2 never executed
branch  3 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
unconditional  2 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
unconditional  2 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
unconditional  2 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
unconditional  2 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
unconditional  2 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
unconditional  3 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
unconditional  0 never executed
    $$$$$:  444-block  1
unconditional  1 never executed
    $$$$$:  444-block  2
branch  2 never executed
branch  3 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
unconditional  2 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
unconditional  2 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
unconditional  2 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
unconditional  2 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
unconditional  2 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
unconditional  3 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
unconditional  0 never executed
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
unconditional  0 never executed
    $$$$$:  464-block  1
unconditional  1 never executed
    $$$$$:  464-block  2
branch  2 never executed
branch  3 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
unconditional  0 never executed
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
unconditional  1 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
unconditional  0 never executed
    $$$$$:  479-block  1
unconditional  1 never executed
    $$$$$:  479-block  2
branch  2 never executed
branch  3 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
unconditional  0 never executed
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
    $$$$$:  490-block  0
unconditional  1 never executed
    $$$$$:  490-block  1
branch  2 never executed
branch  3 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
unconditional  0 never executed
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
unconditional  0 never executed
    $$$$$:  500-block  1
unconditional  1 never executed
    $$$$$:  500-block  2
branch  2 never executed
branch  3 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
unconditional  0 never executed
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
unconditional  0 never executed
    $$$$$:  510-block  1
unconditional  1 never executed
    $$$$$:  510-block  2
branch  2 never executed
branch  3 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
unconditional  0 never executed
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
unconditional  0 never executed
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
unconditional  0 never executed
        -:  523:}
        -:  524:
function drawCard called 144549 returned 100% blocks executed 100%
   144549:  525:int drawCard(int player, struct gameState *state)
   144549:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
   144549:  528:  if (state->deckCount[player] <= 0){//Deck is empty
   144549:  528-block  0
branch  0 taken 7259 (fallthrough)
branch  1 taken 137290
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
  1465191:  533:    for (i = 0; i < state->discardCount[player];i++){
     7259:  533-block  0
unconditional  0 taken 7259
  1457932:  533-block  1
unconditional  1 taken 1457932
  1465191:  533-block  2
branch  2 taken 1457932
branch  3 taken 7259 (fallthrough)
  1457932:  534:      state->deck[player][i] = state->discard[player][i];
  1457932:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     7259:  538:    state->deckCount[player] = state->discardCount[player];
     7259:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     7259:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
     7259:  542-block  0
call    0 returned 7259
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     7259:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     7259:  551:    count = state->handCount[player];//Get current player's hand count
unconditional  0 taken 7259
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     7259:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     7259:  559:    if (deckCounter == 0)
     7259:  559-block  0
branch  0 taken 582 (fallthrough)
branch  1 taken 6677
      582:  560:      return -1;
      582:  560-block  0
unconditional  0 taken 582
        -:  561:
     6677:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     6677:  563:    state->deckCount[player]--;
     6677:  564:    state->handCount[player]++;//Increment hand count
     6677:  564-block  0
unconditional  0 taken 6677
        -:  565:  }
        -:  566:
        -:  567:  else{
   137290:  568:    int count = state->handCount[player];//Get current hand count for player
   137290:  568-block  0
unconditional  0 taken 137290
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   137290:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   137290:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   137290:  576:    state->deckCount[player]--;
   137290:  577:    state->handCount[player]++;//Increment hand count
   137290:  577-block  0
unconditional  0 taken 137290
        -:  578:  }
        -:  579:
   143967:  580:  return 0;
   143967:  580-block  0
unconditional  0 taken 143967
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
    $$$$$:  583-block  0
        -:  584:{
    #####:  585:  switch( cardNumber ) 
    $$$$$:  585-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
    $$$$$:  588-block  0
unconditional  0 never executed
        -:  589:    case estate:
    #####:  590:      return 2;
    $$$$$:  590-block  0
unconditional  0 never executed
        -:  591:    case duchy:
    #####:  592:      return 5;
    $$$$$:  592-block  0
unconditional  0 never executed
        -:  593:    case province:
    #####:  594:      return 8;
    $$$$$:  594-block  0
unconditional  0 never executed
        -:  595:    case copper:
    #####:  596:      return 0;
    $$$$$:  596-block  0
unconditional  0 never executed
        -:  597:    case silver:
    #####:  598:      return 3;
    $$$$$:  598-block  0
unconditional  0 never executed
        -:  599:    case gold:
    #####:  600:      return 6;
    $$$$$:  600-block  0
unconditional  0 never executed
        -:  601:    case adventurer:
    #####:  602:      return 6;
    $$$$$:  602-block  0
unconditional  0 never executed
        -:  603:    case council_room:
    #####:  604:      return 5;
    $$$$$:  604-block  0
unconditional  0 never executed
        -:  605:    case feast:
    #####:  606:      return 4;
    $$$$$:  606-block  0
unconditional  0 never executed
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
unconditional  0 never executed
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
unconditional  0 never executed
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
unconditional  0 never executed
        -:  613:    case smithy:
    #####:  614:      return 4;
    $$$$$:  614-block  0
unconditional  0 never executed
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
unconditional  0 never executed
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
unconditional  0 never executed
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
unconditional  0 never executed
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
unconditional  0 never executed
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
unconditional  0 never executed
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
unconditional  0 never executed
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
unconditional  0 never executed
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
unconditional  0 never executed
        -:  631:    case embargo: 
    #####:  632:      return 2;
    $$$$$:  632-block  0
unconditional  0 never executed
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
unconditional  0 never executed
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
unconditional  0 never executed
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
unconditional  0 never executed
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
unconditional  0 never executed
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
unconditional  0 never executed
        -:  644:}
        -:  645:
function adventurerEffect called 10006 returned 100% blocks executed 100%
    10006:  646:int adventurerEffect(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphandCounter, int temphand []) {
    10006:  646-block  0
        -:  647:	
   144248:  648:	while (drawntreasure <= 2) {
    10006:  648-block  0
unconditional  0 taken 10006
   144248:  648-block  1
branch  1 taken 134242
branch  2 taken 10006 (fallthrough)
   134242:  649:		if (state->deckCount[currentPlayer] <= 1) {//if the deck is empty we need to shuffle discard and add to deck
   134242:  649-block  0
branch  0 taken 13923 (fallthrough)
branch  1 taken 120319
    13923:  650:			shuffle(currentPlayer, state);
    13923:  650-block  0
call    0 returned 13923
unconditional  1 taken 13923
        -:  651:		}
   134242:  652:		drawCard(currentPlayer, state);
   134242:  652-block  0
call    0 returned 134242
   134242:  653:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
   134242:  654:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 120924 (fallthrough)
branch  1 taken 13318
   120924:  654-block  0
branch  2 taken 107614 (fallthrough)
branch  3 taken 13310
   107614:  654-block  1
branch  4 taken 3390 (fallthrough)
branch  5 taken 104224
    30018:  655:			drawntreasure++;
    30018:  655-block  0
unconditional  0 taken 30018
        -:  656:		else {
   104224:  657:			temphand[temphandCounter] = cardDrawn;
   104224:  658:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   104224:  659:			temphandCounter++;
   104224:  659-block  0
unconditional  0 taken 104224
        -:  660:		}
        -:  661:	}
   114230:  662:	while (temphandCounter - 1 >= 0) {
    10006:  662-block  0
unconditional  0 taken 10006
   114230:  662-block  1
branch  1 taken 104224
branch  2 taken 10006 (fallthrough)
   104224:  663:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[temphandCounter - 1]; // discard all cards in play that have been drawn
   104224:  664:		temphandCounter = temphandCounter - 1;
   104224:  664-block  0
unconditional  0 taken 104224
        -:  665:	}
    10006:  666:	return 0;
    10006:  666-block  0
unconditional  0 taken 10006
        -:  667:}
        -:  668:
function smithyEffect called 5 returned 100% blocks executed 100%
        5:  669:int smithyEffect(int currentPlayer, struct gameState *state, int handPos, int i) {
        5:  669-block  0
        -:  670:	
        -:  671:	//+3 Cards
       15:  672:	for (i = 1; i < 3; i++)
        5:  672-block  0
unconditional  0 taken 5
unconditional  1 taken 10
       15:  672-block  1
branch  2 taken 10
branch  3 taken 5 (fallthrough)
        -:  673:	{
       10:  674:		drawCard(currentPlayer, state);
       10:  674-block  0
call    0 returned 10
        -:  675:	}
        -:  676:
        -:  677:	//discard card from hand
        -:  678:	//discardCard(handPos, currentPlayer, state, 0);
        5:  679:	return 0;
        5:  679-block  0
unconditional  0 taken 5
        -:  680:}
        -:  681:
function outpostEffect called 20005 returned 100% blocks executed 100%
    20005:  682:int outpostEffect(int currentPlayer, struct gameState *state, int handPos) {
    20005:  682-block  0
        -:  683:	
        -:  684:	//set outpost flag
    20005:  685:	state->outpostPlayed++;
        -:  686:
        -:  687:	//discard card
        -:  688:	//discardCard(handPos, currentPlayer, state, 0);
    20005:  689:	return 0;
    20005:  689-block  0
unconditional  0 taken 20005
        -:  690:}
        -:  691:
function villageEffect called 10007 returned 100% blocks executed 100%
    10007:  692:int villageEffect(int currentPlayer, struct gameState *state, int handPos) {
    10007:  692-block  0
        -:  693:	
        -:  694:	//+1 Card
    10007:  695:	drawCard(currentPlayer, state);
    10007:  695-block  0
call    0 returned 10007
        -:  696:
        -:  697:	//+2 Actions
    10007:  698:	state->numActions = state->numActions + 3;
        -:  699:
        -:  700:	//discard played card from hand
    10007:  701:	discardCard(handPos, currentPlayer, state, 1);
call    0 returned 10007
    10007:  702:	return 0;
unconditional  0 taken 10007
        -:  703:}
        -:  704:
function embargoEffect called 0 returned 0% blocks executed 0%
    #####:  705:int embargoEffect(int currentPlayer, struct gameState *state, int handPos, int choice1) {
    $$$$$:  705-block  0
        -:  706:	//+2 Coins
    #####:  707:	state->coins = state->coins + 2;
        -:  708:
        -:  709:	//see if selected pile is in play
    #####:  710:	if (state->supplyCount[choice1] == -1)
    $$$$$:  710-block  0
branch  0 never executed
branch  1 never executed
        -:  711:	{
    #####:  712:		return -1;
    $$$$$:  712-block  0
unconditional  0 never executed
        -:  713:	}
        -:  714:
        -:  715:	//add embargo token to selected supply pile
    #####:  716:	state->embargoTokens[choice1]++;
        -:  717:
        -:  718:	//trash card
    #####:  719:	discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  719-block  0
call    0 never executed
    #####:  720:	return 0;
unconditional  0 never executed
        -:  721:}
        -:  722:
        -:  723:
        -:  724:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  725:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
    $$$$$:  725-block  0
        -:  726:{
        -:  727:  int i;
        -:  728:  int j;
        -:  729:  int k;
        -:  730:  int x;
        -:  731:  int index;
    #####:  732:  int currentPlayer = whoseTurn(state);
    $$$$$:  732-block  0
call    0 never executed
    #####:  733:  int nextPlayer = currentPlayer + 1;
        -:  734:
    #####:  735:  int tributeRevealedCards[2] = {-1, -1};
        -:  736:  int temphand[MAX_HAND];// moved above the if statement
    #####:  737:  int drawntreasure=0;
        -:  738:  int cardDrawn;
    #####:  739:  int z = 0;// this is the counter for the temp hand
    #####:  740:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  741:    nextPlayer = 0;
    $$$$$:  741-block  0
unconditional  0 never executed
        -:  742:  }
        -:  743:  
        -:  744:	
        -:  745:  //uses switch to select card and perform actions
    #####:  746:  switch( card ) 
    $$$$$:  746-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  747:    {
        -:  748:    case adventurer:
    #####:  749:		return adventurerEffect(drawntreasure, state, currentPlayer, cardDrawn, z, temphand);
    $$$$$:  749-block  0
call    0 never executed
unconditional  1 never executed
        -:  750:			
        -:  751:    case council_room:
        -:  752:      //+4 Cards
    #####:  753:      for (i = 0; i < 4; i++)
    $$$$$:  753-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  753-block  1
branch  2 never executed
branch  3 never executed
        -:  754:	{
    #####:  755:	  drawCard(currentPlayer, state);
    $$$$$:  755-block  0
call    0 never executed
        -:  756:	}
        -:  757:			
        -:  758:      //+1 Buy
    #####:  759:      state->numBuys++;
        -:  760:			
        -:  761:      //Each other player draws a card
    #####:  762:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  762-block  0
unconditional  0 never executed
    $$$$$:  762-block  1
unconditional  1 never executed
    $$$$$:  762-block  2
branch  2 never executed
branch  3 never executed
        -:  763:	{
    #####:  764:	  if ( i != currentPlayer )
    $$$$$:  764-block  0
branch  0 never executed
branch  1 never executed
        -:  765:	    {
    #####:  766:	      drawCard(i, state);
    $$$$$:  766-block  0
call    0 never executed
unconditional  1 never executed
        -:  767:	    }
        -:  768:	}
        -:  769:			
        -:  770:      //put played card in played card pile
    #####:  771:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  771-block  0
call    0 never executed
        -:  772:			
    #####:  773:      return 0;
unconditional  0 never executed
        -:  774:			
        -:  775:    case feast:
        -:  776:      //gain card with cost up to 5
        -:  777:      //Backup hand
    #####:  778:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  778-block  0
unconditional  0 never executed
    $$$$$:  778-block  1
unconditional  1 never executed
    $$$$$:  778-block  2
branch  2 never executed
branch  3 never executed
    #####:  779:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  780:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  781:      }
        -:  782:      //Backup hand
        -:  783:
        -:  784:      //Update Coins for Buy
    #####:  785:      updateCoins(currentPlayer, state, 5);
    $$$$$:  785-block  0
call    0 never executed
    #####:  786:      x = 1;//Condition to loop on
    #####:  787:      while( x == 1) {//Buy one card
unconditional  0 never executed
    $$$$$:  787-block  0
branch  1 never executed
branch  2 never executed
    #####:  788:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  788-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  789:	  if (DEBUG)
        -:  790:	    printf("None of that card left, sorry!\n");
        -:  791:
        -:  792:	  if (DEBUG){
        -:  793:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  794:	  }
        -:  795:	}
    #####:  796:	else if (state->coins < getCost(choice1)){
    $$$$$:  796-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  797:	  printf("That card is too expensive!\n");
    $$$$$:  797-block  0
call    0 never executed
unconditional  1 never executed
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  801:	  }
        -:  802:	}
        -:  803:	else{
        -:  804:
        -:  805:	  if (DEBUG){
        -:  806:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  807:	  }
        -:  808:
    #####:  809:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  809-block  0
call    0 never executed
    #####:  810:	  x = 0;//No more buying cards
unconditional  0 never executed
        -:  811:
        -:  812:	  if (DEBUG){
        -:  813:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  814:	  }
        -:  815:
        -:  816:	}
        -:  817:      }     
        -:  818:
        -:  819:      //Reset Hand
    #####:  820:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  820-block  0
unconditional  0 never executed
    $$$$$:  820-block  1
unconditional  1 never executed
    $$$$$:  820-block  2
branch  2 never executed
branch  3 never executed
    #####:  821:	state->hand[currentPlayer][i] = temphand[i];
    #####:  822:	temphand[i] = -1;
        -:  823:      }
        -:  824:      //Reset Hand
        -:  825:      			
    #####:  826:      return 0;
    $$$$$:  826-block  0
unconditional  0 never executed
        -:  827:			
        -:  828:    case gardens:
    #####:  829:      return -1;
    $$$$$:  829-block  0
unconditional  0 never executed
        -:  830:			
        -:  831:    case mine:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  834-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  834-block  1
branch  2 never executed
branch  3 never executed
        -:  835:	{
    #####:  836:	  return -1;
    $$$$$:  836-block  0
unconditional  0 never executed
        -:  837:	}
        -:  838:		
    #####:  839:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  839-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  839-block  1
branch  2 never executed
branch  3 never executed
        -:  840:	{
    #####:  841:	  return -1;
    $$$$$:  841-block  0
unconditional  0 never executed
        -:  842:	}
        -:  843:
    #####:  844:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  844-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  845:	{
    #####:  846:	  return -1;
    $$$$$:  846-block  0
unconditional  0 never executed
        -:  847:	}
        -:  848:
    #####:  849:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  849-block  0
call    0 never executed
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  855-block  0
unconditional  1 never executed
    $$$$$:  855-block  1
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  857-block  0
branch  0 never executed
branch  1 never executed
        -:  858:	    {
    #####:  859:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  859-block  0
call    0 never executed
    #####:  860:	      break;
unconditional  0 never executed
        -:  861:	    }
        -:  862:	}
        -:  863:			
    #####:  864:      return 0;
    $$$$$:  864-block  0
unconditional  0 never executed
        -:  865:			
        -:  866:    case remodel:
    #####:  867:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  868:
    #####:  869:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  869-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  870:	{
    #####:  871:	  return -1;
    $$$$$:  871-block  0
unconditional  0 never executed
        -:  872:	}
        -:  873:
    #####:  874:      gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  874-block  0
call    0 never executed
        -:  875:
        -:  876:      //discard card from hand
    #####:  877:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  878:
        -:  879:      //discard trashed card
    #####:  880:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  880-block  0
unconditional  1 never executed
    $$$$$:  880-block  1
branch  2 never executed
branch  3 never executed
        -:  881:	{
    #####:  882:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  882-block  0
branch  0 never executed
branch  1 never executed
        -:  883:	    {
    #####:  884:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  884-block  0
call    0 never executed
    #####:  885:	      break;
unconditional  0 never executed
        -:  886:	    }
        -:  887:	}
        -:  888:
        -:  889:
    #####:  890:      return 0;
    $$$$$:  890-block  0
unconditional  0 never executed
        -:  891:		
        -:  892:    case smithy:
        -:  893:
    #####:  894:		return smithyEffect(currentPlayer, state, handPos, i);
    $$$$$:  894-block  0
call    0 never executed
unconditional  1 never executed
        -:  895:		
        -:  896:    case village:
        -:  897:
    #####:  898:		return villageEffect(currentPlayer, state, handPos);
    $$$$$:  898-block  0
call    0 never executed
unconditional  1 never executed
        -:  899:		
        -:  900:    case baron:
    #####:  901:      state->numBuys++;//Increase buys by 1!
    #####:  902:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  902-block  0
branch  0 never executed
branch  1 never executed
    #####:  903:	int p = 0;//Iterator for hand!
    #####:  904:	int card_not_discarded = 1;//Flag for discard set!
    #####:  905:	while(card_not_discarded){
    $$$$$:  905-block  0
unconditional  0 never executed
    $$$$$:  905-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  905-block  2
unconditional  3 never executed
    #####:  906:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  906-block  0
branch  0 never executed
branch  1 never executed
    #####:  907:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  908:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  909:	    state->discardCount[currentPlayer]++;
    #####:  910:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  910-block  0
unconditional  0 never executed
    $$$$$:  910-block  1
unconditional  1 never executed
    $$$$$:  910-block  2
branch  2 never executed
branch  3 never executed
    #####:  911:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  912:	    }
    #####:  913:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  914:	    state->handCount[currentPlayer]--;
    #####:  915:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  915-block  0
unconditional  0 never executed
        -:  916:	  }
    #####:  917:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  917-block  0
branch  0 never executed
branch  1 never executed
        -:  918:	    if(DEBUG) {
        -:  919:	      printf("No estate cards in your hand, invalid choice\n");
        -:  920:	      printf("Must gain an estate if there are any\n");
        -:  921:	    }
    #####:  922:	    if (supplyCount(estate, state) > 0){
    $$$$$:  922-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  923-block  0
call    0 never executed
    #####:  924:	      state->supplyCount[estate]--;//Decrement estates
    #####:  925:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:		isGameOver(state);
    $$$$$:  926-block  0
call    0 never executed
unconditional  1 never executed
        -:  927:	      }
        -:  928:	    }
    #####:  929:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  929-block  0
unconditional  0 never executed
        -:  930:	  }
        -:  931:			    
        -:  932:	  else{
    #####:  933:	    p++;//Next card
    $$$$$:  933-block  0
unconditional  0 never executed
        -:  934:	  }
        -:  935:	}
        -:  936:      }
        -:  937:			    
        -:  938:      else{
    #####:  939:	if (supplyCount(estate, state) > 0){
    $$$$$:  939-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  940:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  940-block  0
call    0 never executed
    #####:  941:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  942:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  943:	    isGameOver(state);
    $$$$$:  943-block  0
call    0 never executed
unconditional  1 never executed
        -:  944:	  }
        -:  945:	}
        -:  946:      }
        -:  947:	    
        -:  948:      
    #####:  949:      return 0;
    $$$$$:  949-block  0
unconditional  0 never executed
        -:  950:		
        -:  951:    case great_hall:
        -:  952:      //+1 Card
    #####:  953:      drawCard(currentPlayer, state);
    $$$$$:  953-block  0
call    0 never executed
        -:  954:			
        -:  955:      //+1 Actions
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  960:      return 0;
unconditional  0 never executed
        -:  961:		
        -:  962:    case minion:
        -:  963:      //+1 action
    #####:  964:      state->numActions++;
        -:  965:			
        -:  966:      //discard card from hand
    #####:  967:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  967-block  0
call    0 never executed
        -:  968:			
    #####:  969:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  970:	{
    #####:  971:	  state->coins = state->coins + 2;
    $$$$$:  971-block  0
unconditional  0 never executed
        -:  972:	}
        -:  973:			
    #####:  974:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  974-block  0
branch  0 never executed
branch  1 never executed
        -:  975:	{
        -:  976:	  //discard hand
    #####:  977:	  while(numHandCards(state) > 0)
    $$$$$:  977-block  0
unconditional  0 never executed
    $$$$$:  977-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  978:	    {
    #####:  979:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  979-block  0
call    0 never executed
unconditional  1 never executed
        -:  980:	    }
        -:  981:				
        -:  982:	  //draw 4
    #####:  983:	  for (i = 0; i < 4; i++)
    $$$$$:  983-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  983-block  1
branch  2 never executed
branch  3 never executed
        -:  984:	    {
    #####:  985:	      drawCard(currentPlayer, state);
    $$$$$:  985-block  0
call    0 never executed
        -:  986:	    }
        -:  987:				
        -:  988:	  //other players discard hand and redraw if hand size > 4
    #####:  989:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$:  989-block  0
unconditional  0 never executed
    $$$$$:  989-block  1
unconditional  1 never executed
    $$$$$:  989-block  2
branch  2 never executed
branch  3 never executed
        -:  990:	    {
    #####:  991:	      if (i != currentPlayer)
    $$$$$:  991-block  0
branch  0 never executed
branch  1 never executed
        -:  992:		{
    #####:  993:		  if ( state->handCount[i] > 4 )
    $$$$$:  993-block  0
branch  0 never executed
branch  1 never executed
        -:  994:		    {
        -:  995:		      //discard hand
    #####:  996:		      while( state->handCount[i] > 0 )
    $$$$$:  996-block  0
unconditional  0 never executed
    $$$$$:  996-block  1
branch  1 never executed
branch  2 never executed
        -:  997:			{
    #####:  998:			  discardCard(handPos, i, state, 0);
    $$$$$:  998-block  0
call    0 never executed
unconditional  1 never executed
        -:  999:			}
        -: 1000:							
        -: 1001:		      //draw 4
    #####: 1002:		      for (j = 0; j < 4; j++)
    $$$$$: 1002-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1002-block  1
branch  2 never executed
branch  3 never executed
        -: 1003:			{
    #####: 1004:			  drawCard(i, state);
    $$$$$: 1004-block  0
call    0 never executed
        -: 1005:			}
        -: 1006:		    }
        -: 1007:		}
        -: 1008:	    }
        -: 1009:				
        -: 1010:	}
    #####: 1011:      return 0;
    $$$$$: 1011-block  0
unconditional  0 never executed
        -: 1012:		
        -: 1013:    case steward:
    #####: 1014:      if (choice1 == 1)
    $$$$$: 1014-block  0
branch  0 never executed
branch  1 never executed
        -: 1015:	{
        -: 1016:	  //+2 cards
    #####: 1017:	  drawCard(currentPlayer, state);
    $$$$$: 1017-block  0
call    0 never executed
    #####: 1018:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1019:	}
    #####: 1020:      else if (choice1 == 2)
    $$$$$: 1020-block  0
branch  0 never executed
branch  1 never executed
        -: 1021:	{
        -: 1022:	  //+2 coins
    #####: 1023:	  state->coins = state->coins + 2;
    $$$$$: 1023-block  0
unconditional  0 never executed
        -: 1024:	}
        -: 1025:      else
        -: 1026:	{
        -: 1027:	  //trash 2 cards in hand
    #####: 1028:	  discardCard(choice2, currentPlayer, state, 1);
    $$$$$: 1028-block  0
call    0 never executed
    #####: 1029:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -: 1030:	}
        -: 1031:			
        -: 1032:      //discard card from hand
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1033-block  0
call    0 never executed
    #####: 1034:      return 0;
unconditional  0 never executed
        -: 1035:		
        -: 1036:    case tribute:
    #####: 1037:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1037-block  0
branch  0 never executed
branch  1 never executed
    #####: 1038:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1038-block  0
branch  0 never executed
branch  1 never executed
    #####: 1039:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1040:	  state->deckCount[nextPlayer]--;
    $$$$$: 1040-block  0
unconditional  0 never executed
        -: 1041:	}
    #####: 1042:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1042-block  0
branch  0 never executed
branch  1 never executed
    #####: 1043:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1044:	  state->discardCount[nextPlayer]--;
    $$$$$: 1044-block  0
unconditional  0 never executed
        -: 1045:	}
        -: 1046:	else{
        -: 1047:	  //No Card to Reveal
        -: 1048:	  if (DEBUG){
        -: 1049:	    printf("No cards to reveal\n");
        -: 1050:	  }
        -: 1051:	}
        -: 1052:      }
        -: 1053:	    
        -: 1054:      else{
    #####: 1055:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1055-block  0
branch  0 never executed
branch  1 never executed
    #####: 1056:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1056-block  0
unconditional  0 never executed
    $$$$$: 1056-block  1
unconditional  1 never executed
    $$$$$: 1056-block  2
branch  2 never executed
branch  3 never executed
    #####: 1057:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1058:	    state->deckCount[nextPlayer]++;
    #####: 1059:	    state->discard[nextPlayer][i] = -1;
    #####: 1060:	    state->discardCount[nextPlayer]--;
        -: 1061:	  }
        -: 1062:			    
    #####: 1063:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1063-block  0
call    0 never executed
unconditional  1 never executed
        -: 1064:	} 
    #####: 1065:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1066:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1067:	state->deckCount[nextPlayer]--;
    #####: 1068:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1069:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1070:	state->deckCount[nextPlayer]--;
    $$$$$: 1070-block  0
unconditional  0 never executed
        -: 1071:      }    
        -: 1072:		       
    #####: 1073:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1073-block  0
branch  0 never executed
branch  1 never executed
    #####: 1074:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1075:	state->playedCardCount++;
    #####: 1076:	tributeRevealedCards[1] = -1;
    $$$$$: 1076-block  0
unconditional  0 never executed
        -: 1077:      }
        -: 1078:
    #####: 1079:      for (i = 0; i <= 2; i ++){
    $$$$$: 1079-block  0
unconditional  0 never executed
    $$$$$: 1079-block  1
unconditional  1 never executed
    $$$$$: 1079-block  2
branch  2 never executed
branch  3 never executed
    #####: 1080:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1080-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1080-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1080-block  2
branch  4 never executed
branch  5 never executed
    #####: 1081:	  state->coins += 2;
    $$$$$: 1081-block  0
unconditional  0 never executed
        -: 1082:	}
        -: 1083:		    
    #####: 1084:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1084-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1084-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1084-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1084-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1084-block  4
branch  8 never executed
branch  9 never executed
    #####: 1085:	  drawCard(currentPlayer, state);
    $$$$$: 1085-block  0
call    0 never executed
    #####: 1086:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1087:	}
        -: 1088:	else{//Action Card
    #####: 1089:	  state->numActions = state->numActions + 2;
    $$$$$: 1089-block  0
unconditional  0 never executed
        -: 1090:	}
        -: 1091:      }
        -: 1092:	    
    #####: 1093:      return 0;
    $$$$$: 1093-block  0
unconditional  0 never executed
        -: 1094:		
        -: 1095:    case ambassador:
    #####: 1096:      j = 0;		//used to check if player has enough cards to discard
        -: 1097:
    #####: 1098:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1098-block  1
branch  2 never executed
branch  3 never executed
        -: 1099:	{
    #####: 1100:	  return -1;				
    $$$$$: 1100-block  0
unconditional  0 never executed
        -: 1101:	}
        -: 1102:
    #####: 1103:      if (choice1 == handPos)
    $$$$$: 1103-block  0
branch  0 never executed
branch  1 never executed
        -: 1104:	{
    #####: 1105:	  return -1;
    $$$$$: 1105-block  0
unconditional  0 never executed
        -: 1106:	}
        -: 1107:
    #####: 1108:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1108-block  0
unconditional  0 never executed
    $$$$$: 1108-block  1
unconditional  1 never executed
    $$$$$: 1108-block  2
branch  2 never executed
branch  3 never executed
        -: 1109:	{
    #####: 1110:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1110-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1110-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1110-block  2
branch  4 never executed
branch  5 never executed
        -: 1111:	    {
    #####: 1112:	      j++;
    $$$$$: 1112-block  0
unconditional  0 never executed
        -: 1113:	    }
        -: 1114:	}
    #####: 1115:      if (j < choice2)
    $$$$$: 1115-block  0
branch  0 never executed
branch  1 never executed
        -: 1116:	{
    #####: 1117:	  return -1;				
    $$$$$: 1117-block  0
unconditional  0 never executed
        -: 1118:	}
        -: 1119:
        -: 1120:      if (DEBUG) 
        -: 1121:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1122:
        -: 1123:      //increase supply count for choosen card by amount being discarded
    #####: 1124:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1125:			
        -: 1126:      //each other player gains a copy of revealed card
    #####: 1127:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1127-block  0
unconditional  0 never executed
    $$$$$: 1127-block  1
unconditional  1 never executed
    $$$$$: 1127-block  2
branch  2 never executed
branch  3 never executed
        -: 1128:	{
    #####: 1129:	  if (i != currentPlayer)
    $$$$$: 1129-block  0
branch  0 never executed
branch  1 never executed
        -: 1130:	    {
    #####: 1131:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1131-block  0
call    0 never executed
unconditional  1 never executed
        -: 1132:	    }
        -: 1133:	}
        -: 1134:
        -: 1135:      //discard played card from hand
    #####: 1136:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1136-block  0
call    0 never executed
        -: 1137:
        -: 1138:      //trash copies of cards returned to supply
    #####: 1139:      for (j = 0; j < choice2; j++)
unconditional  0 never executed
    $$$$$: 1139-block  0
unconditional  1 never executed
    $$$$$: 1139-block  1
branch  2 never executed
branch  3 never executed
        -: 1140:	{
    #####: 1141:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1141-block  0
unconditional  0 never executed
    $$$$$: 1141-block  1
unconditional  1 never executed
    $$$$$: 1141-block  2
branch  2 never executed
branch  3 never executed
        -: 1142:	    {
    #####: 1143:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1143-block  0
branch  0 never executed
branch  1 never executed
        -: 1144:		{
    #####: 1145:		  discardCard(i, currentPlayer, state, 1);
    $$$$$: 1145-block  0
call    0 never executed
    #####: 1146:		  break;
unconditional  0 never executed
        -: 1147:		}
        -: 1148:	    }
        -: 1149:	}			
        -: 1150:
    #####: 1151:      return 0;
    $$$$$: 1151-block  0
unconditional  0 never executed
        -: 1152:		
        -: 1153:    case cutpurse:
        -: 1154:
    #####: 1155:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1155-block  0
call    0 never executed
    #####: 1156:      for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
    $$$$$: 1156-block  0
unconditional  1 never executed
    $$$$$: 1156-block  1
branch  2 never executed
branch  3 never executed
        -: 1157:	{
    #####: 1158:	  if (i != currentPlayer)
    $$$$$: 1158-block  0
branch  0 never executed
branch  1 never executed
        -: 1159:	    {
    #####: 1160:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1160-block  0
unconditional  0 never executed
    $$$$$: 1160-block  1
unconditional  1 never executed
    $$$$$: 1160-block  2
branch  2 never executed
branch  3 never executed
        -: 1161:		{
    #####: 1162:		  if (state->hand[i][j] == copper)
    $$$$$: 1162-block  0
branch  0 never executed
branch  1 never executed
        -: 1163:		    {
    #####: 1164:		      discardCard(j, i, state, 0);
    $$$$$: 1164-block  0
call    0 never executed
    #####: 1165:		      break;
unconditional  0 never executed
        -: 1166:		    }
    #####: 1167:		  if (j == state->handCount[i])
    $$$$$: 1167-block  0
branch  0 never executed
branch  1 never executed
        -: 1168:		    {
    #####: 1169:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1169-block  0
unconditional  0 never executed
    $$$$$: 1169-block  1
unconditional  1 never executed
    $$$$$: 1169-block  2
branch  2 never executed
branch  3 never executed
        -: 1170:			{
        -: 1171:			  if (DEBUG)
        -: 1172:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1173:			}	
    #####: 1174:		      break;
    $$$$$: 1174-block  0
unconditional  0 never executed
        -: 1175:		    }		
        -: 1176:		}
        -: 1177:					
        -: 1178:	    }
        -: 1179:				
        -: 1180:	}				
        -: 1181:
        -: 1182:      //discard played card from hand
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1183-block  0
call    0 never executed
        -: 1184:
    #####: 1185:      return 0;
unconditional  0 never executed
        -: 1186:
        -: 1187:		
        -: 1188:    case embargo: 
    #####: 1189:		return embargoEffect(currentPlayer, state, handPos, choice1);
    $$$$$: 1189-block  0
call    0 never executed
unconditional  1 never executed
        -: 1190:		
        -: 1191:    case outpost:
    #####: 1192:		return outpostEffect(currentPlayer, state, handPos);
    $$$$$: 1192-block  0
call    0 never executed
unconditional  1 never executed
        -: 1193:		
        -: 1194:    case salvager:
        -: 1195:      //+1 buy
    #####: 1196:      state->numBuys++;
        -: 1197:			
    #####: 1198:      if (choice1)
    $$$$$: 1198-block  0
branch  0 never executed
branch  1 never executed
        -: 1199:	{
        -: 1200:	  //gain coins equal to trashed card
    #####: 1201:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1201-block  0
call    0 never executed
call    1 never executed
        -: 1202:	  //trash card
    #####: 1203:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
unconditional  1 never executed
        -: 1204:	}
        -: 1205:			
        -: 1206:      //discard card
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1207-block  0
call    0 never executed
    #####: 1208:      return 0;
unconditional  0 never executed
        -: 1209:		
        -: 1210:    case sea_hag:
    #####: 1211:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1211-block  0
unconditional  0 never executed
    $$$$$: 1211-block  1
unconditional  1 never executed
    $$$$$: 1211-block  2
branch  2 never executed
branch  3 never executed
    #####: 1212:	if (i != currentPlayer){
    $$$$$: 1212-block  0
branch  0 never executed
branch  1 never executed
    #####: 1213:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1214:	  state->discardCount[i]++;
    #####: 1215:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1215-block  0
unconditional  0 never executed
        -: 1216:	}
        -: 1217:      }
    #####: 1218:      return 0;
    $$$$$: 1218-block  0
unconditional  0 never executed
        -: 1219:		
        -: 1220:    case treasure_map:
        -: 1221:      //search hand for another treasure_map
    #####: 1222:      index = -1;
    #####: 1223:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1223-block  0
unconditional  0 never executed
    $$$$$: 1223-block  1
unconditional  1 never executed
    $$$$$: 1223-block  2
branch  2 never executed
branch  3 never executed
        -: 1224:	{
    #####: 1225:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1225-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1225-block  1
branch  2 never executed
branch  3 never executed
        -: 1226:	    {
    #####: 1227:	      index = i;
    #####: 1228:	      break;
    $$$$$: 1228-block  0
unconditional  0 never executed
        -: 1229:	    }
        -: 1230:	}
    #####: 1231:      if (index > -1)
    $$$$$: 1231-block  0
branch  0 never executed
branch  1 never executed
        -: 1232:	{
        -: 1233:	  //trash both treasure cards
    #####: 1234:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1234-block  0
call    0 never executed
    #####: 1235:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1236:
        -: 1237:	  //gain 4 Gold cards
    #####: 1238:	  for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1238-block  0
branch  2 never executed
branch  3 never executed
        -: 1239:	    {
    #####: 1240:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1240-block  0
call    0 never executed
        -: 1241:	    }
        -: 1242:				
        -: 1243:	  //return success
    #####: 1244:	  return 1;
    $$$$$: 1244-block  0
unconditional  0 never executed
        -: 1245:	}
        -: 1246:			
        -: 1247:      //no second treasure_map found in hand
    #####: 1248:      return -1;
    $$$$$: 1248-block  0
unconditional  0 never executed
        -: 1249:    }
        -: 1250:	
    #####: 1251:  return -1;
    $$$$$: 1251-block  0
unconditional  0 never executed
    $$$$$: 1251-block  1
unconditional  1 never executed
        -: 1252:}
        -: 1253:
function discardCard called 10007 returned 100% blocks executed 78%
    10007: 1254:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
    10007: 1254-block  0
        -: 1255:{
        -: 1256:	
        -: 1257:  //if card is not trashed, added to Played pile 
    10007: 1258:  if (trashFlag < 1)
    10007: 1258-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10007
        -: 1259:    {
        -: 1260:      //add card to played pile
    #####: 1261:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1262:      state->playedCardCount++;
    $$$$$: 1262-block  0
unconditional  0 never executed
        -: 1263:    }
        -: 1264:	
        -: 1265:  //set played card to -1
    10007: 1266:  state->hand[currentPlayer][handPos] = -1;
        -: 1267:	
        -: 1268:  //remove card from player's hand
    10007: 1269:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
    10007: 1269-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 10005
        -: 1270:    {
        -: 1271:      //reduce number of cards in hand
        2: 1272:      state->handCount[currentPlayer]--;
        2: 1272-block  0
unconditional  0 taken 2
        -: 1273:    }
    10005: 1274:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
    10005: 1274-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10005
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
    $$$$$: 1277-block  0
unconditional  0 never executed
        -: 1278:    }
        -: 1279:  else 	
        -: 1280:    {
        -: 1281:      //replace discarded card with last card in hand
    10005: 1282:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1283:      //set last card to -1
    10005: 1284:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1285:      //reduce number of cards in hand
    10005: 1286:      state->handCount[currentPlayer]--;
    10005: 1286-block  0
unconditional  0 taken 10005
        -: 1287:    }
        -: 1288:	
    10007: 1289:  return 0;
    10007: 1289-block  0
unconditional  0 taken 10007
        -: 1290:}
        -: 1291:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1292:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
    $$$$$: 1292-block  0
        -: 1293:{
        -: 1294:  //Note: supplyPos is enum of choosen card
        -: 1295:	
        -: 1296:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1297:  if ( supplyCount(supplyPos, state) < 1 )
    $$$$$: 1297-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1298:    {
    #####: 1299:      return -1;
    $$$$$: 1299-block  0
unconditional  0 never executed
        -: 1300:    }
        -: 1301:	
        -: 1302:  //added card for [whoseTurn] current player:
        -: 1303:  // toFlag = 0 : add to discard
        -: 1304:  // toFlag = 1 : add to deck
        -: 1305:  // toFlag = 2 : add to hand
        -: 1306:
    #####: 1307:  if (toFlag == 1)
    $$$$$: 1307-block  0
branch  0 never executed
branch  1 never executed
        -: 1308:    {
    #####: 1309:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1310:      state->deckCount[player]++;
    $$$$$: 1310-block  0
unconditional  0 never executed
        -: 1311:    }
    #####: 1312:  else if (toFlag == 2)
    $$$$$: 1312-block  0
branch  0 never executed
branch  1 never executed
        -: 1313:    {
    #####: 1314:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1315:      state->handCount[player]++;
    $$$$$: 1315-block  0
unconditional  0 never executed
        -: 1316:    }
        -: 1317:  else
        -: 1318:    {
    #####: 1319:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1320:      state->discardCount[player]++;
    $$$$$: 1320-block  0
unconditional  0 never executed
        -: 1321:    }
        -: 1322:	
        -: 1323:  //decrease number in supply pile
    #####: 1324:  state->supplyCount[supplyPos]--;
        -: 1325:	 
    #####: 1326:  return 0;
    $$$$$: 1326-block  0
unconditional  0 never executed
        -: 1327:}
        -: 1328:
function updateCoins called 68 returned 100% blocks executed 100%
       68: 1329:int updateCoins(int player, struct gameState *state, int bonus)
       68: 1329-block  0
        -: 1330:{
        -: 1331:  int i;
        -: 1332:	
        -: 1333:  //reset coin count
       68: 1334:  state->coins = 0;
        -: 1335:
        -: 1336:  //add coins for each Treasure card in player's hand
      398: 1337:  for (i = 0; i < state->handCount[player]; i++)
       68: 1337-block  0
unconditional  0 taken 68
      330: 1337-block  1
unconditional  1 taken 330
      398: 1337-block  2
branch  2 taken 330
branch  3 taken 68 (fallthrough)
        -: 1338:    {
      330: 1339:      if (state->hand[player][i] == copper)
      330: 1339-block  0
branch  0 taken 237 (fallthrough)
branch  1 taken 93
        -: 1340:	{
      237: 1341:	  state->coins += 1;
      237: 1341-block  0
unconditional  0 taken 237
        -: 1342:	}
       93: 1343:      else if (state->hand[player][i] == silver)
       93: 1343-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 84
        -: 1344:	{
        9: 1345:	  state->coins += 2;
        9: 1345-block  0
unconditional  0 taken 9
        -: 1346:	}
       84: 1347:      else if (state->hand[player][i] == gold)
       84: 1347-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 76
        -: 1348:	{
        8: 1349:	  state->coins += 3;
        8: 1349-block  0
unconditional  0 taken 8
        -: 1350:	}	
        -: 1351:    }	
        -: 1352:
        -: 1353:  //add bonus
       68: 1354:  state->coins += bonus;
        -: 1355:
       68: 1356:  return 0;
       68: 1356-block  0
unconditional  0 taken 68
        -: 1357:}
        -: 1358:
        -: 1359:
        -: 1360://end of dominion.c
        -: 1361:
